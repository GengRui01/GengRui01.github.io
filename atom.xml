<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gengruiblog.cn/"/>
  <updated>2021-04-19T23:25:47.574Z</updated>
  <id>https://www.gengruiblog.cn/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何写简历经历</title>
    <link href="https://www.gengruiblog.cn/article/20210411.html"/>
    <id>https://www.gengruiblog.cn/article/20210411.html</id>
    <published>2021-04-10T16:00:00.000Z</published>
    <updated>2021-04-19T23:25:47.574Z</updated>
    
    <content type="html"><![CDATA[<p>一份简历到HR的手上一般有如下两种结果：</p><ol><li>进垃圾桶</li><li>仔细看看，约来面试</li></ol><p>那么，HR做出这样的判断需要多长时间呢？</p><p>我们咨询了中国外企、垄断国企和民企的HR，他们基本表示，一天看300-400份简历是经常的，并且表示——小菜一碟</p><p>做一个简单的数学题：按照每个HR一天8小时工作不做其他事计算，平均1分钟到1分半处理一份简历——当然，没有一个HR一天只做简历处理的，所以这个时间还要缩短</p><p>1分钟就对1个读了18年书的青年做出判断，是一种负责任的态度么？</p><a id="more"></a><h2 id="针对应聘岗位写简历"><a href="#针对应聘岗位写简历" class="headerlink" title="针对应聘岗位写简历"></a>针对应聘岗位写简历</h2><p>为了说明这个问题，乔布简历的创始人Rick Ma同志创造性的发明了一种理论</p><p>在阐述这个理论之前，我们先看一张图，这张图上是一只鸟。你要说出“这是一只什么鸟”</p><p><img src="https://gengrui01.github.io/picture/make-resume/1.jpg" alt=""></p><p>是鸭子!你用了多长时间？1秒，2秒，还是1分钟？应该是脱口而出吧。</p><p>下一个问题，为什么是鸭子呢？</p><p>这还用问么，因为 Ta有扁扁的嘴和扁扁的脚，这都是明显鸭子的特征嘛</p><p>我们判断鸭子，就看鸭嘴和鸭掌</p><p>只要有鸭嘴鸭掌，鸭子！</p><p>只要没有鸭嘴鸭掌，不知道是什么，反正不是鸭子。</p><p>看简历选人是同样的道理。我们管这叫 “鸭子理论”</p><p>你的简历要像那张鸭子的图片一样，迅速把你有的并且他们需要的能力（“鸭嘴”和“鸭掌”）亮出来，马上让企业知道，你就是他们要的人</p><p>面试官阅读简历的目的是根据每一段经历判断你的能力达到了什么水平</p><p>为了方便面试官迅速在我们的经历中找到他需要的能力，我们的每一段经历都要写的具体、简洁、有条理</p><p>因为不同的岗位和领域，所需要的能力是不一样的，所以我们要针对不同的应聘岗位写不同侧重点的简历</p><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><p>如果你的简历写得朦朦胧胧，面试官可能会觉得你没什么干货，所以不敢写得详细。</p><p>面试官看经历，是为了判断能力，因此经历越具体，判断就会越准确</p><p>下面介绍三个可以把经历写具体的方法：</p><h3 id="1-动作分解"><a href="#1-动作分解" class="headerlink" title="1.动作分解"></a>1.动作分解</h3><p>把一件事情，按照它发生的顺序拆解成多个步骤，一步一步的写下来，这就是按步骤描述经历</p><p>举例用动作分解法将“他走了”3个字写成4句话：</p><ul><li>他抬起头看了老师一眼，迟疑了一下，慢慢地站了起来</li><li>来到中间过道上，弯下腰，悄悄地朝门口走去</li><li>来到门前，将手搭在把手上向左旋转，门应声而开</li><li>走出去把门带上，头也不回地离开了</li></ul><h3 id="2-深入细节"><a href="#2-深入细节" class="headerlink" title="2.深入细节"></a>2.深入细节</h3><p>不够复杂不好进行动作分解的经历可以使用深入细节法，从背景、做法、结果三个角度细节描写，添加具体内容</p><p>举例有一位求职者，在大学期间曾经组织过一次游园会，虽然她只是打杂，却很积极很投入，比其他打杂的干事强很多，我们使用深入细节法把这些不同表达出来：</p><ul><li>背景：游园会是XXX大学最有影响的传统经典活动，包括文艺巡演、围湖诗会、思源灯谜等3大部分，从每年的4月份持续到5月份。</li><li>做法：作为干事参与组织部、宣传部的工作。联系参演社团的工作人员，通知会议、做会议记录、协调排练场地。收集各社团的宣传海报，统一张贴。</li><li>结果：本届活动有大约200多名工作人员，2000多人次参加，成为最成功的一届游园会。</li></ul><h3 id="3-数字支撑"><a href="#3-数字支撑" class="headerlink" title="3.数字支撑"></a>3.数字支撑</h3><p>数字可能是一种新的迷信。有数字的经历看起来更真实，数字也让我们可以横向对比，更精确的感受程度和水平。</p><p>比如上文提到的游园会经历的做法，如果把数字加进去，一切就变得更容易理解了：</p><ul><li>联系23个参演社团的200多名工作人员，共通知了6次会议，记录会议摘要1万多字，协调排练场地34次</li><li>收集46张各社团的宣传海报，统一张贴在校内7个主要的海报栏</li></ul><h2 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h2><p>在我们的简历里，文字要简洁，舍弃一切无助于描述客观事实的文字，排版也要简洁，每句话独立地表述一件事情，呈现一个能力</p><h3 id="1-文字简洁"><a href="#1-文字简洁" class="headerlink" title="1.文字简洁"></a>1.文字简洁</h3><p>描述事情、表达能力的最小单元是一个动宾结构</p><p>就像我常常在课上讲的，“我”是代词，“自行车”是名词，这两个词放在一起，没有能力</p><p>我们加上不同的动词，就会出现不同的能力，比如“我骑自行车”、“我修自行车”、“我偷自行车”</p><p>我们进一步发现，“偷自行车”和“偷汽车”所需要的能力是很不一样的，前者只是毛贼，后者就是《速度与激情》了</p><p>因此动词加上宾语，一个动宾结构就可能完整而具体地表达一个能力，简历中的文字可以多使用动宾短语</p><p>上文我们提到“动作分解”，就是要把一件事情用多个“动宾结构”表达出来，各种各样的能力就自然表达出来了</p><h3 id="2-排版简洁"><a href="#2-排版简洁" class="headerlink" title="2.排版简洁"></a>2.排版简洁</h3><p>排版的目的是让阅读更简单，最简单的句子就是只表达一个意思的句子</p><p>我们比较以下两段经历就明白了</p><ol><li>上海图书馆志愿者活动 团体负责人</li></ol><p>我在里面担任了志愿者的小组长，协助领导的工作。在工作中学会了与人相处的技能，提高了团队合作能力，尤其是在协调志愿者的过程中，锻炼了沟通的技巧。最后我们获得了“先进集体”的正好，我获得“个人优秀组织者”称号。</p><ol start="2"><li>上海图书馆志愿者活动 团体负责人</li></ol><ul><li>宣传志愿活动、招募选拔组员并进行培训</li><li>处理突发事件、组织协调管理人事调动</li><li>与上图志愿者管理方协调解决志愿过程中暴露的问题</li><li>任职期间，所带团队获上图志愿“先进集体”称号，个人获“优秀组织者”称号。</li></ul><h2 id="条理"><a href="#条理" class="headerlink" title="条理"></a>条理</h2><p>任何一段文字内容的安排顺序，如果不符合人的思维习惯，读起来就会很吃力</p><p>对于简历中的经历而言，常用的表达顺序是“时间顺序”或“逻辑顺序”</p><h3 id="1-时间顺序"><a href="#1-时间顺序" class="headerlink" title="1.时间顺序"></a>1.时间顺序</h3><p>时间顺序也可以叫做流程顺序，如果是一个独立的项目，可以把先做了什么后做了什么依次写出来，如下面这段经历：</p><p>中国农业大学暑期实践团 暑期社会实践调查员</p><ul><li>针对农民设计简单易懂的问卷，并独立走访调查</li><li>与当地政府合作，综合分析相关会议记录和政策资料</li><li>完成长达20页的报告，荣获优秀社会实践报告</li></ul><h3 id="2-逻辑顺序"><a href="#2-逻辑顺序" class="headerlink" title="2.逻辑顺序"></a>2.逻辑顺序</h3><p>如果在一个组织中参与了多个项目，或者做了很多彼此关联度不大的事情，可以遵循一定的逻辑顺序来表述，如下面这段经历：</p><p>华东师范大学“一诺”志愿者服务队 队长</p><ul><li>组建华东师范大学“一诺”志愿者服务队，配备5支分队，与14个社区与单位达成共建协议，吸引注册志愿者共计400余人</li><li>开展“向日葵理财计划”系列金融理财知识普及活动，培训理财志愿者70名，主编《理财行动手册》，被评为校精品活动</li><li>因成功开展“关爱智障儿童”活动，与强生、微软共同被邀请至闵行区“爱心联盟”，2008年被评为闵行区优秀志愿服务队</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一份简历到HR的手上一般有如下两种结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进垃圾桶&lt;/li&gt;
&lt;li&gt;仔细看看，约来面试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，HR做出这样的判断需要多长时间呢？&lt;/p&gt;
&lt;p&gt;我们咨询了中国外企、垄断国企和民企的HR，他们基本表示，一天看300-400份简历是经常的，并且表示——小菜一碟&lt;/p&gt;
&lt;p&gt;做一个简单的数学题：按照每个HR一天8小时工作不做其他事计算，平均1分钟到1分半处理一份简历——当然，没有一个HR一天只做简历处理的，所以这个时间还要缩短&lt;/p&gt;
&lt;p&gt;1分钟就对1个读了18年书的青年做出判断，是一种负责任的态度么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>一张好的求职照所需要具备什么要素</title>
    <link href="https://www.gengruiblog.cn/article/20210410.html"/>
    <id>https://www.gengruiblog.cn/article/20210410.html</id>
    <published>2021-04-09T16:00:00.000Z</published>
    <updated>2021-04-19T23:25:47.663Z</updated>
    
    <content type="html"><![CDATA[<p>HR通过求职照获得对你的第一印象</p><p>求职照不是选美比赛，但每个人都可以照出最有职业感的照片</p><p>求职照应该是正面或者前侧面的免冠半身照</p><p>我们将从发型、妆容、正装、表情、背景色5个方面详细讲解好的求职照所需要具备的要素</p><a id="more"></a><h2 id="发型"><a href="#发型" class="headerlink" title="发型"></a>发型</h2><ul><li>女生发型<ul><li>长发最好盘起来，披散和扎马尾都不是理想的发型</li><li>头发干净，顺滑</li><li>刘海不宜过长，不要挡住眼睛，耳朵也尽量露出来</li><li>脸型不好也不要在脸周围留很多的头发，可以尝试用腮红、阴影来修改脸型</li></ul></li><li>男生发型<ul><li>前不遮眉毛</li><li>侧不过耳</li><li>后不及领</li></ul></li></ul><h2 id="妆容"><a href="#妆容" class="headerlink" title="妆容"></a>妆容</h2><ul><li>女生妆容<ul><li>为了看起来显得比较精神，可以画个淡妆</li><li>不要化烟熏妆或者浓妆，不要使用带闪的化妆品，不要用过分鲜艳的颜色，技术不佳容易适得其反</li></ul></li><li>男生妆容<ul><li>要保持干净的脸庞，化妆就不必了</li><li>有小痘痘这样的瑕疵，照相馆后期制作时会帮你修一下的</li></ul></li></ul><p><strong><em>TIPS:</em></strong> 眼镜和饰品</p><ul><li>对平时戴眼镜的同学，照求职照的时候最好也佩戴，但为了避免造成反光，可以使用镜框</li><li>如果平时带隐形眼镜，不要使用彩色的，更不要出现两只眼镜不同颜色</li><li>女生带耳环只能用耳钉，不能用吊坠，并且两只耳朵必须是一样的耳钉</li><li>饰品不能太夸张，颜色过于鲜艳，或者带亮片都是不规范的</li></ul><h2 id="正装"><a href="#正装" class="headerlink" title="正装"></a>正装</h2><ul><li>女生正装<ul><li>正装套装或者单穿比较正式的衬衣</li><li>女士求职照中不能戴领带</li></ul></li><li>男生正装<ul><li>衬衫、西装、领带的组合最正式</li></ul></li></ul><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p>表情尽量自然，面带微笑</p><p>微笑不仅要表现在你的嘴角上扬，微微露齿，还表现在眼睛里，配合上扬的嘴角，眼神也要保持愉悦的感觉</p><p>建议照相前在镜子前多做几遍演示</p><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p>求职照一般选择灰色、白色或蓝色作为背景色</p><p>不建议用红色或者黑色，不够职业</p><p>渐变色背景给人感觉更柔和，效果会更好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HR通过求职照获得对你的第一印象&lt;/p&gt;
&lt;p&gt;求职照不是选美比赛，但每个人都可以照出最有职业感的照片&lt;/p&gt;
&lt;p&gt;求职照应该是正面或者前侧面的免冠半身照&lt;/p&gt;
&lt;p&gt;我们将从发型、妆容、正装、表情、背景色5个方面详细讲解好的求职照所需要具备的要素&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：SpringMVC面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210405.html"/>
    <id>https://www.gengruiblog.cn/article/20210405.html</id>
    <published>2021-04-04T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.549Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：SpringMVC面试题</p><a id="more"></a><h2 id="1-MVC是什么的缩写？"><a href="#1-MVC是什么的缩写？" class="headerlink" title="1.MVC是什么的缩写？"></a>1.MVC是什么的缩写？</h2><p>MVC是模型(Model)、视图(View)、控制器(Controller)的缩写</p><h2 id="2-根据下图描述MVC模式下的请求响应流程"><a href="#2-根据下图描述MVC模式下的请求响应流程" class="headerlink" title="2.根据下图描述MVC模式下的请求响应流程"></a>2.根据下图描述MVC模式下的请求响应流程</h2><p><img src="https://gengrui01.github.io/picture/springmvc-interview-question/1.png" alt=""></p><p>1）    客户端浏览器请求发送到控制器</p><p>2）    控制器调用模型层方法</p><p>3）    模型层操作数据库</p><p>4）    模型层告诉控制器操作完成 返回数据</p><p>5）    控制器调用视图层渲染页面</p><p>6）    视图层将渲染好的页面返回控制器</p><p>7）    控制器发送响应到浏览器 浏览器展示页面</p><h2 id="3-SpringMVC基础配置内容"><a href="#3-SpringMVC基础配置内容" class="headerlink" title="3.SpringMVC基础配置内容"></a>3.SpringMVC基础配置内容</h2><ul><li><p>加载注解驱动： <code>&lt;mvc:annotation-driven/&gt;</code></p></li><li><p>静态资源过滤： <code>&lt;mvc:default-servlet-handler/&gt;</code></p></li><li><p>视图解析器：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-web-xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？"><a href="#4-web-xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？" class="headerlink" title="4.web.xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？"></a>4.web.xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？</h2><p>url-pattern中的内容是用来标识请求拦截的</p><ul><li>/ 匹配所有的请求；（不包括.jsp）</li><li>/* 匹配所有的请求；（包括.jsp）</li><li>为空时所有请求都会被SpringMVC拦截</li></ul><h2 id="5-SpringMVC请求映射注解有哪些？"><a href="#5-SpringMVC请求映射注解有哪些？" class="headerlink" title="5.SpringMVC请求映射注解有哪些？"></a>5.SpringMVC请求映射注解有哪些？</h2><table><thead><tr><th>请求映射注解</th><th>说明</th><th>类/方法</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>通用的请求处理</td><td>类</td></tr><tr><td>@GetMapping</td><td>处理 HTTP GET 请求</td><td>查询方法</td></tr><tr><td>@PostMapping</td><td>处理 HTTP POST 请求</td><td>新增修改方法</td></tr><tr><td>@PutMapping</td><td>处理 HTTP PUT 请求</td><td>新增修改方法</td></tr><tr><td>@PatchMapping</td><td>处理 HTTP PATCH 请求</td><td>新增修改方法</td></tr><tr><td>@DeleteMapping</td><td>处理 HTTP DELETE 请求</td><td>删除方法</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：SpringMVC面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：MyBatis面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210404.html"/>
    <id>https://www.gengruiblog.cn/article/20210404.html</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.568Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：MyBatis面试题</p><a id="more"></a><h2 id="1-ORM是什么的缩写？"><a href="#1-ORM是什么的缩写？" class="headerlink" title="1.ORM是什么的缩写？"></a>1.ORM是什么的缩写？</h2><p>ORM是对象(Object)、关系(Relational)、映射(Mapping)的缩写</p><h2 id="2-ORM有什么作用？"><a href="#2-ORM有什么作用？" class="headerlink" title="2.ORM有什么作用？"></a>2.ORM有什么作用？</h2><p>ORM会把对SQL的操作转换为对象的操作，从而让程序员使用起来更加方便和易于接受</p><h2 id="3-Hibernate与MyBatis的区别？"><a href="#3-Hibernate与MyBatis的区别？" class="headerlink" title="3.Hibernate与MyBatis的区别？"></a>3.Hibernate与MyBatis的区别？</h2><ul><li>Hibernate<ul><li>全自动化ORM框架，数据库移植性好，基础业务几乎不需要写SQL</li><li>易学难精，上手简单但熟练使用需要阅读大量文档，框架结构复杂</li></ul></li><li>MyBatis<ul><li>半自动化ORM框架，数据库移植性一般，基础业务仍需写SQL，但可以通过基础Mapper来简化</li><li>易学易用，上手简单，结构精简清晰，易深入学习</li></ul></li></ul><h2 id="4-要想使用MyBatis需要导入的包有哪些？"><a href="#4-要想使用MyBatis需要导入的包有哪些？" class="headerlink" title="4.要想使用MyBatis需要导入的包有哪些？"></a>4.要想使用MyBatis需要导入的包有哪些？</h2><ul><li>mysql-connector-java：MySQL驱动包</li><li>mybatis：MyBatis基础包</li></ul><h2 id="5-MyBatis配置用到哪些标签？"><a href="#5-MyBatis配置用到哪些标签？" class="headerlink" title="5.MyBatis配置用到哪些标签？"></a>5.MyBatis配置用到哪些标签？</h2><ul><li>configuration 标签对应 Configuration 类，负责 MyBatis 架构中的配置部分</li><li>environment 标签对应 Environment 类，是环境变量，必须有唯一的 id</li><li>transactionManager 标签对应 JdbcTransactionFactory 类，表示事务工厂，当 MyBatis 需要新建事务的时候，会通过它来新建</li><li>dataSource 标签对应 PooledDataSource 类，表示数据源，通过其构造参数，我们传入了数据库 url，数据库用户和密码等配置</li></ul><h2 id="6-mapper文件中常用标签"><a href="#6-mapper文件中常用标签" class="headerlink" title="6.mapper文件中常用标签"></a>6.mapper文件中常用标签</h2><ul><li>新增数据：<insert></insert></li><li>删除数据：<delete></delete></li><li>修改数据：<update></update></li><li>查询数据：<select></select></li></ul><h2 id="7-mapper文件中的SQL语句使用什么符号引用传入参数？"><a href="#7-mapper文件中的SQL语句使用什么符号引用传入参数？" class="headerlink" title="7.mapper文件中的SQL语句使用什么符号引用传入参数？"></a>7.mapper文件中的SQL语句使用什么符号引用传入参数？</h2><p>mapper文件中的SQL语句使用 <strong><em>#{}</em></strong> 符号引用传入参数</p><h2 id="8-写通过id查询表中单条数据的Dao层代码"><a href="#8-写通过id查询表中单条数据的Dao层代码" class="headerlink" title="8.写通过id查询表中单条数据的Dao层代码"></a>8.写通过id查询表中单条数据的Dao层代码</h2><p>java代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/1.png" alt=""></p><p>xml代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/6.png" alt=""></p><h2 id="9-写查询表中所有数据的Dao层代码"><a href="#9-写查询表中所有数据的Dao层代码" class="headerlink" title="9.写查询表中所有数据的Dao层代码"></a>9.写查询表中所有数据的Dao层代码</h2><p>java代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/2.png" alt=""></p><p>xml代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：MyBatis面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：Spring面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210403.html"/>
    <id>https://www.gengruiblog.cn/article/20210403.html</id>
    <published>2021-04-02T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.534Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：Spring面试题</p><a id="more"></a><h2 id="1-Spring体系结构由哪几部分构成？"><a href="#1-Spring体系结构由哪几部分构成？" class="headerlink" title="1.Spring体系结构由哪几部分构成？"></a>1.Spring体系结构由哪几部分构成？</h2><ul><li>Data Access/Integration：持久层</li><li>Web：表现层</li><li>Test：测试层</li><li>中间的两部分 是Spring框架的核心功能</li></ul><h2 id="2-Spring有哪些核心功能？"><a href="#2-Spring有哪些核心功能？" class="headerlink" title="2.Spring有哪些核心功能？"></a>2.Spring有哪些核心功能？</h2><ul><li>控制反转(IOC)</li><li>依赖注入(DI)</li><li>面向切面编程(AOP)</li></ul><h2 id="3-什么是控制反转-IOC-？"><a href="#3-什么是控制反转-IOC-？" class="headerlink" title="3.什么是控制反转(IOC)？"></a>3.什么是控制反转(IOC)？</h2><p>IOC是一种设计模式，将实例化对象的控制权由手动的new变成了Spring框架通过反射机制实例化，并将对象的实例存入在容器种进行管理</p><ol start="4"><li>什么是依赖注入(DI)？</li></ol><p>DI是指对象中其余对象的引用通过Spring框架直接注入</p><h2 id="5-什么是面向切面编程-AOP-？"><a href="#5-什么是面向切面编程-AOP-？" class="headerlink" title="5.什么是面向切面编程(AOP)？"></a>5.什么是面向切面编程(AOP)？</h2><p>AOP指的就是通过预编译和运行期动态代理的方式实现在程序运行某个方法的时候，不修改原始执行代码逻辑，由程序动态地执行某些额外的功能，对原有的方法做增强</p><h2 id="6-要想使用Spring需要导入的基础包有哪些？"><a href="#6-要想使用Spring需要导入的基础包有哪些？" class="headerlink" title="6.要想使用Spring需要导入的基础包有哪些？"></a>6.要想使用Spring需要导入的基础包有哪些？</h2><ul><li>spring-core：Core模块主要包含Spring框架基本的核心工具类，Spring的其他组件要都要使用到这个包里的类，Core模块是其他组件的基本核心</li><li>spring-beans：包含访问配置文件、创建和管理bean以及进行IOC/DI操作相关的所有类</li><li>spring-context：Spring的上下文即IOC容器，通过上下文可以获得容器中的Bean</li><li>spring-expression：EL表达式语言用于在运行时查询和操纵对象</li></ul><h2 id="7-分析ApplicationContext执行过程"><a href="#7-分析ApplicationContext执行过程" class="headerlink" title="7.分析ApplicationContext执行过程"></a>7.分析ApplicationContext执行过程</h2><p>1）ApplicationContext加载项目中的Spring配置</p><p>2）调用refresh方法刷新容器（bean的实例化就在这个方法中）</p><p>3）context.getBean()方法是通过配置文件中声明的bean标签id属性获取容器内的实例</p><h2 id="8-IOC常用注解"><a href="#8-IOC常用注解" class="headerlink" title="8.IOC常用注解"></a>8.IOC常用注解</h2><ul><li>@Component：一般用于通用组件类上使用的注解</li><li>@Service：一般用于业务逻辑层上使用的注解</li><li>@Controller：一般用于流程控制层上使用的注解</li><li>@Repository：一般用于数据持久层上使用的注解</li></ul><h2 id="9-DI常用注解"><a href="#9-DI常用注解" class="headerlink" title="9.DI常用注解"></a>9.DI常用注解</h2><ul><li>@Autowired：自动按照类型注入</li><li>@Qualifier：在按照类型注入的基础之上再按照Bean的id注入</li><li>@Resource：默认按照id注入找不到再按照类型注入</li></ul><h2 id="10-AOP常用注解"><a href="#10-AOP常用注解" class="headerlink" title="10.AOP常用注解"></a>10.AOP常用注解</h2><ul><li>@Aspect：表明某个类为切面类</li><li>@Pointcut：声明一个切入点，表明哪些类的哪些方法需要被增强</li><li>@Before 前置通知</li><li>@AfterReturning 后置通知</li><li>@After 最终通知</li><li>@AfterThrowing 异常通知</li></ul><h2 id="11-什么是代理模式？"><a href="#11-什么是代理模式？" class="headerlink" title="11.什么是代理模式？"></a>11.什么是代理模式？</h2><p>代理模式是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用</p><p>代理模式可以分为静态代理和动态代理</p><p>动态代理常用的有基于接口和基于子类两种方式</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：Spring面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>for forEach 循环及Lambda表达式使用</title>
    <link href="https://www.gengruiblog.cn/article/20210330.html"/>
    <id>https://www.gengruiblog.cn/article/20210330.html</id>
    <published>2021-03-29T16:00:00.000Z</published>
    <updated>2021-03-30T12:18:40.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环语句是代码中常用的循环代码，相对于其他的循环语句更为简单，一般代码结构如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 判别式; 更新) &#123;</span><br><span class="line">    代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程:</p><p>首先进行初始化</p><p>初始化之后执行判别式，如果判别式结果为真，会执行代码块内容，之后执行更新语句</p><p>更新后再次执行判别式，如果判别式结果为真，会执行代码块内容，之后执行更新语句</p><p>更新后再次执行判别式，直到判别式结果为假结束循环</p><p>以打印List中数据为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFor</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----for循环开始-----"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----for循环结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建List 输入三个值</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"第1个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第2个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第3个值"</span>);</span><br><span class="line">        <span class="comment">// for循环打印List中的值</span></span><br><span class="line">        printFor(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://gengrui01.github.io/picture/for-foreach-lambda/1.png" alt=""></p><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><p>forEach循环是java5的新特征之一，在遍历数组、集合方面，forEach为开发人员提供了极大的方便</p><p>其代码结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型 元素变量 : 遍历对象)&#123; </span><br><span class="line">     代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历对象通常为数组或者集合</p><p>元素类型为数组或者集合中所存数据的类型</p><p>元素变量为每个元素的变量名</p><p>执行流程是循环遍历遍历对象，用元素变量获取遍历对象中的各个元素执行代码语句</p><p>以打印List中数据为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printForEach</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach开始-----"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建List 输入三个值</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"第1个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第2个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第3个值"</span>);</span><br><span class="line">        <span class="comment">// forEach打印List中的值</span></span><br><span class="line">        printForEach(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://gengrui01.github.io/picture/for-foreach-lambda/2.png" alt=""></p><h2 id="forEach循环-Lambda表达式"><a href="#forEach循环-Lambda表达式" class="headerlink" title="forEach循环 + Lambda表达式"></a>forEach循环 + Lambda表达式</h2><p>Lambda表达式是java8的新特征之一，它使我们可以更方便地操作集合</p><p>forEach循环整合Lambda表达式后代码结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">遍历对象.forEach(元素变量 -&gt; 代码语句);</span><br></pre></td></tr></table></figure><p>遍历对象通常为数组或者集合</p><p>元素变量为每个元素的变量名</p><p>执行流程是循环遍历遍历对象，用元素变量获取遍历对象中的各个元素执行代码语句</p><p>以打印List中数据为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printForEachLambda</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach+Lambda开始-----"</span>);</span><br><span class="line">        list.forEach(str -&gt; System.out.println(str));</span><br><span class="line">        System.out.println(<span class="string">"-----forEach+Lambda结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建List 输入三个值</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"第1个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第2个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第3个值"</span>);</span><br><span class="line">        <span class="comment">// forEach+Lambda打印List中的值</span></span><br><span class="line">        printForEachLambda(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://gengrui01.github.io/picture/for-foreach-lambda/3.png" alt=""></p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for循环打印List中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFor</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----for循环开始-----"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----for循环结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * forEach打印List中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printForEach</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach开始-----"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * forEach+Lambda打印List中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printForEachLambda</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----forEach+Lambda开始-----"</span>);</span><br><span class="line">        list.forEach(str -&gt; System.out.println(str));</span><br><span class="line">        System.out.println(<span class="string">"-----forEach+Lambda结束-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建List 输入三个值</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"第1个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第2个值"</span>);</span><br><span class="line">        list.add(<span class="string">"第3个值"</span>);</span><br><span class="line">        <span class="comment">// for循环打印List中的值</span></span><br><span class="line">        printFor(list);</span><br><span class="line">        <span class="comment">// forEach打印List中的值</span></span><br><span class="line">        printForEach(list);</span><br><span class="line">        <span class="comment">// forEach+Lambda打印List中的值</span></span><br><span class="line">        printForEachLambda(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h2&gt;&lt;p&gt;for循环语句是代码中常用的循环代码，相对于其他的循环语句更为简单，一般代码结构如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.gengruiblog.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>if判断和三目运算符</title>
    <link href="https://www.gengruiblog.cn/article/20210323.html"/>
    <id>https://www.gengruiblog.cn/article/20210323.html</id>
    <published>2021-03-22T16:00:00.000Z</published>
    <updated>2021-03-23T06:11:21.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>if条件语句是代码中常用的判断条件的代码，相对于其他的条件判断语句更为简单，一般代码结构如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (判别式) &#123;</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果判别式结果为真，会执行代码块1，若为假执行代码块2</p><p>以取两数中最大值为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getMaxIf</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"if 返回最大值"</span> + getMaxIf(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>还有一种比if条件语句更为简单的语句就是三目运算符</p><p>但只有if语句中代码块只有一行语句时我们会使用三目运算符来代替if语句</p><p>其代码结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判别式 ? 代码块<span class="number">1</span> : 代码块<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>如果判别式结果为真，会执行代码块1，若为假执行代码块2</p><p>以取两数中最大值为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> GengRui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/3/23 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getMaxTernary</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"三目运算符 返回最大值"</span> + getMaxTernary(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if判断和三目运算符对比"><a href="#if判断和三目运算符对比" class="headerlink" title="if判断和三目运算符对比"></a>if判断和三目运算符对比</h2><p><img src="https://gengrui01.github.io/picture/ternary-operator/1.png" alt=""></p><p>比较发现三目表达式要简洁得多</p><p>但如果判断后要执行的代码块偏复杂还是用if判断比较好</p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * if 返回最大值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getMaxIf</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三目运算符 返回最大值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getMaxTernary</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"if 返回最大值"</span> + getMaxIf(a, b));</span><br><span class="line">        System.out.println(<span class="string">"三目运算符 返回最大值"</span> + getMaxTernary(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;if判断&quot;&gt;&lt;a href=&quot;#if判断&quot; class=&quot;headerlink&quot; title=&quot;if判断&quot;&gt;&lt;/a&gt;if判断&lt;/h2&gt;&lt;p&gt;if条件语句是代码中常用的判断条件的代码，相对于其他的条件判断语句更为简单，一般代码结构如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.gengruiblog.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC请求映射注解</title>
    <link href="https://www.gengruiblog.cn/article/20210320.html"/>
    <id>https://www.gengruiblog.cn/article/20210320.html</id>
    <published>2021-03-19T16:00:00.000Z</published>
    <updated>2021-03-31T11:06:32.788Z</updated>
    
    <content type="html"><![CDATA[<p>Spring MVC 提供了以下这些请求映射注解：</p><a id="more"></a><table><thead><tr><th>请求映射注解</th><th>说明</th><th>类/方法</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>通用的请求处理</td><td>类</td></tr><tr><td>@GetMapping</td><td>处理 HTTP GET 请求</td><td>查询方法</td></tr><tr><td>@PostMapping</td><td>处理 HTTP POST 请求</td><td>新增修改方法</td></tr><tr><td>@PutMapping</td><td>处理 HTTP PUT 请求</td><td>新增修改方法</td></tr><tr><td>@PatchMapping</td><td>处理 HTTP PATCH 请求</td><td>新增修改方法</td></tr><tr><td>@DeleteMapping</td><td>处理 HTTP DELETE 请求</td><td>删除方法</td></tr></tbody></table><p>除了 @RequestMapping ，其它类型的注解本质上是 @RequestMapping 的简写形式</p><p>比如 @GetMapping 其实可以写为<code>@RequestMapping( method = RequestMethod.GET)</code></p><p>建议在类级别上只使用 @RequestMapping ，用于指定基本路径</p><p>而在每个方法上根据方法功能不同使用更具体的请求映射注解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring MVC 提供了以下这些请求映射注解：&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="https://www.gengruiblog.cn/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC工程搭建</title>
    <link href="https://www.gengruiblog.cn/article/20210319.html"/>
    <id>https://www.gengruiblog.cn/article/20210319.html</id>
    <published>2021-03-18T16:00:00.000Z</published>
    <updated>2021-04-13T08:08:52.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li><p><a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a></p></li><li><p><a href="https://gengrui01.github.io/article/20210301.html" target="_blank" rel="noopener">IDEA配置Maven</a></p></li></ol><p>我们新建Maven项目名为“springmvc-demo“，设置好Maven版本、配置文件以及Maven仓库</p><a id="more"></a><p>由于SpringMVC在 <a href="https://gengrui01.github.io/article/20210224.html" target="_blank" rel="noopener">MVC设计模式</a> 中是作为控制器负责前后端代码的连接，我们首先需要添加WEB文件夹用来存放前端代码</p><h2 id="添加web"><a href="#添加web" class="headerlink" title="添加web"></a>添加web</h2><p>右键我们的项目名 -&gt; 选择“Add Framework Support”</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/2.png" alt=""></p><ol><li>选择WebApplication</li><li>核实版本号</li><li>核实是否会自动创建web.xml</li></ol><p>添加好后会出现如下文件夹</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/3.png" alt=""></p><h2 id="搭建配置SpringMVC"><a href="#搭建配置SpringMVC" class="headerlink" title="搭建配置SpringMVC"></a>搭建配置SpringMVC</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>spring-webmvc：基于Spring功能之上添加的Web框架</li><li>javax.servlet-api：提供编写servlet时要用到的HttpServletRequest和HttpServletResponse对象</li><li>junit：单元测试框架</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新maven等待自动下载</p><p>libraries中有了所有导入的包表示依赖引入完成</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/1.png" alt=""></p><h3 id="配置静态资源导出"><a href="#配置静态资源导出" class="headerlink" title="配置静态资源导出"></a>配置静态资源导出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring核心配置文件"><a href="#Spring核心配置文件" class="headerlink" title="Spring核心配置文件"></a>Spring核心配置文件</h3><p>SpringMVC是Spring体系的一部分，我们需要添加Spring框架的核心配置文件</p><p>文件路径为<code>\src\main\resources</code>文件名为<code>applicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加SpringMVC配置内容"><a href="#添加SpringMVC配置内容" class="headerlink" title="添加SpringMVC配置内容"></a>添加SpringMVC配置内容</h3><p>我们直接在Spring的配置文件中配置MVC即可</p><ol><li>加载注解驱动</li></ol><p>在spring中一般采用 <a href="https://gengrui01.github.io/article/20210320.html" target="_blank" rel="noopener">SpringMVC请求映射注解</a> 来完成映射关系</p><p>要想使请求映射注解生效必须注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter实例</p><p>annotation-driven配置就是帮助我们自动完成上述两个实例的注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1加载注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>静态资源过滤</li></ol><p>目的是让SpringMVC不处理静态资源 例如：.css .js .html .mp3 ……</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2静态资源过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>视图解析器</li></ol><p>确定视图文件位置，自动给视图文件添加前后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写代码测试"><a href="#编写代码测试" class="headerlink" title="编写代码测试"></a>编写代码测试</h2><h3 id="编写Controller层"><a href="#编写Controller层" class="headerlink" title="编写Controller层"></a>编写Controller层</h3><p>controller包下新建HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Model 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"HELLO MY FIRST SPRING MVC PROJECT"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回的字符串就是视图的名字 会被视图解析器处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Spring容器自动扫描包"><a href="#配置Spring容器自动扫描包" class="headerlink" title="配置Spring容器自动扫描包"></a>配置Spring容器自动扫描包</h3><p>将Controller对象放进Spring容器</p><p>Spring核心配置文件：applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写jsp"><a href="#编写jsp" class="headerlink" title="编写jsp"></a>编写jsp</h3><p>WEB-INF包下新建jsp包，jsp包下新建hello.jsp文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="编写web-xml"><a href="#编写web-xml" class="headerlink" title="编写web.xml"></a>编写web.xml</h3><ol><li>配置前端控制器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置初始化参数</li></ol><p>在服务器启动时 加载spring的核心配置文件applicationContext.xml</p><p>配置初始化参数的代码写在前端控制器内</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置启动级别</li></ol><p>设置启动级别的代码也写在前端控制器内，数字越小启动越早</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置启动级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>设置SpringMVC拦截请求</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置SpringMVC拦截请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用url-pattern中的内容来标识请求拦截：</p><ul><li>/ 匹配所有的请求；（不包括.jsp）</li><li>/* 匹配所有的请求；（包括.jsp）</li><li>为空时所有请求都会被SpringMVC拦截</li></ul><ol start="5"><li>配置中文乱码过滤器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  乱码过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行web项目"><a href="#运行web项目" class="headerlink" title="运行web项目"></a>运行web项目</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>file -&gt; Project Structure 打开项目构建管理框</p><p>首先删除默认打好的包</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/4.png" alt=""></p><p>添加WAR包</p><p>点击 + 号 -&gt; Web Application:Exploded -&gt; From Modules…</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/5.png" alt=""></p><p>会弹出如下框依次点击“OK”即可</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/6.png" alt=""></p><h3 id="配置TomCat"><a href="#配置TomCat" class="headerlink" title="配置TomCat"></a>配置TomCat</h3><p>点击 Add Configuration… 进入运行配置框</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/7.png" alt=""></p><p>点击 + 号 -&gt; Tomcat Server -&gt; Local</p><p>点击 Configure 选择我们自己的TomCat</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/8.png" alt=""></p><p>点击 Deployment -&gt; + 号 -&gt; Artifact</p><p>会自动加入我们刚才打好的包</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/9.png" alt=""></p><p>Application context 改成<code>/</code>是为了方便在浏览器输入路径</p><p>如果你写的是<code>/test</code>，那么在浏览器访问首页的时候需要输入的就是：<code>http://localhost:8080/test</code></p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/10.png" alt=""></p><h3 id="运行TomCat"><a href="#运行TomCat" class="headerlink" title="运行TomCat"></a>运行TomCat</h3><p>点击绿色的小三角运行TomCat，出现如下内容表示运行成功</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/11.png" alt=""></p><p>在浏览器输入 <code>http://localhost:8080/hello</code> 可以看到页面打印出了我们设置好的值</p><p><img src="https://gengrui01.github.io/picture/springmvc-construction/12.png" alt=""></p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/springmvc-demo" target="_blank" rel="noopener">GengRui01/springmvc-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210228.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用IDEA创建Maven工程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210301.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA配置Maven&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们新建Maven项目名为“springmvc-demo“，设置好Maven版本、配置文件以及Maven仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="https://www.gengruiblog.cn/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis操作数据库</title>
    <link href="https://www.gengruiblog.cn/article/20210314.html"/>
    <id>https://www.gengruiblog.cn/article/20210314.html</id>
    <published>2021-03-13T16:00:00.000Z</published>
    <updated>2021-04-02T00:22:27.695Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://gengrui01.github.io/article/20210309.html" target="_blank" rel="noopener">MyBatis工程搭建</a> 中我们主要讲解的是 MyBatis 如何连接数据库，具体执行 SQL 语句使用的是 JDBC 方式</p><p>在<a href="https://gengrui01.github.io/article/20210313.html" target="_blank" rel="noopener">MyBatis实现Mapper配置并查询数据</a> 中我们主要讲解的是如何使用MyBatis完成查询数据的操作</p><p>相比较查询而言，增加修改删除数据会简单一些，本章节我们会一起学习如何操作数据库</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a></p><p><a href="https://gengrui01.github.io/article/20210301.html" target="_blank" rel="noopener">IDEA配置Maven</a></p><p>我们新建Maven项目名为“mybatis-operate-database“，设置好Maven版本、配置文件以及Maven仓库</p><h2 id="准备数据源"><a href="#准备数据源" class="headerlink" title="准备数据源"></a>准备数据源</h2><p>因为MyBatis是一个持久层框架，所以我们在使用之前需要执行如下SQL语句准备好数据源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">use</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建account表Proxy Pattern</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    score <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, age, score) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'peter'</span>, <span class="number">18</span>, <span class="number">100</span>), (<span class="number">2</span>,<span class="string">'pedro'</span>, <span class="number">24</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'jerry'</span>, <span class="number">28</span>, <span class="number">500</span>), (<span class="number">4</span>,<span class="string">'mike'</span>, <span class="number">12</span>, <span class="number">300</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'tom'</span>, <span class="number">27</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="select单条数据"><a href="#select单条数据" class="headerlink" title="select单条数据"></a>select单条数据</h2><p>要想使用MyBatis首先需要导入MySQL驱动包、MyBatis框架基础包并且添加MyBatis核心配置文件</p><p>首先复习下上个章节的内容</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>在entity包下创建User实体类：User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">    <span class="comment">// 省略toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dao包下创建User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户id查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>mybatis-config.xml</code>配置文件中添加上对应的mapper配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"dao.UserDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resources文件夹下新建<code>dao</code>包，并在其下新建User模块Dao层配置文件：UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"entity.User"</span>&gt;</span></span><br><span class="line">        SELEspring-aopCT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"Duplicates"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        InputStream configuration = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        <span class="comment">// 得到 SqlSessionFactory 核心类</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">        <span class="comment">// 开始一个 sql 会话</span></span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 得到 Dao</span></span><br><span class="line">        UserDao dao = session.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 调用通过用户id查询用户信息的方法</span></span><br><span class="line">        User user = dao.selectUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 关闭会话</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/1.png" alt=""></p><p>表示dao已经通过注解的方式搭建好了Java方法和SQL语句之间的桥梁，并且查询出了所需要的一条数据</p><h2 id="select多条数据"><a href="#select多条数据" class="headerlink" title="select多条数据"></a>select多条数据</h2><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>但是在实际使用时我们常常需要一次性查询多条数据，例如：<code>SELECT * FROM user</code></p><p>User模块Dao层配置文件：UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserList"</span> <span class="attr">resultType</span>=<span class="string">"entity.User"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时要用到List集合装对象来完成多条数据的查询工作，User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用查询所有用户信息的方法</span></span><br><span class="line">List&lt;User&gt; userList = dao.selectUserList();</span><br><span class="line">userList.forEach(u -&gt; System.out.println(u));</span><br></pre></td></tr></table></figure><ul><li><strong><em>TIPS:</em></strong> 对于<code>userList.forEach(u -&gt; System.out.println(u));</code>不理解的需要复习一下<a href="https://gengrui01.github.io/article/20210330.html" target="_blank" rel="noopener">for forEach 循环及Lambda表达式使用</a></li></ul><h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/2.png" alt=""></p><p>表示dao已经查询出了所有用户信息存到了List里</p><h2 id="insert数据"><a href="#insert数据" class="headerlink" title="insert数据"></a>insert数据</h2><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>User模块Dao层配置文件：UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"entity.User"</span>&gt;</span></span><br><span class="line">    INSERT INTO user VALUES (#&#123;id&#125;,#&#123;username&#125;,#&#123;age&#125;,#&#123;score&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用查询所有用户信息的方法</span></span><br><span class="line">List&lt;User&gt; userListBefore = dao.selectUserList();</span><br><span class="line">userListBefore.forEach(u -&gt; System.out.println(u));</span><br><span class="line"><span class="comment">// 创建一个要新增的对象并赋值</span></span><br><span class="line">User insertUser = <span class="keyword">new</span> User();</span><br><span class="line">insertUser.setId(<span class="number">6</span>);</span><br><span class="line">insertUser.setUsername(<span class="string">"anne"</span>);</span><br><span class="line">insertUser.setAge(<span class="number">18</span>);</span><br><span class="line">insertUser.setScore(<span class="number">600</span>);</span><br><span class="line"><span class="comment">// 调用新增用户信息的方法</span></span><br><span class="line"><span class="keyword">int</span> count = dao.insertUser(insertUser);</span><br><span class="line"><span class="comment">// 调用查询所有用户信息的方法</span></span><br><span class="line">List&lt;User&gt; userListAfter = dao.selectUserList();</span><br><span class="line">userListAfter.forEach(u -&gt; System.out.println(u));</span><br></pre></td></tr></table></figure><h3 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/3.png" alt=""></p><p>新增前后表中数据多了一条表示新增成功</p><p>查看数据库发现并没有新增成功</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/4.png" alt=""></p><p>因为MyBatis把事务抽象到了TransactionManager中，而事务默认开启，所以我们只需要使用sqlSession.commit()和rollback()方法，因为在sqlSession中，实际上调用的是transactionManager来完成的具体的事务提交和回滚操作</p><p>我们在测试类代码最后加上session的提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交session</span></span><br><span class="line">session.commit();</span><br></pre></td></tr></table></figure><p>执行后刷新数据库发现新增了一条id为6的用户信息</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/5.png" alt=""></p><h2 id="update数据"><a href="#update数据" class="headerlink" title="update数据"></a>update数据</h2><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>User模块Dao层配置文件：UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserById"</span> <span class="attr">parameterType</span>=<span class="string">"entity.User"</span>&gt;</span></span><br><span class="line">    UPDATE user SET</span><br><span class="line">    age = #&#123;age&#125;,</span><br><span class="line">    username = #&#123;username&#125;,</span><br><span class="line">    score = #&#123;score&#125;</span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用通过用户id查询用户信息的方法</span></span><br><span class="line">User userBefore = dao.selectUserById(<span class="number">6</span>);</span><br><span class="line">System.out.println(userBefore);</span><br><span class="line"><span class="comment">// 把成绩改为900</span></span><br><span class="line">userBefore.setScore(<span class="number">900</span>);</span><br><span class="line"><span class="comment">// 调用修改用户信息的方法</span></span><br><span class="line">dao.updateUserById(userBefore);</span><br><span class="line"><span class="comment">// 调用通过用户id查询用户信息的方法</span></span><br><span class="line">User userAfter = dao.selectUserById(<span class="number">6</span>);</span><br><span class="line">System.out.println(userAfter);</span><br></pre></td></tr></table></figure><h3 id="执行结果-3"><a href="#执行结果-3" class="headerlink" title="执行结果"></a>执行结果</h3><p>控制台打印结果如下图所示</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/6.png" alt=""></p><p>数据库执行前后结果如下图所示</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/7.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/8.png" alt=""></p><h2 id="delete数据"><a href="#delete数据" class="headerlink" title="delete数据"></a>delete数据</h2><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>User模块Dao层配置文件：UserDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span>&gt;</span></span><br><span class="line">    DELETE FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用查询所有用户信息的方法</span></span><br><span class="line">List&lt;User&gt; userListBefore = dao.selectUserList();</span><br><span class="line">userListBefore.forEach(u -&gt; System.out.println(u));</span><br><span class="line"><span class="comment">// 调用删除用户信息的方法</span></span><br><span class="line"><span class="keyword">int</span> count = dao.deleteUserById(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 调用查询所有用户信息的方法</span></span><br><span class="line">List&lt;User&gt; userListAfter = dao.selectUserList();</span><br><span class="line">userListAfter.forEach(u -&gt; System.out.println(u));</span><br></pre></td></tr></table></figure><h3 id="执行结果-4"><a href="#执行结果-4" class="headerlink" title="执行结果"></a>执行结果</h3><p>控制台打印结果如下图所示</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/9.png" alt=""></p><p>数据库执行前后结果如下图所示</p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/10.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/mybatis-operate-database/11.png" alt=""></p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/mybatis-operate-database" target="_blank" rel="noopener">GengRui01/mybatis-operate-database</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://gengrui01.github.io/article/20210309.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis工程搭建&lt;/a&gt; 中我们主要讲解的是 MyBatis 如何连接数据库，具体执行 SQL 语句使用的是 JDBC 方式&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://gengrui01.github.io/article/20210313.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis实现Mapper配置并查询数据&lt;/a&gt; 中我们主要讲解的是如何使用MyBatis完成查询数据的操作&lt;/p&gt;
&lt;p&gt;相比较查询而言，增加修改删除数据会简单一些，本章节我们会一起学习如何操作数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.gengruiblog.cn/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis实现Mapper配置并查询数据</title>
    <link href="https://www.gengruiblog.cn/article/20210313.html"/>
    <id>https://www.gengruiblog.cn/article/20210313.html</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2021-04-01T03:31:56.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Mapper"><a href="#什么是Mapper" class="headerlink" title="什么是Mapper"></a>什么是Mapper</h2><p>在<a href="https://gengrui01.github.io/article/20210309.html" target="_blank" rel="noopener">MyBatis工程搭建</a> 中我们主要讲解的是 MyBatis 如何连接数据库，具体执行 SQL 语句使用的是 JDBC 方式</p><p>但在实际应用中是不会选择 JDBC 来执行 SQL 的，MyBatis 提供了 Mapper 作为 Java 方法和 SQL 语句之间的桥梁，来帮助我们更好地去使用 SQL</p><a id="more"></a><p>Java 接口方法与 SQL 语句以及 mapper 之间的关系如下图所示：</p><p><img src="https://gengrui01.github.io/picture/mybatis-mapper-select/3.png" alt=""></p><p>我们新建Maven项目名为“mybatis-mapper“，设置好Maven版本、配置文件以及Maven仓库</p><p>以查询User数据为例感受Mapper引入后和JDBC执行SQL有什么区别</p><h2 id="准备数据源"><a href="#准备数据源" class="headerlink" title="准备数据源"></a>准备数据源</h2><p>因为MyBatis是一个持久层框架，所以我们在使用之前需要执行如下SQL语句备好数据源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">use</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建account表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    score <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, age, score) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'peter'</span>, <span class="number">18</span>, <span class="number">100</span>), (<span class="number">2</span>,<span class="string">'pedro'</span>, <span class="number">24</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'jerry'</span>, <span class="number">28</span>, <span class="number">500</span>), (<span class="number">4</span>,<span class="string">'mike'</span>, <span class="number">12</span>, <span class="number">300</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'tom'</span>, <span class="number">27</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>我们以查询User数据为例感受Mapper引入后和JDBC执行SQL有什么区别</p><p>MyBatis 提供了注解和XML两种方式来连接Java方法和SQL语句，首先学习注解方式使用Mapper</p><h2 id="注解方式使用Mapper"><a href="#注解方式使用Mapper" class="headerlink" title="注解方式使用Mapper"></a>注解方式使用Mapper</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>要想使用MyBatis首先需要导入MySQL驱动包、MyBatis框架基础包并且添加MyBatis核心配置文件</p><p>在<code>mybatis-config.xml</code>配置文件中添加上对应的mapper配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建<code>mapper</code>包，并在其下新建<code>UserMapper.java</code>类</p><p>User模块Mapper层：UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户id查询用户名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">selectUsernameById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了方法定义后，我们再通过注解为该方法添加上对应的SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT username FROM user WHERE id = #&#123;id&#125;"</span>)</span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"Duplicates"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        InputStream configuration = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        <span class="comment">// 得到 SqlSessionFactory 核心类</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">        <span class="comment">// 开始一个 sql 会话</span></span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 得到 mapper</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 调用注解的SQL</span></span><br><span class="line">        String username = mapper.selectUsernameById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"username: "</span> + username);</span><br><span class="line">        <span class="comment">// 关闭会话</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/mybatis-mapper-select/1.png" alt=""></p><p>表示mapper已经通过注解的方式搭建好了Java方法和SQL语句之间的桥梁，并且查询出了所需要的数据</p><h2 id="XML方式使用Mapper"><a href="#XML方式使用Mapper" class="headerlink" title="XML方式使用Mapper"></a>XML方式使用Mapper</h2><p>XML方式是更加强大的一种使用方式，虽然它没有注解那么方便，但是功能更强、更易维护，是 MyBatis 官方推荐的一种方式</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>因为我们在<code>mybatis-config.xml</code>配置文件中已经添加过了mapper配置，所以说不需要在配置文件中添加额外的配置</p><p>在 UserMapper 接口中，我们再新增一个方法selectUserAgeById，该方法的作用是通过用户id查询用户年龄</p><p>User模块Mapper层：UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户id查询用户年龄</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户年龄</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Integer <span class="title">selectUserAgeById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>这次使用XML的方式添加SQL语句，首先在资源文件夹下新建<code>mapper</code>包，并在其下新建名为<code>UserMapper</code>的XML文件</p><p>User模块Mapper层配置文件：UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>namespace命名空间是每一个mapper的唯一标识，也是XML文件和Java接口类连接的标识</p><p>有了XML文件后，我们使用<code>&lt;select&gt;&lt;/select&gt;</code>标签给查询年龄的方法添加上对应的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserAgeById"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    SELECT age FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>select 标签中有两个必填属性：</p><ol><li>id：对应接口的方法名，即 selectUserAgeById，通过它 MyBatis 才能将二者对应起来</li><li>resultType：对应 SQL 语句的返回类型，与接口方法的返回值相同，有时会用到resultMap</li></ol><p>测试类添加代码调用XML的SQL</p><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用XML的SQL</span></span><br><span class="line">Integer age = mapper.selectUserAgeById(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"age: "</span> + age);</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/mybatis-mapper-select/2.png" alt=""></p><p>表示mapper已经通过XML的方式搭建好了Java方法和SQL语句之间的桥梁，并且查询出了所需要的数据</p><h2 id="select-resultType"><a href="#select-resultType" class="headerlink" title="select-resultType"></a>select-resultType</h2><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>在<code>UserMapper.xml</code>文件中，我们新增 selectUserById 标签，该 select 标签的作用是：通过id查询用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的内容返回的是所有字段值，我们需要自己创建实体类来存储查出来的值</p><p>在entity包下创建User实体类：User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">    <span class="comment">// 省略toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>UserMapper.xml</code>文件中<code>selectUserById</code>标签的返回类型改为上面创建的实体类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultType="entity.User"</span><br></pre></td></tr></table></figure><p>User模块Mapper层：UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户id查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用通过用户id查询用户信息的方法</span></span><br><span class="line">User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h3 id="测试结果-2"><a href="#测试结果-2" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://gengrui01.github.io/picture/mybatis-mapper-select/4.png" alt=""></p><p>在上面这段select标签中，SQL语句返回的是一个复杂对象，即resultType上指定的 User</p><h2 id="select-resultMap"><a href="#select-resultMap" class="headerlink" title="select-resultMap"></a>select-resultMap</h2><p>MyBatis自动帮助我们映射数据库数据和Java对象，其实这是MyBatis在幕后帮我们创建了resultMap对象，我们也可手动定义</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块Mapper层配置文件：UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"entity.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"score"</span> <span class="attr">column</span>=<span class="string">"score"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上<resultMap></resultMap>标签中有<id></id>和<result></result>两个子标签</p><p>其中<id></id>标签是主键，其它字段均使用 result 标签来映射</p><p><result></result>标签有property和column两个属性</p><p>其中 property 是 Java 对象中的属性名称，column 是数据表与之对应的字段名称</p><p>把<code>UserMapper.xml</code>文件中<code>selectUserById</code>标签的返回类型改为上面创建的resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultMap="userMap"</span><br></pre></td></tr></table></figure><h3 id="测试结果-3"><a href="#测试结果-3" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://gengrui01.github.io/picture/mybatis-mapper-select/4.png" alt=""></p><p>测试结果和修改前一样，说明MyBatis确实自动帮助我们做了数据映射，但是对于复杂的对象，比如字段名和属性名不同的情况下，我们就必须自定义resultMap了</p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/mybatis-mapper" target="_blank" rel="noopener">GengRui01/mybatis-mapper</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Mapper&quot;&gt;&lt;a href=&quot;#什么是Mapper&quot; class=&quot;headerlink&quot; title=&quot;什么是Mapper&quot;&gt;&lt;/a&gt;什么是Mapper&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://gengrui01.github.io/article/20210309.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis工程搭建&lt;/a&gt; 中我们主要讲解的是 MyBatis 如何连接数据库，具体执行 SQL 语句使用的是 JDBC 方式&lt;/p&gt;
&lt;p&gt;但在实际应用中是不会选择 JDBC 来执行 SQL 的，MyBatis 提供了 Mapper 作为 Java 方法和 SQL 语句之间的桥梁，来帮助我们更好地去使用 SQL&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.gengruiblog.cn/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis工程搭建</title>
    <link href="https://www.gengruiblog.cn/article/20210309.html"/>
    <id>https://www.gengruiblog.cn/article/20210309.html</id>
    <published>2021-03-08T16:00:00.000Z</published>
    <updated>2021-04-01T03:31:56.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a></p><p><a href="https://gengrui01.github.io/article/20210301.html" target="_blank" rel="noopener">IDEA配置Maven</a></p><p>我们新建Maven项目名为“mybatis-demo“，设置好Maven版本、配置文件以及Maven仓库</p><a id="more"></a><h2 id="准备数据源"><a href="#准备数据源" class="headerlink" title="准备数据源"></a>准备数据源</h2><p>因为MyBatis是一个持久层框架，所以我们在配置及使用之前需要执行如下SQL语句先准备好数据源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mybatis_demo数据库</span></span><br><span class="line"><span class="keyword">use</span> mybatis_demo;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建account表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    score <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>, username, age, score) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'peter'</span>, <span class="number">18</span>, <span class="number">100</span>), (<span class="number">2</span>,<span class="string">'pedro'</span>, <span class="number">24</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'jerry'</span>, <span class="number">28</span>, <span class="number">500</span>), (<span class="number">4</span>,<span class="string">'mike'</span>, <span class="number">12</span>, <span class="number">300</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'tom'</span>, <span class="number">27</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="JDBC连接及操作数据库"><a href="#JDBC连接及操作数据库" class="headerlink" title="JDBC连接及操作数据库"></a>JDBC连接及操作数据库</h2><h3 id="引入MySQL驱动包"><a href="#引入MySQL驱动包" class="headerlink" title="引入MySQL驱动包"></a>引入MySQL驱动包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新maven等待自动下载</p><p>libraries中有了导入的包表示依赖引入完成</p><p><img src="https://gengrui01.github.io/picture/mybatis-construction/3.png" alt=""></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis_demo"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//3.获取Statement对象</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"select * from user WHERE id = ?"</span>);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//4.执行SQL语句返回结果集</span></span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//5.遍历结果集</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"username: "</span> + resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">            System.out.println(<span class="string">"age: "</span> + resultSet.getString(<span class="string">"age"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p>控制台打印结果如下图所示，表示我们已经成功连接数据库并查出了需要的值</p><p><img src="https://gengrui01.github.io/picture/mybatis-construction/4.png" alt=""></p><h3 id="步骤总结"><a href="#步骤总结" class="headerlink" title="步骤总结"></a>步骤总结</h3><ol><li>注册驱动</li><li>获取连接</li><li>获取statement对象</li><li>执行SQL语句返回结果集</li><li>遍历结果集</li><li>关闭连接释放资源</li></ol><h2 id="引入MyBatis依赖"><a href="#引入MyBatis依赖" class="headerlink" title="引入MyBatis依赖"></a>引入MyBatis依赖</h2><p>maven仓库查询网址：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">MavenRepository</a></p><ul><li>mybatis：MyBatis基础包</li><li>logback-classic：日志依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新maven等待自动下载</p><p>libraries中有了所有导入的包表示依赖引入完成</p><p><img src="https://gengrui01.github.io/picture/mybatis-construction/1.png" alt=""></p><h2 id="编程式配置方法"><a href="#编程式配置方法" class="headerlink" title="编程式配置方法"></a>编程式配置方法</h2><p>MyBatis官方文档中并未详细的介绍如何编程式使用MyBatis，因为编程式配置方法代码有点复杂</p><p>但是大家没必要被代码吓退，因为在实际的开发中几乎没有机会去写这段代码，一般都是通过配置文件来拿到配置然后开启会话的</p><p>我们之所以讲解编程式配置方法，是因为使用配置文件配置时屏蔽了太多的细节</p><p>为了层层递进的介绍MyBatis的基础用法，使大家熟悉MyBatis整体结构，我们需要讲解编程式配置方法</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>删除JDBC连接及操作数据库：JDBCDemo.java</p><p>新建编程式配置文件：StartNoXml.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"SqlResolve"</span>, <span class="string">"SqlNoDataSourceInspection"</span>, <span class="string">"Duplicates"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartNoXml</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 准备jdbc事务类</span></span><br><span class="line">        JdbcTransactionFactory jdbcTransactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">        <span class="comment">// 配置数据源</span></span><br><span class="line">        PooledDataSource dataSource = <span class="keyword">new</span> PooledDataSource(</span><br><span class="line">                <span class="string">"com.mysql.cj.jdbc.Driver"</span>,</span><br><span class="line">                <span class="string">"jdbc:mysql://localhost:3306/mybatis_demo?useSSL=false"</span>,</span><br><span class="line">                <span class="string">"root"</span>,</span><br><span class="line">                <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 配置环境，向环境中指定环境id、事务和数据源</span></span><br><span class="line">        Environment environment = <span class="keyword">new</span> Environment.Builder(<span class="string">"development"</span>)</span><br><span class="line">                .transactionFactory(jdbcTransactionFactory)</span><br><span class="line">                .dataSource(dataSource).build();</span><br><span class="line">        <span class="comment">// 新建 MyBatis 配置类</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">        <span class="comment">// 得到 SqlSessionFactory 核心类</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">        <span class="comment">// 开始一个 sql 会话</span></span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 得到 sql 连接并运行 sql 语句</span></span><br><span class="line">        PreparedStatement preStatement = session</span><br><span class="line">                .getConnection()</span><br><span class="line">                .prepareStatement(<span class="string">"SELECT * FROM user WHERE id = ?"</span>);</span><br><span class="line">        preStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        ResultSet result = preStatement.executeQuery();</span><br><span class="line">        <span class="comment">// 验证结果</span></span><br><span class="line">        <span class="keyword">while</span> (result.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"username: "</span> + result.getString(<span class="string">"username"</span>));</span><br><span class="line">            System.out.println(<span class="string">"age: "</span> + result.getString(<span class="string">"age"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭会话</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><p>控制台打印结果如下图所示，表示我们已经成功连接数据库并查出了需要的值</p><p><img src="https://gengrui01.github.io/picture/mybatis-construction/2.png" alt=""></p><h3 id="步骤总结-1"><a href="#步骤总结-1" class="headerlink" title="步骤总结"></a>步骤总结</h3><ol><li><p>得到 MyBatis 配置信息，即代码中的Configuration类</p><ul><li>JdbcTransactionFactory 表示事务工厂，当 MyBatis 需要新建事务的时候，会通过它来新建</li><li>PooledDataSource 表示数据源，通过其构造参数，我们传入了数据库 url，数据库用户和密码等配置</li><li>Configuration 负责 MyBatis 架构中的配置部分，可以有多个 Environment</li><li>每个 Environment 都必须有唯一的 id，即代码中的 <code>development</code></li></ul></li><li><p>通过 Configuration 来创建 SqlSessionFactory</p><p> MyBatis 是通过会话的方式来执行 SQL 的，因为我们必须拥有一个会话创建器，即会话工厂</p></li><li><p>新建 SqlSession 来执行 SQL</p><p> 有了 SqlSessionFactory 后，我们就可以方便地新建会话，并通过会话来执行 SQL 了</p></li></ol><p>而PreparedStatement及以下的内容，其实并不属于 MyBatis，它们是 JDBC 提供的，在实际的 MyBatis 开发中，你也不会这样去执行 SQL，在这里我们只是为了测试是否配置成功，并且展示 MyBatis 和 JDBC 的关系。</p><h3 id="缺点分析"><a href="#缺点分析" class="headerlink" title="缺点分析"></a>缺点分析</h3><p>可以看到，编程式使用 MyBatis 其实是比较复杂，需要开发人员十分熟悉 MyBatis 的 API，所以绝大多数资料都推荐配置的方式使用 MyBatis</p><h2 id="配置文件配置MyBatis"><a href="#配置文件配置MyBatis" class="headerlink" title="配置文件配置MyBatis"></a>配置文件配置MyBatis</h2><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>在resources文件夹下新建配置文件：mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_demo?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了上面编程式 API 的使用经验，那么你一定可以轻松的看懂配置项：</p><ul><li>configuration 标签对应 Configuration 类</li><li>environment 标签对应 Environment 类</li><li>transactionManager 标签对应 JdbcTransactionFactory 类</li><li>dataSource 标签对应 PooledDataSource 类</li></ul><p>启动类：StartWithXml.java</p><ol><li>修改类名为StartWithXml</li><li>读取配置文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream configuration = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br></pre></td></tr></table></figure><h3 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h3><p>控制台打印结果如下图所示，表示我们已经成功连接数据库并查出了需要的值</p><p><img src="https://gengrui01.github.io/picture/mybatis-construction/2.png" alt=""></p><h3 id="步骤总结-2"><a href="#步骤总结-2" class="headerlink" title="步骤总结"></a>步骤总结</h3><ol><li>读取配置文件，即 mybatis-config.xml</li><li>通过配置文件来创建 SqlSessionFactory</li><li>新建 SqlSession 来执行 SQL</li></ol><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/mybatis-demo" target="_blank" rel="noopener">GengRui01/mybatis-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210228.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用IDEA创建Maven工程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210301.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA配置Maven&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们新建Maven项目名为“mybatis-demo“，设置好Maven版本、配置文件以及Maven仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.gengruiblog.cn/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://www.gengruiblog.cn/article/20210306.html"/>
    <id>https://www.gengruiblog.cn/article/20210306.html</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-24T05:45:28.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>这里提到了动态代理的概念，首先解释一下代理模式，代理模式是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用</p><p>通俗来说就是委托人将整栋楼的空房间委托给代理商管理，代理商在不改变房屋架构的基础上二次装修，打造为青年公寓出租给有租房需求的客户</p><p>空房间就是原代码，二次装修就是给源代码统一添加功能，租房动作就是对源代码的引用</p><h2 id="代理模式的意义"><a href="#代理模式的意义" class="headerlink" title="代理模式的意义"></a>代理模式的意义</h2><ul><li>中间隔离作用：在一些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起媒介作用，其特征是代理类和委托类实现相同的接口</li><li>增加功能：给代理类增加额外的功能可以用来扩展委托类的功能，这样做只需要修改代理类而不需要再修改委托类</li></ul><h3 id="委托类和代理类的功能"><a href="#委托类和代理类的功能" class="headerlink" title="委托类和代理类的功能"></a>委托类和代理类的功能</h3><ul><li>委托类实现真正的业务功能</li><li>代理类<ul><li>负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等</li><li>代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务</li><li>例如将项目加入缓存、日志这些功能就可以使用代理类来完成，没必要打开已经封装好的委托类</li></ul></li></ul><h2 id="静态代理-amp-动态代理"><a href="#静态代理-amp-动态代理" class="headerlink" title="静态代理 &amp; 动态代理"></a>静态代理 &amp; 动态代理</h2><p>代理模式可以分为静态代理和动态代理：</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理是由程序员创建或特定工具自动生成源代码，在程序运行之前，代理类就已经编译生成了.class文件。</p><p>静态代理的优点是可以在符合开闭原则的情况下对目标对象进行功能扩展，缺点则是开发人员需要为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在程序运行时通过反射机制动态创建的，随用随加载。动态代理常用的有基于接口和基于子类两种方式</p><p>基于接口的动态代理指的是由JDK官方提供的Proxy类，要求被代理类最少实现一个接口，这种方式大大减少了开发人员的开发任务，减少了对业务接口的依赖，降低了耦合度，缺点就是注定有一个共同的父类叫Proxy，Java的继承机制注定了这些动态代理类们无法实现对class的动态代理，原因是多继承在Java中本质上就行不通</p><p>基于子类的动态代理指的是由第三方提供的CGLib，CGLib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以要求被代理类不能用final修饰，即不能是最终类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是代理模式&quot;&gt;&lt;a href=&quot;#什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式&quot;&gt;&lt;/a&gt;什么是代理模式&lt;/h2&gt;&lt;p&gt;这里提到了动态代理的概念，首先解释一下代理模式，代理模式是给某一个对象提供一个代理对象，并由代理对象
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.gengruiblog.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringAOP</title>
    <link href="https://www.gengruiblog.cn/article/20210305.html"/>
    <id>https://www.gengruiblog.cn/article/20210305.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-04-03T02:51:54.196Z</updated>
    
    <content type="html"><![CDATA[<p>Spring的核心特性就是IOC和AOP，之前整理了SpringIOC，这篇文章就来写一下SpringAOP（Aspect Oriented Programming），即：面向切面编程</p><p>面向切面编程是指通过预编译和运行期动态代理的方式实现在不修改源代码的情况下给程序动态统一添加功能的一种技术</p><a id="more"></a><p>在学习SpringAOP之前我们需要了解什么是<a href="https://www.gengruiblog.cn/article/20210306.html">代理模式</a></p><p>文中提到的基于接口的JDK动态代理与基于子类的CGLib动态代理两种动态代理的方式都是实现SpringAOP的基础</p><p>在spring中，虽然引入了AspectJ的语法，但是他本质上使用的是动态代理的方式，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式</p><p>如果目标对象有接口，优先使用JDK 动态代理，如果目标对象没有接口，则使用CGLib动态代理</p><h2 id="简单转账功能"><a href="#简单转账功能" class="headerlink" title="简单转账功能"></a>简单转账功能</h2><p>我们新建Maven项目名为“spring-aop“，设置好Maven版本、配置文件以及Maven仓库</p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除spring_aop数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> spring_aop;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建spring_aop数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> spring_aop;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用spring_aop数据库</span></span><br><span class="line"><span class="keyword">use</span> spring_aop;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建account表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    accountNum <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">    money <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span> (accountNum, money) <span class="keyword">values</span></span><br><span class="line">(<span class="string">"622200001"</span>,<span class="number">1000</span>),(<span class="string">"622200002"</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><ol><li><p>导入Spring基础包</p></li><li><p>导入操作数据库、连接数据库、测试需要的包</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul><li>配置自动扫包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"services"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"utils"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置数据源</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接数据库的必备信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/spring_aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>数据库连接工具类：ConnectionUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ComboPooledDataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得当前线程绑定的连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getThreadConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 看线程是否绑了连接</span></span><br><span class="line">            Connection conn = tl.get();</span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 从数据源获取一个连接</span></span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                <span class="comment">// 和线程局部变量  绑定</span></span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回线程连接</span></span><br><span class="line">            <span class="keyword">return</span> tl.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把连接和当前线程进行解绑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块实体类：Account.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String accountNum;</span><br><span class="line">    <span class="keyword">private</span> Integer money;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块Dao层：AccountDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据编号查询账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果没有结果就返回null，如果结果集超过一个就抛异常，如果有唯一的一个结果就返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByNum</span><span class="params">(String accountNum)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块Dao层实现类：AccountDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据库查询工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line">    <span class="comment">// 数据库连接工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(connectionUtils.getThreadConnection(),</span><br><span class="line">                    <span class="string">"update account set accountNum=?,money=? where id=?"</span>,</span><br><span class="line">                    account.getAccountNum(), account.getMoney(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据编号查询账户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果没有结果就返回null，如果结果集超过一个就抛异常，如果有唯一的一个结果就返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByNum</span><span class="params">(String accountNum)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            accounts = runner.query(connectionUtils.getThreadConnection(),</span><br><span class="line">                    <span class="string">"select * from account where accountNum = ? "</span>,</span><br><span class="line">                    <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">accountNum</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (accounts == <span class="keyword">null</span> || accounts.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有结果就返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (accounts.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果结果集超过一个就抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，数据有问题"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果有唯一的一个结果就返回</span></span><br><span class="line">            <span class="keyword">return</span> accounts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块Service层：AccountService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money         转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Integer money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块Service层实现类：AccountServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money         转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Integer money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询原始账户</span></span><br><span class="line">        Account source = accountDao.findAccountByNum(sourceAccount);</span><br><span class="line">        <span class="comment">// 查询目标账户</span></span><br><span class="line">        Account target = accountDao.findAccountByNum(targetAccount);</span><br><span class="line">        <span class="comment">// 原始账号减钱</span></span><br><span class="line">        source.setMoney(source.getMoney() - money);</span><br><span class="line">        <span class="comment">// 目标账号加钱</span></span><br><span class="line">        target.setMoney(target.getMoney() + money);</span><br><span class="line">        <span class="comment">// 更新原始账号</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="comment">// 更新目标账号</span></span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">        System.out.println(<span class="string">"转账完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Account模块测试类：AccountTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"622200001"</span>, <span class="string">"622200002"</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>控制台打印结果</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/1.png" alt=""></p><ul><li>修改前数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/2.png" alt=""></p><ul><li>修改后数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/3.png" alt=""></p><p>可以看到：两个账号的数据已经发生了改变，证明转账的动作确实已经完成</p><h3 id="缺点分析"><a href="#缺点分析" class="headerlink" title="缺点分析"></a>缺点分析</h3><p>在业务层的代码加入一行异常代码 如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-aop/4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 造异常</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>异常代码加在了出账账户金额修改之后，入账账户金额修改之前</p><p>执行报ArithmeticException错，如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-aop/5.png" alt=""></p><p>查看数据库中数据发现出账账户money的列值由原来的900变成了800，说明存款确实减少了100</p><p>但是由于在代码执行的过程中，出现了异常，导致入账账户并没有增加100</p><p><img src="https://gengrui01.github.io/picture/spring-aop/6.png" alt=""></p><p>这就出现了数据的事务问题，破坏了数据的原子性和一致性</p><h2 id="引入代理模式解决事务"><a href="#引入代理模式解决事务" class="headerlink" title="引入代理模式解决事务"></a>引入代理模式解决事务</h2><h3 id="实现思路介绍"><a href="#实现思路介绍" class="headerlink" title="实现思路介绍"></a>实现思路介绍</h3><ol><li>创建一个工具类，目的是用于管理数据库的事务，提供事务的开启，提交，回滚等操作；</li><li>创建一个代理处理器类，目的是生成转账实现类的代理对象，对转账的业务方法提供增强，主要是在数据操作之前，和操作之后干点事，嘿嘿嘿；</li><li>在 Spring 的配置文件中，通过 xml 文件的标签实例化管理事务的工具类和生成代理对象的处理器类。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>事务管理器：TransactionManager.java</p><p>此工具类主要作用是对数据库连接实现事务的开启，提交以及回滚</p><p>至于何时开启、提交、回滚事务，根据业务场景需要调用该类的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据库连接工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"回滚事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"释放连接"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        connectionUtils.removeConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务代理工具类：TransactionProxyUtils</p><p>此类的核心代码是getAccountService方法，该方法返回代理业务类示例</p><p>在代理对象的invoke方法内部，实现对原始被代理对象的增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProxyUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的业务类接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">//提供事务管理的工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取AccountService代理对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (AccountService) Proxy.newProxyInstance(</span><br><span class="line">                accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 添加事务的支持</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy     被代理的对象实例本身</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method    被代理对象正在执行的方法对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args      正在访问的方法参数对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 执行操作前开启事务</span></span><br><span class="line">                            transactionManager.beginTransaction();</span><br><span class="line">                            <span class="comment">// 执行操作</span></span><br><span class="line">                            rtValue = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">// 执行操作后提交事务</span></span><br><span class="line">                            transactionManager.commit();</span><br><span class="line">                            <span class="comment">// 返回结果</span></span><br><span class="line">                            <span class="keyword">return</span> rtValue;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="comment">// 捕捉到异常执行回滚操作</span></span><br><span class="line">                            transactionManager.rollback();</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 最终释放连接</span></span><br><span class="line">                            transactionManager.release();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心配置文件：applicationContext.xml</p><ol><li>添加事务管理bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"transaction"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置代理Service</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置代理的service--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionProxyAccountService"</span> <span class="attr">factory-bean</span>=<span class="string">"transactionProxyUtils"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Account模块测试类：AccountTest.java</p><p>将原本引入的AccountService实例改为AccountService的事务代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"transactionProxyAccountService"</span>)</span><br></pre></td></tr></table></figure><h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><p>首先将数据库中两账户余额都改为1000</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><ul><li>控制台打印结果</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/7.png" alt=""></p><p>可以看到：在转账前后由开启、提交事务，最后有释放连接</p><p>表示事务代理已经对在不改变源代码的基础上对其做了增强</p><ul><li>修改前数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/8.png" alt=""></p><ul><li>修改后数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/9.png" alt=""></p><p>可以看到：两个账号的数据已经发生了改变，证明转账的动作确实已经完成</p><p>再次在出账账户金额修改之后，入账账户金额修改之前添加异常代码，如下图所示</p><p><img src="https://gengrui01.github.io/picture/spring-aop/4.png" alt=""></p><p>可以看到：在捕捉到异常后进行了事务的回滚</p><p><img src="https://gengrui01.github.io/picture/spring-aop/10.png" alt=""></p><p>查看数据库中数据发现并没有改变</p><p><img src="https://gengrui01.github.io/picture/spring-aop/11.png" alt=""></p><p>说明引入代理模式解决了事务问题，保证了数据的原子性和一致性</p><h3 id="缺点分析-1"><a href="#缺点分析-1" class="headerlink" title="缺点分析"></a>缺点分析</h3><ol><li>自定义代理模式代码编写过于臃肿</li><li>侵入性比较强，代码不够优雅</li><li>控制事务的实现过于繁琐</li></ol><h2 id="引入AOP-XML"><a href="#引入AOP-XML" class="headerlink" title="引入AOP(XML)"></a>引入AOP(XML)</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>使用Spring的AOP替代代理类。先回顾下AOP的概念</p><p>AOP是一种编程设计模式，是一种编程技术，使用AOP后通过修改配置即可实现增加或者去除某些附加功能</p><p>学习AOP中的常用术语：</p><ul><li>Join point（连接点）</li></ul><p>所谓连接点是指那些可以被拦截到的点</p><p>在Spring中这些点指的是方法，可以看作正在访问的，或者等待访问的那些需要被增强功能的方法</p><p>Spring只支持方法类型的连接点</p><ul><li>Pointcut（切入点）</li></ul><p>切入点是一个规则，定义了我们要对哪些Joinpoint进行拦截</p><p>因为在一个程序中会存在很多的类，每个类又存在很多的方法，Pointcut来标记哪些方法会应用AOP对该方法做功能增强</p><ul><li>Advice（通知）</li></ul><p>所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。也就是对方法做的增强功能。通知分为如下几类：</p><p>前置通知：在连接点之前运行的通知类型，它不会阻止流程进行到连接点，只是在到达连接点之前运行该通知内的行为</p><p>后置通知：在连接点正常完成后要运行的通知，正常的连接点逻辑执行完，会运行该通知</p><p>最终通知：无论连接点执行后的结果如何，正常还是异常，都会执行的通知</p><p>异常通知：如果连接点执行因抛出异常而退出，则执行此通知</p><p>环绕通知：环绕通知可以在方法调用之前和之后执行自定义行为</p><ul><li>Target（目标）</li></ul><p>Target指的是代理的目标对象，更通俗的解释就是：AOP对连接点方法做增强，底层是代理模式生成连接点所在类的代理对象，那么连接点所在的类，就是被代理的类称呼为Target</p><ul><li>Aspect（切面）</li></ul><p>切面本质是一个类，只不过是个功能类，作为整合AOP的切入点和通知。</p><p>一般来讲，需要在Spring的配置文件中配置，或者通过注解来配置</p><ul><li>Weaving（织入）</li></ul><p>织入是一种动作的描述，在程序运行时将增强的功能代码也就是通知，根据通知的类型（前缀后缀等…）放到对应的位置，生成代理对象</p><ul><li>Proxy（代理）</li></ul><p>一个类被AOP织入增强后，产生的结果就是代理类</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>在执行原始业务类前对方法增强也就是SpringAOP中所谓的前置通知，对原始业务类中的方法执行之后的增强行为就是后置通知</p><p>而一旦出现异常，那么所做的动作就是异常通知。本案例使用几种通知，来实现事务的控制。</p><ol><li><p>删除事务代理工具类：TransactionProxyUtils.java</p></li><li><p>导入aspectjweaver包</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件中添加 AOP 的相关配置</li></ol><ul><li>在配置文件中添加aop的基础配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:aop="http://www.springframework.org/schema/aop"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.springframework.org/schema/aop</span><br><span class="line">https://www.springframework.org/schema/aop/spring-aop.xsd</span><br></pre></td></tr></table></figure><ul><li>在配置文件中配置aop节点</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aop相关的节点配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点  表示哪些类的哪些方法在执行的时候会应用Spring配置的通知进行增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution ( * services.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面类的节点  作用主要就是整合通知和切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"commit"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"release"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"rollback"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改测试类代码</li></ol><p><img src="https://gengrui01.github.io/picture/spring-aop/12.png" alt=""></p><h3 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>控制台打印结果</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/13.png" alt=""></p><p>可以看到：在转账前后由开启、提交事务，最后有释放连接</p><p>表示SpringAOP已经在不改变源代码的基础上对其做了增强</p><ul><li>修改前数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/14.png" alt=""></p><ul><li>修改后数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/15.png" alt=""></p><p>可以看到：两个账号的数据已经发生了改变，证明转账的动作确实已经完成</p><p>再次在出账账户金额修改之后，入账账户金额修改之前添加异常代码，如下图所示</p><p><img src="https://gengrui01.github.io/picture/spring-aop/16.png" alt=""></p><p>可以看到：在捕捉到异常后进行了事务的回滚</p><p><img src="https://gengrui01.github.io/picture/spring-aop/17.png" alt=""></p><p>查看数据库中数据发现并没有改变</p><p><img src="https://gengrui01.github.io/picture/spring-aop/18.png" alt=""></p><p>说明SpringAOP配置的事务管理同样也解决了事务问题，保证了数据的原子性和一致性</p><p>通过在xml文件中配置SpringAOP相关配置，就可以实现对我们业务类中的方法实现了增强，无需自定义对业务类做代理实现</p><h2 id="XML改注解-AOP"><a href="#XML改注解-AOP" class="headerlink" title="XML改注解(AOP)"></a>XML改注解(AOP)</h2><h3 id="使用注解介绍"><a href="#使用注解介绍" class="headerlink" title="使用注解介绍"></a>使用注解介绍</h3><ul><li>@Aspect</li></ul><p>此注解用于表明某个类为切面类，而切面类的作用我们之前也解释过，用于整合切入点和通知</p><ul><li>@Pointcut</li></ul><p>此注解用于声明一个切入点，表明哪些类的哪些方法需要被增强</p><ul><li>@Before 前置通知</li></ul><p>在连接点之前运行的通知类型，它不会阻止流程进行到连接点，只是在到达连接点之前运行该通知内的行为</p><ul><li>@AfterReturning 后置通知</li></ul><p>在连接点正常完成后要运行的通知，正常的连接点逻辑执行完，会运行该通知</p><ul><li>@After 最终通知</li></ul><p>无论连接点执行后的结果如何，正常还是异常，都会执行的通知</p><ul><li>@AfterThrowing 异常通知</li></ul><p>如果连接点执行因抛出异常而退出，则执行此通知</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li>删除XML中的AOPXML配置并注解代理模式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解  开启代理模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注释事务管理器类：TransactionManager.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据库连接工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* services.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transactionPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"transactionPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"transactionPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"transactionPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"回滚事务"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"transactionPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"释放连接"</span>);</span><br><span class="line">            connectionUtils.getThreadConnection().close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        connectionUtils.removeConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果-3"><a href="#执行结果-3" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>控制台打印结果</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/19.png" alt=""></p><p>可以看到：在转账前后由开启、提交事务，最后有释放连接</p><p>表示SpringAOP已经在不改变源代码的基础上对其做了增强</p><ul><li>修改前数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/20.png" alt=""></p><ul><li>修改后数据库中值</li></ul><p><img src="https://gengrui01.github.io/picture/spring-aop/21.png" alt=""></p><p>可以看到：两个账号的数据已经发生了改变，证明转账的动作确实已经完成</p><p>再次在出账账户金额修改之后，入账账户金额修改之前添加异常代码，如下图所示</p><p><img src="https://gengrui01.github.io/picture/spring-aop/22.png" alt=""></p><p>可以看到：在捕捉到异常后进行了事务的回滚</p><p><img src="https://gengrui01.github.io/picture/spring-aop/23.png" alt=""></p><p>查看数据库中数据发现并没有改变</p><p><img src="https://gengrui01.github.io/picture/spring-aop/24.png" alt=""></p><p>说明SpringAOP注释的事务管理类同样也解决了事务问题，保证了数据的原子性和一致性</p><p>通过注解完成SpringAOP相关配置，就可以实现对我们业务类中的方法实现了增强</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SpringAOP的作用就是把程序中重复的代码抽取出来，在需要执行的时候，使用动态代理技术，在不修改源码的基础上，对已有方法进行增强</p><p>优势就是减少了重复代码，提高代码复用性，提高开发效率，使得代码的维护更加方便</p><p>在开发时通常将日志记录，数据库连接池的管理，系统统一的认证、权限管理等用面向切面的方式开发</p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/spring-aop" target="_blank" rel="noopener">GengRui01/spring-aop</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring的核心特性就是IOC和AOP，之前整理了SpringIOC，这篇文章就来写一下SpringAOP（Aspect Oriented Programming），即：面向切面编程&lt;/p&gt;
&lt;p&gt;面向切面编程是指通过预编译和运行期动态代理的方式实现在不修改源代码的情况下给程序动态统一添加功能的一种技术&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.gengruiblog.cn/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>项目常用后端代码结构</title>
    <link href="https://www.gengruiblog.cn/article/20210304.html"/>
    <id>https://www.gengruiblog.cn/article/20210304.html</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-31T11:15:44.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用后端代码结构"><a href="#常用后端代码结构" class="headerlink" title="常用后端代码结构"></a>常用后端代码结构</h2><p>项目常用后端代码结构也就是Controller+Service+Dao，如下图所示：</p><a id="more"></a><p><img src="https://gengrui01.github.io/picture/back-end-code-structure/1.png" alt=""></p><p>接下来主要讲这三层的功能划分</p><ul><li>Controller层（流程控制层）主要负责具体的业务模块流程的控制</li><li>Service层（业务逻辑层）主要负责业务模块的逻辑应用设计</li><li>DAO层（数据操作层）主要负责与数据库进行联络的一些任务</li></ul><p>总结这三者，通过例子来解释：</p><ul><li>Controller像是服务员，顾客点什么菜，菜上给几号桌，都是他的职责</li><li>Service是厨师，菜单上的菜全是他做的</li><li>Dao是厨房的小工，和原材料打交道的事情全是他管</li></ul><p>为了方便后端与前端、后端与数据库的数据传输引入了一些定义类，如entity、vo、dto、po、jo等，常用的就是entity和vo</p><p><img src="https://gengrui01.github.io/picture/back-end-code-structure/2.png" alt=""></p><ul><li>vo为视图类，传递和接收前端的数据，与前端所需字段一一对应</li><li>entity为实体类，与数据库表一一对应</li></ul><h2 id="方法调用流程"><a href="#方法调用流程" class="headerlink" title="方法调用流程"></a>方法调用流程</h2><p>以查询操作为例数据流动方向如下图所示：</p><p><img src="https://gengrui01.github.io/picture/back-end-code-structure/3.png" alt=""></p><ol><li>Dao层去数据库查询基础数据，查到的基础数据用entity实体类存储</li><li>Service层调用Dao层方法拿取基础数据加工处理，加工好的数据用vo视图类存储</li><li>Controller层调用Service层方法拿取数据给前端</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用后端代码结构&quot;&gt;&lt;a href=&quot;#常用后端代码结构&quot; class=&quot;headerlink&quot; title=&quot;常用后端代码结构&quot;&gt;&lt;/a&gt;常用后端代码结构&lt;/h2&gt;&lt;p&gt;项目常用后端代码结构也就是Controller+Service+Dao，如下图所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://www.gengruiblog.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring IOC &amp; DI</title>
    <link href="https://www.gengruiblog.cn/article/20210303.html"/>
    <id>https://www.gengruiblog.cn/article/20210303.html</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-23T05:55:27.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是IOC-amp-DI"><a href="#什么是IOC-amp-DI" class="headerlink" title="什么是IOC &amp; DI"></a>什么是IOC &amp; DI</h2><p>IOC（Inversion of Control 控制反转）是面向对象编程中的一种设计模式</p><p>其最常见的方式叫做DI（Dependency Injection 依赖注入）</p><a id="more"></a><p>通过控制反转，将实例化对象的控制权，由手动的new变成了Spring框架通过反射机制实例化</p><p>需要使用的时候，依赖通过配置文件以及注解的方式注入到对象中</p><p><a href="https://gengrui01.github.io/article/20210304.html" target="_blank" rel="noopener">项目常用后端代码结构</a> 如下图所示：</p><p><img src="https://gengrui01.github.io/picture/back-end-code-structure/2.png" alt=""></p><p>我们新建Maven项目名为“spring-ioc“，设置好Maven版本、配置文件以及Maven仓库</p><p>以查询User数据为例对比IOC的引入前后程序耦合性</p><h2 id="引入IOC之前"><a href="#引入IOC之前" class="headerlink" title="引入IOC之前"></a>引入IOC之前</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块实体类：User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块视图类：UserVo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String genderName;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserVo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = user.getId();</span><br><span class="line">        <span class="keyword">this</span>.name = user.getName();</span><br><span class="line">        <span class="keyword">this</span>.gender = user.getGender();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Dao层：UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getEntity</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Dao层实现类：UserDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getEntity</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此处应该从数据库查询值 方便起见直接返回一个固定对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"Anne"</span>);</span><br><span class="line">        user.setGender(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Service层：UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserVo <span class="title">getVo</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Service层实现类：UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手动实例化Dao</span></span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        <span class="comment">// 执行Dao层方法</span></span><br><span class="line">        User user = userDao.getEntity(id);</span><br><span class="line">        <span class="comment">// 省略业务逻辑处理。。。</span></span><br><span class="line">        UserVo userVo = <span class="keyword">new</span> UserVo(user);</span><br><span class="line">        userVo.setGenderName(userVo.getGender() == <span class="number">0</span> ? <span class="string">"female"</span> : <span class="string">"male"</span>);</span><br><span class="line">        <span class="keyword">return</span> userVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><em>TIPS:</em></strong> 对于<code>userVo.getGender() == 0 ? &quot;female&quot; : &quot;male&quot;</code>不理解的需要复习一下<a href="https://gengrui01.github.io/article/20210323.html" target="_blank" rel="noopener">if判断和三目运算符</a></li></ul><p>User模块Controller层：UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手动实例化Service</span></span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 执行Service层方法并返回</span></span><br><span class="line">        <span class="keyword">return</span> userService.getVo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手动实例化Controller</span></span><br><span class="line">        UserController userController = <span class="keyword">new</span> UserController();</span><br><span class="line">        <span class="comment">// 执行Controller层方法</span></span><br><span class="line">        UserVo userVo = userController.getVo(<span class="number">1</span>);</span><br><span class="line">        System.out.println(userVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/1.png" alt=""></p><p>表示Dao层数据已经一层层传到Controller层并展示了出来</p><h3 id="缺点分析"><a href="#缺点分析" class="headerlink" title="缺点分析"></a>缺点分析</h3><p>1.代码耦合性太强 不利于程序的测试<br>2. 代码也不利于扩展</p><h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><p>Spring的IOC完美的解决了这一点</p><p>对象的实例化由Spring框架加载实现，放到Spring容器中管理，避免了我们手动new对象</p><p>有需要用到对象实例依赖，直接向Spring容器要，让他注入即可</p><p>而一旦涉及到对象的实例修改，那么只需更改Spring加载实例化对象的地方，程序代码无需改动</p><p>从而降低耦合，提升扩展性</p><h2 id="引入IOC-XML"><a href="#引入IOC-XML" class="headerlink" title="引入IOC(XML)"></a>引入IOC(XML)</h2><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>要想使用SpringIOC首先需要导入Spring框架基础包并且添加Spring核心配置文件</p><p>将依赖交给Spring的beanFactory管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"services.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"controller.UserController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>User模块测试类：UserTest.java</p><ol><li>读取配置文件刷新Spring容器</li><li>Controller由手动实例化改为从Spring容器拿取</li><li>把ApplicationContext传到Controller层继续使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件刷新Spring容器</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 从Spring容器拿Controller</span></span><br><span class="line">        UserController userController = (UserController) context.getBean(<span class="string">"userController"</span>);</span><br><span class="line">        <span class="comment">// 执行Controller层方法，因为之后还需要用到context对象，故下传</span></span><br><span class="line">        UserVo userVo = userController.getVo(<span class="number">1</span>, context);</span><br><span class="line">        System.out.println(userVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Controller层：UserController.java</p><ol><li>Service由手动实例化改为从Spring容器拿取</li><li>把ApplicationContext传到Service层继续使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id, ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从Spring容器拿Service</span></span><br><span class="line">        userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        <span class="comment">// 执行Service层方法，因为之后还需要用到context对象，故下传</span></span><br><span class="line">        <span class="keyword">return</span> userService.getVo(id, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Service层实现类：UserServiceImpl.java</p><p>Dao由手动实例化改为从Spring容器拿取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id, ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从Spring容器拿Dao</span></span><br><span class="line">        userDao = (UserDao) context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        <span class="comment">// 执行Dao层方法</span></span><br><span class="line">        User user = userDao.getEntity(id);</span><br><span class="line">        <span class="comment">// 省略业务逻辑处理。。。</span></span><br><span class="line">        UserVo userVo = <span class="keyword">new</span> UserVo(user);</span><br><span class="line">        userVo.setGenderName(userVo.getGender() == <span class="number">0</span> ? <span class="string">"female"</span> : <span class="string">"male"</span>);</span><br><span class="line">        <span class="keyword">return</span> userVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/1.png" alt=""></p><p>表示已经将所有的依赖由手动实例化改为从Spring容器拿取</p><h3 id="缺点分析-1"><a href="#缺点分析-1" class="headerlink" title="缺点分析"></a>缺点分析</h3><p>因为每一个类的实例化都需要一个bean标签，一个大型工程有很多类，配置文件的内容未免过于臃肿，维护成本高</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>使用注解形式实现SpringIOC</p><h2 id="XML改注解-IOC"><a href="#XML改注解-IOC" class="headerlink" title="XML改注解(IOC)"></a>XML改注解(IOC)</h2><h3 id="核心配置文件修改"><a href="#核心配置文件修改" class="headerlink" title="核心配置文件修改"></a>核心配置文件修改</h3><p>context-component-scan标签Spring框架自定义的xml标签，通过base-package属性指明需要被自动扫描实例化的类所在位置</p><p>如下代码所示，我们在dao、services、controller下的类是需要扫描自动注入容器的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"services"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改好后运行项目发现<code>context.getBean()</code>代码报错</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/2.png" alt=""></p><p>说明不是在base-package下的所有类都会自动注入到容器，而是要搭配注解使用</p><h3 id="常用注解介绍"><a href="#常用注解介绍" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h3><ul><li>@Component：一般用于通用组件类上使用的注解</li><li>@Service：一般用于业务逻辑层上使用的注解</li><li>@Controller：一般用于流程控制层上使用的注解</li><li>@Repository：一般用于数据持久层上使用的注解</li></ul><p>依次添加注解，添加之后运行再次报错找不到bean</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/3.png" alt=""></p><p>其实我们在添加注解后，Spring会默认给每个bean设置id，值为类名首字母改为小写</p><p>这次报错原因就是找不到名为”userService“的bean</p><p>解决办法就是在注解时设置bean的id，保证可以找到bean</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/4.png" alt=""></p><h3 id="测试结果-2"><a href="#测试结果-2" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/1.png" alt=""></p><p>表示已经使用注解方式将对象放入Spring容器中</p><h2 id="引入DI"><a href="#引入DI" class="headerlink" title="引入DI"></a>引入DI</h2><p>上面所有的内容都是将对象放入Spring容器中</p><p>那么放入之后的使用呢，目前都是使用ApplicationContext拿取容器中的对象</p><p>接下来讲解如何使用注解实现依赖注入</p><h3 id="常用注解介绍-1"><a href="#常用注解介绍-1" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h3><p>@Autowired注解自动按照类型注入</p><p>会从容器中寻找符合依赖类型的实例，但是也有缺点：</p><p>因为时按照类型匹配，如果找不到匹配的实例也会抛出异常</p><p>如果容器中有多个匹配的类型也会抛出异常，需要指定引入的实例id</p><p>@Qualifier注解作用是在按照类型注入的基础之上，再按照Bean的id注入。所以如果是使用了@Autowire注解自动注入，但是容器中却有多个匹配的实例，可以搭配此注解，指定需要注入的实例id</p><p>@Resource注解作用是指定依赖按照id注入，还是按照类型注入。当只使用注解但是不指定注入方式的时候，默认按照id注入，找不到再按照类型注入。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>User模块Controller层：UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 改为自动注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id, ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行Service层方法，因为之后还需要用到context对象，故下传</span></span><br><span class="line">        <span class="keyword">return</span> userService.getVo(id, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Dao层实现类：UserDaoImpl.java</p><p>去除指定bean id，改为默认bean id（userDaoImpl）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为默认bean id“userDaoImpl”</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getEntity</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此处应该从数据库查询值 方便起见直接返回一个固定对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"Anne"</span>);</span><br><span class="line">        user.setGender(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User模块Service层实现类：UserServiceImpl.java</p><p>改为自动注入并指定需要注入的实例id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 改为自动注入并指定需要注入的实例id</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDaoImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">getVo</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行Dao层方法</span></span><br><span class="line">        User user = userDao.getEntity(id);</span><br><span class="line">        <span class="comment">// 省略业务逻辑处理。。。</span></span><br><span class="line">        UserVo userVo = <span class="keyword">new</span> UserVo(user);</span><br><span class="line">        userVo.setGenderName(userVo.getGender() == <span class="number">0</span> ? <span class="string">"female"</span> : <span class="string">"male"</span>);</span><br><span class="line">        <span class="keyword">return</span> userVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果-3"><a href="#测试结果-3" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下图所示：</p><p><img src="https://gengrui01.github.io/picture/spring-ioc-di/1.png" alt=""></p><p>表示</p><ol><li>@Autowired注解已将UserService依赖自动注入UserController</li><li>@Qualifier注解已指定UserDao依赖的bean id，并使用@Autowired注解自动注入UserServiceImpl</li></ol><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/spring-ioc" target="_blank" rel="noopener">GengRui01/spring-ioc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是IOC-amp-DI&quot;&gt;&lt;a href=&quot;#什么是IOC-amp-DI&quot; class=&quot;headerlink&quot; title=&quot;什么是IOC &amp;amp; DI&quot;&gt;&lt;/a&gt;什么是IOC &amp;amp; DI&lt;/h2&gt;&lt;p&gt;IOC（Inversion of Control 控制反转）是面向对象编程中的一种设计模式&lt;/p&gt;
&lt;p&gt;其最常见的方式叫做DI（Dependency Injection 依赖注入）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.gengruiblog.cn/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring工程搭建</title>
    <link href="https://www.gengruiblog.cn/article/20210302.html"/>
    <id>https://www.gengruiblog.cn/article/20210302.html</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-31T03:19:34.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li><p><a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a></p></li><li><p><a href="https://gengrui01.github.io/article/20210301.html" target="_blank" rel="noopener">IDEA配置Maven</a></p></li></ol><p>我们新建Maven项目名为“spring-demo“，设置好Maven版本、配置文件以及Maven仓库</p><a id="more"></a><h2 id="搭建配置Spring"><a href="#搭建配置Spring" class="headerlink" title="搭建配置Spring"></a>搭建配置Spring</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>maven仓库查询网址：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">MavenRepository</a></p><p>spring基础包：</p><ul><li>spring-core：Core模块主要包含Spring框架基本的核心工具类，Spring的其他组件要都要使用到这个包里的类，Core模块是其他组件的基本核心</li><li>spring-beans：包含访问配置文件、创建和管理bean以及进行IOC/DI操作相关的所有类</li><li>spring-context：Spring的上下文即IOC容器，通过上下文可以获得容器中的Bean</li><li>spring-expression：EL表达式语言用于在运行时查询和操纵对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-expression --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新maven等待自动下载</p><p>libraries中有了所有导入的包表示依赖引入完成</p><p><img src="https://gengrui01.github.io/picture/spring-construction/1.png" alt=""></p><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><p>框架是一个半成品，已经封装好了很多功能提供我们使用，而我们如何让他们工作呢？</p><p>这里需要创建一个配置文件和Spirng框架通信，文件路径为<code>\src\main\resources</code>文件名为<code>applicationContext.xml</code></p><p><img src="https://gengrui01.github.io/picture/spring-construction/2.png" alt=""></p><p>官方给出的配置文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把他复制到我们的配置文件后左上角会提示“Application context not configured for this file”，点击“Configure application context”，点击OK</p><p><img src="https://gengrui01.github.io/picture/spring-construction/3.png" alt=""></p><h2 id="编写代码测试"><a href="#编写代码测试" class="headerlink" title="编写代码测试"></a>编写代码测试</h2><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><p>新建接口类</p><p><img src="https://gengrui01.github.io/picture/spring-construction/4.png" alt=""></p><p>编写接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>新建实现类</p><p><img src="https://gengrui01.github.io/picture/spring-construction/5.png" alt=""></p><p>实现接口并使用快捷键添加接口方法实现</p><p><img src="https://gengrui01.github.io/picture/spring-construction/6.png" alt=""></p><p>编写实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> services.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service的save方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充配置文件"><a href="#补充配置文件" class="headerlink" title="补充配置文件"></a>补充配置文件</h3><p>将我们自定义的实现类交给Spring的容器管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此标签的作用是利用反射机制将UserServiceImpl类的实例交给Spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"services.impl.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>新建测试类</p><p><img src="https://gengrui01.github.io/picture/spring-construction/7.png" alt=""></p><p>编写测试类main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        UserService service = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        service.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alt+Enter键导包</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://gengrui01.github.io/picture/spring-construction/8.png" alt=""></p><p>可以看到控制台打印输出 证明确实从容器中获取到了userService实例</p><h2 id="执行过程分析"><a href="#执行过程分析" class="headerlink" title="执行过程分析"></a>执行过程分析</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>BeanFactory是基础类型的IOC容器，是管理bean容器的根接口，并提供了完整的IOC服务支持</p><p>简单来说BeanFactory就是一个管理Bean的工厂，它主要负责初始化各种Bean、调用生命周期等方法</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext被称为应用上下文，是BeanFactory接口的子接口，在其基础上提供了其他的附加功能，扩展了BeanFactory接口</p><h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h3><p>ClassPathXmlApplicationContext是ApplicationContext的实现类，也在其基础上加了许多附加功能</p><p>该类从类路径ClassPath中寻找指定的XML配置文件，找到并完成对象实例化工作</p><p>其构造器源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        String[] configLocations, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> refresh, </span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable ApplicationContext parent)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">// 加载项目中的Spring配置文件</span></span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">        <span class="comment">// 刷新容器</span></span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造器的作用：</p><ol><li>调用setConfigLocations方法加载项目中的Spring配置文件</li><li>调用refresh方法刷新容器（bean的实例化就在这个方法中）</li></ol><p>refresh方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="comment">// 准备容器刷新</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="comment">// 准备bean工厂对象</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            <span class="comment">// 加载配置文件中的所有bean标签</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">            ......</span><br><span class="line">            ......</span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            <span class="comment">// 完成此上下文的bean工厂初始化，初始化所有剩余的单例bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            <span class="comment">// 完成容器刷新</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>refresh方法的作用：</p><ol><li>准备容器刷新</li><li>准备bean工厂对象</li><li>加载配置文件中的所有bean标签</li><li>完成bean工厂实例化</li><li>完成容器刷新</li></ol><h3 id="context-getBean"><a href="#context-getBean" class="headerlink" title="context.getBean()"></a>context.getBean()</h3><p>context.getBean()方法是通过配置文件中声明的bean标签id属性获取容器内的实例</p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p><a href="https://github.com/GengRui01/spring-demo" target="_blank" rel="noopener">GengRui01/spring-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210228.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用IDEA创建Maven工程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20210301.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA配置Maven&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们新建Maven项目名为“spring-demo“，设置好Maven版本、配置文件以及Maven仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://www.gengruiblog.cn/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA配置Maven</title>
    <link href="https://www.gengruiblog.cn/article/20210301.html"/>
    <id>https://www.gengruiblog.cn/article/20210301.html</id>
    <published>2021-02-28T16:00:00.000Z</published>
    <updated>2021-03-01T07:45:23.370Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>File-Setting打开设置页</p></li><li><p>搜索maven</p></li><li><p>修改maven home directory为maven安装路径</p></li></ol><a id="more"></a><p><img src="https://gengrui01.github.io/picture/idea-configure-maven/1.png" alt=""></p><ol start="4"><li><p>勾选“Override”将setting文件位置及仓库位置改为自配置</p></li><li><p>修改setting文件位置为 <code>maven安装路径\conf\setting.xml</code></p></li><li><p>修改仓库位置为 <code>maven安装路径\repository</code></p></li></ol><p><img src="https://gengrui01.github.io/picture/idea-configure-maven/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;File-Setting打开设置页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搜索maven&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改maven home directory为maven安装路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="IDEA" scheme="https://www.gengruiblog.cn/categories/IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>使用IDEA创建Maven工程</title>
    <link href="https://www.gengruiblog.cn/article/20210228.html"/>
    <id>https://www.gengruiblog.cn/article/20210228.html</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-03-01T07:45:23.394Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打开开发工具IDEA，点击创建新项目</li></ol><a id="more"></a><p><img src="https://gengrui01.github.io/picture/idea-create-maven-project/1.png" alt=""></p><ol start="2"><li><p>核实项目所使用的JDK是否是已经安装好的JDK</p></li><li><p>选择Maven工程 点击下一步</p></li></ol><p><img src="https://gengrui01.github.io/picture/idea-create-maven-project/2.png" alt=""></p><ol start="4"><li>输入项目名<code>spring-demo</code>可以看到存储位置有自动追加<code>spring-demo</code></li></ol><p><img src="https://gengrui01.github.io/picture/idea-create-maven-project/3.png" alt=""></p><ol start="5"><li><p>将存储位置改为任意盘下</p></li><li><p>groupID一般是公司域名，我们可以使用com.自己的姓名全拼作为练习</p></li><li><p>版本默认即可 点击完成</p></li></ol><p><img src="https://gengrui01.github.io/picture/idea-create-maven-project/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;打开开发工具IDEA，点击创建新项目&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="IDEA" scheme="https://www.gengruiblog.cn/categories/IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis简介</title>
    <link href="https://www.gengruiblog.cn/article/20210227.html"/>
    <id>https://www.gengruiblog.cn/article/20210227.html</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2021-03-17T01:32:31.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射</p><p>与其它ORM框架不同，MyBatis没有将Java对象与数据表关联起来，而是作为Java方法和SQL语句的桥梁，我们一般称它为半ORM框架</p><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>方便地定制化SQL，操作数据库对象</li><li>使用简单的XML或注解来配置和映射原生类、接口和Java的POJO为数据库中的记录</li><li>提供强大的动态SQL功能，可以更加灵活地使用SQL语句</li><li>提供插件增强机制，可以轻松集成其它插件</li></ul><h2 id="Hibernate与MyBatis对比"><a href="#Hibernate与MyBatis对比" class="headerlink" title="Hibernate与MyBatis对比"></a>Hibernate与MyBatis对比</h2><p><img src="https://gengrui01.github.io/picture/mybatis-introduction/1.png" alt=""></p><ul><li>Hibernate<ul><li>全自动化ORM框架，数据库移植性好，基础业务几乎不需要写SQL</li><li>易学难精，上手简单但熟练使用需要阅读大量文档，框架结构复杂</li></ul></li><li>MyBatis<ul><li>半自动化ORM框架，数据库移植性一般，基础业务仍需写SQL，但可以通过基础Mapper来简化</li><li>易学易用，上手简单，结构精简清晰，易深入学习</li></ul></li></ul><p>对比结果：</p><ul><li>Hibernate适合在需求明确、业务固定的项目中使用，如OA、ERP项目</li><li>MyBatis适合在需求多变，快速迭代的项目中使用，如互联网的电商项目</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射&lt;/p&gt;
&lt;p&gt;与其它ORM框架不同，MyBatis没有将Java对象与数据表关联起来，而是作为Java方法和SQL语句的桥梁，我们一般称它为半ORM框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://www.gengruiblog.cn/categories/MyBatis/"/>
    
    
  </entry>
  
</feed>
