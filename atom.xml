<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gengruiblog.cn/"/>
  <updated>2021-06-09T09:32:17.679Z</updated>
  <id>https://www.gengruiblog.cn/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>企业微信群机器人发送消息</title>
    <link href="https://www.gengruiblog.cn/article/20210602.html"/>
    <id>https://www.gengruiblog.cn/article/20210602.html</id>
    <published>2021-06-01T16:00:00.000Z</published>
    <updated>2021-06-09T09:32:17.679Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章用来记录企业微信群机器人创建到发送消息的全过程，最后附有本文源码git地址，科学食用</p><a id="more"></a><h2 id="创建群机器人并获取Webhook地址"><a href="#创建群机器人并获取Webhook地址" class="headerlink" title="创建群机器人并获取Webhook地址"></a>创建群机器人并获取Webhook地址</h2><p>创建机器人的方式很简单，操作步骤及手机界面截图如下：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/1.jpg" alt=""></p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/2.jpg" alt=""></p><ol><li>（图1）点击进入需要创建群机器人的群聊</li><li>（图2）点击右上角查看群聊信息的按钮</li><li>（图3）点击 <code>群机器人</code> 选项群机器人管理页面</li><li>（图4）点击 <code>添加机器人</code> 按钮添加新机器人</li><li>（图5）设置机器人头像、昵称，点击 <code>添加</code> 按钮</li><li>（图6）点击 <code>复制</code> 按钮复制Webhook地址， <strong>这个地址在之后发送请求中会用到，一定要记得复制下来哦</strong></li><li>（图6）点击 <code>配置说明</code> 查看官方配置文档</li><li>（图7）点击右上角三个点打开分享框，点击 <code>复制链接</code> 选项， <strong>这个地址是微信官方的群机器人配置文档，在开发过程中经常会用到，一定要记得复制下来哦</strong></li><li>（图8）返回群聊界面可以看到提示，说明群聊机器人已经添加成功</li></ol><p>步骤6和步骤8中我们复制了两个连接，如下：</p><p>Webhook地址： <code>https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa</code></p><p>群机器人配置文档： <a href="https://work.weixin.qq.com/api/doc/90000/90136/91770" target="_blank" rel="noopener">https://work.weixin.qq.com/api/doc/90000/90136/91770</a></p><p><strong><em>TIPS:</em></strong></p><blockquote><p>Webhook地址的作用是开发者可以通过向这个地址发起POST请求来实现给该群组发送消息<br>每个机器人的webhook地址是不一样的，一定要保护好webhook地址避免泄漏，否则坏人就可以用你的机器人来发垃圾消息了</p></blockquote><p>如果刚才没有复制到Webhook地址，或者说再次开发时忘记Webhook地址，可以通过如下步骤查看群机器人的Webhook地址：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/3.jpg" alt=""></p><ol><li>（图1）点击 <code>群机器人</code> 选项群机器人管理页面</li><li>（图2）选择需要查看Webhook地址的机器人</li><li>（图3）找到 <code>Webhook地址</code> 长按-&gt;全选-&gt;复制</li></ol><h2 id="创建项目并引入依赖"><a href="#创建项目并引入依赖" class="headerlink" title="创建项目并引入依赖"></a>创建项目并引入依赖</h2><p>我们 <a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a> ，项目名为“wechat-robot-demo“</p><p>需要用到的依赖包及其所起作用如下：</p><ul><li>fastjson：处理JSON</li><li>httpclient：HTTP请求调用</li><li>junit：测试</li></ul><p>可以复制下面代码一次性引入这些依赖：</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理JSON --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HTTP请求调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><h3 id="消息类型枚举类"><a href="#消息类型枚举类" class="headerlink" title="消息类型枚举类"></a>消息类型枚举类</h3><p>通过配置文档可以看出我们能够使用微信机器人去发送的消息类型主要有如下五种</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/4.png" alt=""></p><p>我们在common包下定义一个消息类型枚举类（MsgtypeEnum.java）枚举出所有的消息类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MsgtypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    text(<span class="string">"text"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * markdown类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    markdown(<span class="string">"markdown"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    image(<span class="string">"image"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    news(<span class="string">"news"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    file(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    MsgtypeEnum(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息发送结果类"><a href="#消息发送结果类" class="headerlink" title="消息发送结果类"></a>消息发送结果类</h3><p>在请求webhook时会返回请求结果，里面有错误编码、错误信息等信息</p><p>我们在common包下定义一个消息发送结果类（SendResult.java）来存储我们需要的请求结果信息</p><p>重写toString()方法为JSON格式，方便我们在测试时打印请求结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否请求成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSuccess;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorCode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"errorCode"</span>, errorCode);</span><br><span class="line">        items.put(<span class="string">"errorMsg"</span>, errorMsg);</span><br><span class="line">        items.put(<span class="string">"isSuccess"</span>, isSuccess);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendResult</span><span class="params">(<span class="keyword">boolean</span> isSuccess, String errorCode, String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isSuccess = isSuccess;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息通用接口"><a href="#消息通用接口" class="headerlink" title="消息通用接口"></a>消息通用接口</h3><p>不同消息类型请求时数据格式是不同的，但相同点是它们都需要以JSON的格式发送Webhook请求</p><p>我们在message包下定义一个消息通用接口（Message.java）</p><p>并在消息通用接口里定义toJson()方法，保证所有实现消息通用接口的类都提供toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送请求类"><a href="#发送请求类" class="headerlink" title="发送请求类"></a>发送请求类</h3><p>在创建群机器人时说过我们是要通过调用群组机器人的Webhook地址发起POST请求来实现给该群组发送消息</p><p>我们在api包下定义一个消息发送结果类（WechatRobotApi.java）来完成Webhook地址的POST请求调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatRobotApi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendResult <span class="title">send</span><span class="params">(String sendUrl, Message message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断sendUrl是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(sendUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10000"</span>, <span class="string">"webhook地址不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 发送post请求</span></span><br><span class="line">            HttpResponse response = post(sendUrl, message.toJson());</span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) &#123;</span><br><span class="line">                String errorCode = <span class="string">"10"</span> + response.getStatusLine().getStatusCode();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, errorCode, <span class="string">"Http请求错误 错误编码为后三位"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String result = <span class="keyword">null</span>;</span><br><span class="line">                result = EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">                JSONObject obj = JSONObject.parseObject(result);</span><br><span class="line">                String errorCode = obj.getString(<span class="string">"errcode"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SendResult(errorCode.equals(<span class="number">0</span>), errorCode, obj.getString(<span class="string">"errmsg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10001"</span>, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10002"</span>, <span class="string">"Http请求IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpResponse <span class="title">post</span><span class="params">(String sendUrl, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpPost httppost = <span class="keyword">new</span> HttpPost(sendUrl);</span><br><span class="line">        httppost.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        StringEntity se = <span class="keyword">new</span> StringEntity(json, <span class="string">"utf-8"</span>);</span><br><span class="line">        httppost.setEntity(se);</span><br><span class="line">        HttpResponse response = HttpClients.createDefault().execute(httppost);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试Webhook配置类"><a href="#测试Webhook配置类" class="headerlink" title="测试Webhook配置类"></a>测试Webhook配置类</h3><p>因为每个机器人的webhook地址是不一样的</p><p>我们在config包下定义测试Webhook配置类（WebhookConfig.java）来配置用于测试的群机器人webhook地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebhookConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/webhook/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String send = <span class="string">"send?key="</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String upload_media = <span class="string">"upload_media?key="</span>;</span><br><span class="line">    <span class="comment">//TODO 改成自己用于测试的群机器人webhook地址中key的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String key = <span class="string">"693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息发送URL</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String send_url = url + send + key;</span><br><span class="line">    <span class="comment">// 文件上传URL（文件类型消息上传文件时需要用到的URL）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String upload_media_url = url + upload_media + key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以上已经完成了基础代码，接下来争对不同消息类型进行定制开发即可</p><p>观察不同消息类型的参数数据格式可以发现第二个参数名根据消息类型均不相同，所以最外部两个参数直接用JSON封装就好</p><p>但相同信息类型第二个参数内部的数据格式是相同的，我们可以根据第二个参数内部的数据格式进行开发</p><h2 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h2><p>文本类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/5.png" alt=""></p><h3 id="文本类型消息类"><a href="#文本类型消息类" class="headerlink" title="文本类型消息类"></a>文本类型消息类</h3><p>我们在message包下定义一个文本类型消息类（TextMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否@所有人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isAtAll;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要@的群成员手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mentionedMobileList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"msgtype"</span>, MsgtypeEnum.text.getValue());</span><br><span class="line">    </span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文本内容不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"content"</span>, text);</span><br><span class="line">        <span class="keyword">if</span> (isAtAll) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mentionedMobileList == <span class="keyword">null</span>)</span><br><span class="line">                mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            mentionedMobileList.add(<span class="string">"@all"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mentionedMobileList != <span class="keyword">null</span> &amp;&amp; !mentionedMobileList.isEmpty()) &#123;</span><br><span class="line">            textContent.put(<span class="string">"mentioned_mobile_list"</span>, mentionedMobileList);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">"text"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextMessage</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本类型消息测试类"><a href="#文本类型消息测试类" class="headerlink" title="文本类型消息测试类"></a>文本类型消息测试类</h3><p>我们在test包下定义文本类型消息测试类（TextMessageTest.java）来测试文本类型消息发送</p><ol><li>普通文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"Hello World!"</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/6.jpg" alt=""></p><ol start="2"><li>@群内成员的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特群内成员的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"你好，我是耿锐的助手"</span>);</span><br><span class="line">        List&lt;String&gt; mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        mentionedMobileList.add(<span class="string">"13026212376"</span>);</span><br><span class="line">        message.setMentionedMobileList(mentionedMobileList);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/7.jpg" alt=""></p><p><strong><em>插播一个吐槽：</em></strong></p><blockquote><p>什么鬼人啊啊啊啊啊，艾特了一下就把我机器人移除了2333333<br>师父让我打他，这人高马大的，我一女孩子哪打得过啊，默默重新添加了一个机器人<br>要注意重新添加机器人后webhook地址会变，需要修改测试Webhook配置类（WebhookConfig.java）中webhook地址</p></blockquote><ol start="3"><li>@所有人的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特所有人的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAtAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"大家好，我是耿锐的助手"</span>);</span><br><span class="line">        message.setIsAtAll(<span class="keyword">true</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/8.jpg" alt=""></p><ol start="4"><li>@群内成员并且@所有人的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特群内成员并且艾特所有人的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAtAndAtAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"大家好，通报批评就是他刚才移除了我"</span>);</span><br><span class="line">        List&lt;String&gt; mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        mentionedMobileList.add(<span class="string">"13026212376"</span>);</span><br><span class="line">        message.setMentionedMobileList(mentionedMobileList);</span><br><span class="line">        message.setIsAtAll(<span class="keyword">true</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/9.jpg" alt=""></p><h2 id="markdown类型"><a href="#markdown类型" class="headerlink" title="markdown类型"></a>markdown类型</h2><p>markdown类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/10.png" alt=""></p><h3 id="markdown类型消息类"><a href="#markdown类型消息类" class="headerlink" title="markdown类型消息类"></a>markdown类型消息类</h3><p>我们在message包下定义一个markdown类型消息类（MarkdownMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * markdown元素列表 每一行内容为一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        items.add(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"msgtype"</span>, MsgtypeEnum.markdown.getValue());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (items.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"markdown内容不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer markdownText = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (String item : items) &#123;</span><br><span class="line">            markdownText.append(item + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; markdown = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        markdown.put(<span class="string">"content"</span>, markdownText.toString());</span><br><span class="line">        result.put(<span class="string">"markdown"</span>, markdown);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown字体颜色枚举类"><a href="#markdown字体颜色枚举类" class="headerlink" title="markdown字体颜色枚举类"></a>markdown字体颜色枚举类</h3><p>我们在utils包下定义markdown字体颜色枚举类（MarkdownColorEnum.java）枚举出markdown所支持的所有字体颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MarkdownColorEnum &#123;</span><br><span class="line">    orange(<span class="string">"warning"</span>),</span><br><span class="line">    gray(<span class="string">"comment"</span>),</span><br><span class="line">    green(<span class="string">"info"</span>);</span><br><span class="line"></span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    MarkdownColorEnum(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown工具类"><a href="#markdown工具类" class="headerlink" title="markdown工具类"></a>markdown工具类</h3><p>我们在utils包下定义markdown工具类（MarkdownUtils.java）提供方法将内容转化为不同格式的markdown语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headerType 标题等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text       标题内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHeaderText</span><span class="params">(<span class="keyword">int</span> headerType, String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headerType &lt; <span class="number">1</span> || headerType &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"标题等级必须在1-6之间"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer numbers = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headerType; i++) &#123;</span><br><span class="line">            numbers.append(<span class="string">"#"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers + <span class="string">" "</span> + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加粗</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBoldText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"**"</span> + text + <span class="string">"**"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 连接标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> href 具体链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLinkText</span><span class="params">(String text, String href)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span> + text + <span class="string">"]("</span> + href + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行内代码段（暂不支持跨行）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCodeText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"`"</span> + text + <span class="string">"`"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getQuoteText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&gt;"</span> + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字体颜色（只支持3种内置颜色）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> markdownColorEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getColorText</span><span class="params">(MarkdownColorEnum markdownColorEnum, String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;font color=\""</span> + markdownColorEnum.value + <span class="string">"\"&gt;"</span> + text + <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 斜体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getItalicText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*"</span> + text + <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOrderListText</span><span class="params">(List&lt;String&gt; orderList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orderList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= orderList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sb.append(String.valueOf(i) + <span class="string">". "</span> + orderList.get(i - <span class="number">1</span>) + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(String.valueOf(orderList.size()) + <span class="string">". "</span> + orderList.get(orderList.size() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无序列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unOrderList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUnOrderListText</span><span class="params">(List&lt;String&gt; unOrderList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (unOrderList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unOrderList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"- "</span> + unOrderList.get(i) + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"- "</span> + unOrderList.get(unOrderList.size() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown类型消息测试类"><a href="#markdown类型消息测试类" class="headerlink" title="markdown类型消息测试类"></a>markdown类型消息测试类</h3><p>我们在test包下定义markdown类型消息测试类（MarkdownMessageTest.java）来测试markdown类型消息发送</p><ol><li>普通markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line">        message.add(<span class="string">"正常内容"</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/11.jpg" alt=""></p><ol start="2"><li>带有标题的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有标题的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(<span class="string">"普通MD消息"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">1</span>, <span class="string">"一级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">2</span>, <span class="string">"二级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">3</span>, <span class="string">"三级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">4</span>, <span class="string">"四级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">5</span>, <span class="string">"五级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">6</span>, <span class="string">"六级标题"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/12.jpg" alt=""></p><ol start="2"><li>带有字体颜色（只支持3种内置颜色）的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有字体颜色（只支持3种内置颜色）的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testColour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.orange, <span class="string">"橙色内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.gray, <span class="string">"灰色内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.green, <span class="string">"绿色内容"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/13.jpg" alt=""></p><ol start="3"><li>带有有序、无序列表的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有有序、无序列表的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; orderList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        orderList.add(<span class="string">"有序列表1"</span>);</span><br><span class="line">        orderList.add(<span class="string">"有序列表2"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getOrderListText(orderList));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; unOrderList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        unOrderList.add(<span class="string">"无序列表1"</span>);</span><br><span class="line">        unOrderList.add(<span class="string">"无序列表2"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getUnOrderListText(unOrderList));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/14.jpg" alt=""></p><ol start="4"><li>带有其他格式的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有其他格式的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(MarkdownUtils.getBoldText(<span class="string">"加粗内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getLinkText(<span class="string">"链接内容"</span>, <span class="string">"https://www.gengruiblog.cn/"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getCodeText(<span class="string">"代码内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getQuoteText(<span class="string">"引用内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getItalicText(<span class="string">"斜体内容"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/15.jpg" alt=""></p><h2 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h2><p>图片类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/16.png" alt=""></p><h3 id="图片类型消息类"><a href="#图片类型消息类" class="headerlink" title="图片类型消息类"></a>图片类型消息类</h3><p>我们在message包下定义一个图片类型消息类（ImageMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片内容的base64编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String base64;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片内容（base64编码前）的md5值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageMessage</span><span class="params">(String base64, String md5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base64 = base64;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.image.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(base64)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"base64编码不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"base64"</span>, base64);</span><br><span class="line">        textContent.put(<span class="string">"md5"</span>, md5);</span><br><span class="line">        items.put(<span class="string">"image"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片工具类"><a href="#图片工具类" class="headerlink" title="图片工具类"></a>图片工具类</h3><p>我们在utils包下定义图片工具类（ImageUtils.java）提供方法将本地图片和线上图片转化为图片类型消息类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地图片转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgFile 图片本地路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> yanceyzhang</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageMessage <span class="title">toMessageByLocal</span><span class="params">(String imgFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = <span class="keyword">new</span> FileInputStream(imgFile);</span><br><span class="line">            data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">            in.read(data);</span><br><span class="line">            in.close();</span><br><span class="line">            String base64 = Base64.getEncoder().encodeToString(data);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageMessage(base64, DigestUtils.md5Hex(data));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"本地图片读取IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线上图片转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgURL 图片线上路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> yanceyzhang</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageMessage <span class="title">toMessageByOnline</span><span class="params">(String imgURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream data = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="comment">// 创建URL</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(imgURL);</span><br><span class="line">            <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 创建链接</span></span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">20000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line">            InputStream is = conn.getInputStream();</span><br><span class="line">            <span class="comment">// 将内容读取内存中</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(by)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                data.write(by, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] b = data.toByteArray();</span><br><span class="line">            String base64 = Base64.getEncoder().encodeToString(b);</span><br><span class="line">            String md5 = DigestUtils.md5Hex(b);</span><br><span class="line">            is.close();</span><br><span class="line">            conn.disconnect();</span><br><span class="line">            data.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageMessage(base64, md5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"线上图片读取IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片类型消息测试类"><a href="#图片类型消息测试类" class="headerlink" title="图片类型消息测试类"></a>图片类型消息测试类</h3><p>我们在test包下定义图片类型消息测试类（ImageMessageTest.java）来测试图片类型消息发送</p><ol><li>本地图片消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地图片消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String urlLocal = <span class="string">"D:/Blog/avatar.png"</span>;</span><br><span class="line">        ImageMessage message = ImageUtils.toMessageByLocal(urlLocal);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/17.jpg" alt=""></p><ol start="2"><li>线上图片消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线上图片消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String urlOnLine = <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>;</span><br><span class="line">        ImageMessage message = ImageUtils.toMessageByOnline(urlOnLine);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/18.jpg" alt=""></p><h2 id="图文类型"><a href="#图文类型" class="headerlink" title="图文类型"></a>图文类型</h2><p>图文类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/19.png" alt=""></p><h3 id="文章类"><a href="#文章类" class="headerlink" title="文章类"></a>文章类</h3><p>由于一个图文消息支持1-8篇文章</p><p>我们先在message包下定义一个文章类（Article.java）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     * 可省略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击后跳转的链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文消息的图片链接，支持JPG、PNG格式，较好的效果为大图 1068*455，小图150*150</span></span><br><span class="line"><span class="comment">     * 可省略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String picurl;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Article</span><span class="params">(String title, String description, String url, String picurl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.picurl = picurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图文类型消息类"><a href="#图文类型消息类" class="headerlink" title="图文类型消息类"></a>图文类型消息类</h3><p>之后在message包下定义一个图文类型消息类（NewsMessage.java）里面存放文章类的List</p><p>并且实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表 一个图文消息支持1-8篇文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articles = <span class="keyword">new</span> ArrayList&lt;Article&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (articles.size() &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"每条图文消息所包含的文章数不可超过八个"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        articles.add(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.news.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; news = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (articles.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"图文消息中不可以没有文章"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        news.put(<span class="string">"articles"</span>, articles);</span><br><span class="line">        items.put(<span class="string">"news"</span>, news);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图文类型消息测试类"><a href="#图文类型消息测试类" class="headerlink" title="图文类型消息测试类"></a>图文类型消息测试类</h3><p>我们在test包下定义图片类型消息测试类（NewsMessageTest.java）来测试图片类型消息发送</p><ol><li>一条图文消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一条图文消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NewsMessage message = <span class="keyword">new</span> NewsMessage();</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"耿锐的博客"</span>, <span class="string">"欢迎的来到耿锐的技术小栈"</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/"</span>, <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>));</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/20.jpg" alt=""></p><ol start="2"><li>多条图文消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条图文消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMoreArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NewsMessage message = <span class="keyword">new</span> NewsMessage();</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述有长方形图"</span>, <span class="string">"耿锐的博客 - MVC设计模式"</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/article/20210224.html"</span>, <span class="string">"https://www.gengruiblog.cn/picture/mvc/2.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述有方形图"</span>, <span class="string">"昆大圣博客 - 迷失的人迷失了，相逢的人会再相逢"</span>,</span><br><span class="line">                <span class="string">"https://blog.ecutdl.cn/"</span>, <span class="string">"https://blog.ecutdl.cn/usr/uploads/2021/05/3275615662.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述无图"</span>, <span class="string">"昆大圣博客 - 留言板"</span>,</span><br><span class="line">                <span class="string">"https://blog.ecutdl.cn/3.html"</span>, <span class="keyword">null</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述有长方形图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.baidu.com/"</span>, <span class="string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white-d0c9fe2af5.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述有方形图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/"</span>, <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述无图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.baidu.com/"</span>, <span class="keyword">null</span>));</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/21.jpg" alt=""></p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>文件类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/22.png" alt=""></p><p>在发送文件类型消息时需要用到下图所示文件上传接口拿到media_id（三天内有效）</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/23.png" alt=""></p><h3 id="文件工具类"><a href="#文件工具类" class="headerlink" title="文件工具类"></a>文件工具类</h3><p>我们在utils包下定义文件工具类（FileUtils.java）提供方法完成文件上传拿到media_id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传得到media_id，该media_id仅三天内有效</span></span><br><span class="line"><span class="comment">     * media_id在同一企业内应用之间可以共享</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadMediaUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload</span><span class="params">(String uploadMediaUrl, String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || !file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        String result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置边界</span></span><br><span class="line">            String boundary = <span class="string">"----------"</span> + System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 获取连接并设置请求头</span></span><br><span class="line">            HttpsURLConnection conn = getConnection(uploadMediaUrl, boundary);</span><br><span class="line">            <span class="comment">// 设置请求正文信息</span></span><br><span class="line">            setFileContent(conn.getOutputStream(), file, boundary);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HttpsURLConnection.HTTP_OK != conn.getResponseCode()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Http请求错误 错误编码为"</span> + conn.getResponseCode());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取请求结果</span></span><br><span class="line">                result = getResult(conn.getInputStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"HTTP请求IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (!jsonObject.getInteger(<span class="string">"errcode"</span>).equals(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(jsonObject.getString(<span class="string">"errmsg"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject.getString(<span class="string">"media_id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接并设置请求头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * POST https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa&amp;type=file HTTP/1.1</span></span><br><span class="line"><span class="comment">     * Content-Type: multipart/form-data; boundary=-------------------------acebdf13572468</span></span><br><span class="line"><span class="comment">     * Content-Length: 220</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadMediaUrl 地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundary       边界值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpsURLConnection <span class="title">getConnection</span><span class="params">(String uploadMediaUrl, String boundary)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(uploadMediaUrl);</span><br><span class="line">        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line">        conn.setRequestMethod(<span class="string">"POST"</span>);<span class="comment">// 以POST方式提交表单</span></span><br><span class="line">        conn.setUseCaches(<span class="keyword">false</span>);<span class="comment">// POST方式不能使用缓存</span></span><br><span class="line">        conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">        conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置请求头信息</span></span><br><span class="line">        conn.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"multipart/form-data; boundary="</span> + boundary);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Length"</span>, <span class="string">"220"</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求正文信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ---------------------------acebdf13572468</span></span><br><span class="line"><span class="comment">     * Content-Disposition: form-data; name="media";filename="wework.txt"; filelength=6</span></span><br><span class="line"><span class="comment">     * Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * mytext</span></span><br><span class="line"><span class="comment">     * ---------------------------acebdf13572468--</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundary</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFileContent</span><span class="params">(OutputStream outputStream, File file, String boundary)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 头部内容</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"--"</span>);<span class="comment">// 必须多两条道</span></span><br><span class="line">        sb.append(boundary);</span><br><span class="line">        sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">        sb.append(<span class="string">"Content-Disposition: form-data;name=\"media\"; filename=\""</span> + file.getName() + <span class="string">"\"\r\n"</span>);</span><br><span class="line">        sb.append(<span class="string">"Content-Type:application/octet-stream\r\n\r\n"</span>);</span><br><span class="line">        outputStream.write(sb.toString().getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">// 正文部分 把文件以流的方式读取后推送道URL中</span></span><br><span class="line">        DataInputStream din = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        <span class="keyword">int</span> bytes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((bytes = din.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        din.close();</span><br><span class="line">        <span class="comment">// 尾部内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] foot = (<span class="string">"\r\n--"</span> + boundary + <span class="string">"--\r\n"</span>).getBytes(<span class="string">"UTF-8"</span>);<span class="comment">// 定义数据最后分割线</span></span><br><span class="line">        outputStream.write(foot);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getResult</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuffer strbuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String lineString;</span><br><span class="line">        <span class="keyword">while</span> ((lineString = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            strbuffer.append(lineString);</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> strbuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件类型消息类"><a href="#文件类型消息类" class="headerlink" title="文件类型消息类"></a>文件类型消息类</h3><p>我们在message包下定义一个图片类型消息类（FileMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件上传接口获取的文件id 三天内有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String media_id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileMessage</span><span class="params">(String media_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.media_id = media_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.file.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(media_id)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"通过文件上传接口获取的文件id不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"media_id"</span>, media_id);</span><br><span class="line">        items.put(<span class="string">"file"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件类型消息测试类"><a href="#文件类型消息测试类" class="headerlink" title="文件类型消息测试类"></a>文件类型消息测试类</h3><p>我们在test包下定义文件类型消息测试类（FileMessageTest.java）来测试文件类型消息发送</p><ol><li>普通文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通文件消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Work/需求调研汇总.xlsx"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/24.jpg" alt=""></p><ol start="2"><li>音频文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 音频文件消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/KuGou/汪苏泷 - 有点甜.mp3"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/25.jpg" alt=""></p><ol start="3"><li>视频文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频文件消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Video/明月千古情.mp4"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/26.jpg" alt=""></p><ol start="4"><li>图片文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 图片文件消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPicture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Blog/avatar.png"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/27.jpg" alt=""></p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p>如上已经完成了企业微信群机器人所提供的所有类型消息发送</p><p><a href="https://github.com/GengRui01/wechat-robot-demo" target="_blank" rel="noopener">GengRui01/wechat-robot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章用来记录企业微信群机器人创建到发送消息的全过程，最后附有本文源码git地址，科学食用&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://www.gengruiblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数参数</title>
    <link href="https://www.gengruiblog.cn/article/20210527.html"/>
    <id>https://www.gengruiblog.cn/article/20210527.html</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-06-09T11:17:44.401Z</updated>
    
    <content type="html"><![CDATA[<p>函数参数是需要传递给函数内部的数据，在 <a href="https://gengrui01.github.io/article/20210526.html" target="_blank" rel="noopener">Python函数的定义及调用</a> 中我们已经简单接触了函数的参数</p><p>函数参数可以是任意的数据类型，只要函数内部逻辑可以处理即可</p><a id="more"></a><h2 id="参数类型校验"><a href="#参数类型校验" class="headerlink" title="参数类型校验"></a>参数类型校验</h2><p>但有时候由于函数的实现关系，需要特定数据类型的参数</p><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><p>就比如前面实现的求绝对值的函数 <code>myAbs()</code> ，我们在调用时传递一个字符串，就会引起错误</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line">absB = myAbs(<span class="string">"err"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/1.png" alt=""></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了保证函数的正常运行，我们需要对函数入参的数据类型进行校验</p><p>Python提供了 <code>isinstance()</code> 函数，可以判断参数数据类型</p><p>它接收两个参数，第一个是需要判断的参数，第二个是数据类型</p><p>如果参数是指定数据类型的就返回True，如果不是就返回False</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>xxxxxxxxxx格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(参数, 数据格式)</span><br></pre></td></tr></table></figure><h3 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num, int) <span class="keyword">or</span> <span class="keyword">not</span> isinstance(num, float):</span><br><span class="line">        print(<span class="string">'&#123;&#125;并非整数/小数数据类型'</span>.format(num))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line">absB = myAbs(<span class="string">"err"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/2.png" alt=""></p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>定义函数的时候，还可以有默认参数，默认参数的意思是</p><ul><li>当这个参数有值传递的时候，就使用传递进来的值</li><li>当这个参数没有传递的时候，就使用定义的默认值</li></ul><p>函数的默认参数的作用是简化调用，调用时只需要把必须的参数传进去</p><p>但是在需要的时候，又可以传入额外的参数来覆盖默认参数的值</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>, 默认参数 = 默认值)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来求num的n次方的 <code>power</code> 函数，n默认为2</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(num, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    value = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        value = value * num</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">print(power(<span class="number">4</span>))</span><br><span class="line">print(power(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/3.png" alt=""></p><p>调用 <code>power</code> 函数求平方值时，我们只需要传入底数，不用传幂</p><p>但是在需要调用 <code>power</code> 函数求其他次方值时，又可以传入幂值</p><p>这就是函数使用默认参数的优势</p><p><strong><em>TIPS:</em></strong> 由于函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面，否则将会出现错误</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>定义函数的时候，除了默认参数，Python函数还接收一种参数叫做可变参数</p><p>可变参数的意思是参数的数量是可变的，可变参数通常使用 <code>*args</code> 来表示</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(*args)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来计算任意个数的平均值的 <code>average</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        sum += item</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    avg = sum / count</span><br><span class="line">    <span class="keyword">return</span> avg</span><br><span class="line"></span><br><span class="line">print(average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(average(<span class="number">6</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/4.png" alt=""></p><p>调用 <code>average</code> 函数求平均值时，我们只需要传入所有值，没有数量限制</p><p>这就是函数使用可变参数的优势</p><p><strong><em>TIPS:</em></strong> </p><blockquote><p>在使用上，Python会把可变参数定义为一个Tuple<br>所以在函数内部，把可变参数当作Tuple来使用就可以了<br>比如可以通过位置下标取出对应的元素等</p></blockquote><h2 id="可变关键字参数"><a href="#可变关键字参数" class="headerlink" title="可变关键字参数"></a>可变关键字参数</h2><p>可变参数在底层会把可变参数当作Tuple去处理，但Tuple在使用上有一定的局限性</p><ul><li>比如有时候想找到特定位置的参数，只能通过下标的方式去寻找</li><li>如果顺序发生变化得时候，下标就会失效，函数逻辑就得重新修改实现</li></ul><p>Python函数提供可变关键字参数，对于可变关键字参数，可以通过关键字的名字key找到对应的参数值</p><p>这和我们之前学习过的Dict类似，Python会把可变关键字参数定义为一个Dict</p><p>可变关键字参数通常使用 <code>**kwargs</code> 来表示</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(**kwargs)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来打印同学信息的 <code>info</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名: &#123;&#125;, 性别: &#123;&#125;, 年龄: &#123;&#125;'</span>.format(kwargs.get(<span class="string">'name'</span>), kwargs.get(<span class="string">'gender'</span>), kwargs.get(<span class="string">'age'</span>)))</span><br><span class="line"></span><br><span class="line">info(name = <span class="string">'Alice'</span>, gender = <span class="string">'girl'</span>, age = <span class="number">16</span>)</span><br><span class="line">info(name = <span class="string">'Alice'</span>, age = <span class="number">16</span>, gender = <span class="string">'girl'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/5.png" alt=""></p><p>调用 <code>info</code> 打印同学信息时，传参顺序的不同对我们的打印结果没有影响</p><p>这就是函数使用可变参数的优势，他是通过 key 来拿 value</p><h2 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h2><p>对于一个拥有必需参数，默认参数，可变参数，可变关键字参数的函数</p><p>定义顺序是先必需参数，接着默认参数，之后可变参数，最后可变关键字参数</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1, param2, param3 = None, *args, **kwargs)</span>:</span></span><br><span class="line">    print(param1)</span><br><span class="line">    print(param2)</span><br><span class="line">    print(param3)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, name = <span class="string">'Alice'</span>, score = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/6.png" alt=""></p><p><strong><em>TIPS:</em></strong> </p><blockquote><p>在实际使用上，不建议定义这么多的参数<br>因为这么多类型的参数，很容易导致出错</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数参数是需要传递给函数内部的数据，在 &lt;a href=&quot;https://gengrui01.github.io/article/20210526.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python函数的定义及调用&lt;/a&gt; 中我们已经简单接触了函数的参数&lt;/p&gt;
&lt;p&gt;函数参数可以是任意的数据类型，只要函数内部逻辑可以处理即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数的定义及调用</title>
    <link href="https://www.gengruiblog.cn/article/20210526.html"/>
    <id>https://www.gengruiblog.cn/article/20210526.html</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2021-06-09T02:46:19.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>对于什么是函数，其实在前面的学习过程中我们所使用的方法就是函数</p><p>比如在set里面，使用remove()函数进行元素的删除，使用add()函数添加元素等</p><p>但是到现在我们一直都是在调用Python内置的函数，没有学习如何自己定义一个函数</p><p>在编程过程中我们经常需要用到自己定义的函数，这篇文章主要学习如何自己定义并且调用函数</p><a id="more"></a><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中，定义一个函数要使用 <code>def</code> 关键字， <code>def</code> 后写出函数名、圆括号 <code>()</code> 和冒号 <code>:</code> </p><p>传入参数或者自变量需要放在圆括号中，括号里可以用来定义参数</p><p>在缩进块中编写函数体，函数体的第一行语句可以使用文档字符串（用来存放函数说明）</p><p>用 <code>return</code> 语句结束函数，<code>return</code> 后面可以跟返回值，不带值表示返回 <code>None</code></p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>, 参数<span class="number">2</span>, ... , 参数N)</span></span></span><br><span class="line"><span class="function">    "函数说明"</span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line">    return 返回值1, 返回值2, ... , 返回值N</span><br></pre></td></tr></table></figure><h3 id="定义函数示例-求绝对值"><a href="#定义函数示例-求绝对值" class="headerlink" title="定义函数示例 - 求绝对值"></a>定义函数示例 - 求绝对值</h3><p>我们定义一个用来求绝对值的 <code>myAbs</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/1.png" alt=""></p><p>可以看到运行结果并没有打出任何内容，是因为我们仅仅定义了这个函数并没有对他进行调用</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>在讲调用之前我们先来讲解什么是函数的返回值</p><p><code>return</code> 表示返回的意思，函数体内部的语句在执行时一旦执行到 <code>return</code> ，函数就执行完毕并将结果返回</p><p>因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑</p><blockquote><p>分析上面函数 在参数&gt;=0时返回参数本身，在参数&lt;0时返回参数相反数</p></blockquote><h3 id="定义函数示例-求正方形周长面积"><a href="#定义函数示例-求正方形周长面积" class="headerlink" title="定义函数示例 - 求正方形周长面积"></a>定义函数示例 - 求正方形周长面积</h3><p>除了返回一个值以外，函数也可以返回多个值</p><p>在函数中如果需要返回多个值，值与值之间使用逗号分隔即可，但是需要注意顺序</p><p>比如我们定义一个用来求正方形周长面积的 <code>squareDate</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareDate</span><span class="params">(side)</span>:</span></span><br><span class="line">    c = <span class="number">4</span> * side</span><br><span class="line">    s = side * side</span><br><span class="line">    <span class="keyword">return</span> c, s</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/2.png" alt=""></p><p>可以看到运行结果并没有打出任何内容，还是因为我们没有调用函数</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>在本节之前的内容里我们调用了很多Python内置的函数</p><p>通过函数名后面跟圆括号，括号里传入函数需要的参数就可以完成函数的调用</p><p>需要用到函数返回值的可以直接接收返回值或者直接打印</p><p>不需要返回值或者返回值为None的可以省略函数名前的 <code>返回值 =</code></p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>调用函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值<span class="number">1</span>, 返回值<span class="number">2</span>, ... , 返回值N = 函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ... , 参数N)</span><br></pre></td></tr></table></figure><p>上面我们定义了求绝对值以及求正方形周长面积两个函数，现在我们写代码来调用这两个函数</p><h3 id="调用函数示例-求绝对值"><a href="#调用函数示例-求绝对值" class="headerlink" title="调用函数示例 - 求绝对值"></a>调用函数示例 - 求绝对值</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">absA = myAbs(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"7的绝对值是&#123;&#125;"</span>.format(absA))</span><br><span class="line">absB = myAbs(<span class="number">-9</span>)</span><br><span class="line">print(<span class="string">"-9的绝对值是&#123;&#125;"</span>.format(absB))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/3.png" alt=""></p><h3 id="调用函数示例-求正方形周长面积"><a href="#调用函数示例-求正方形周长面积" class="headerlink" title="调用函数示例 - 求正方形周长面积"></a>调用函数示例 - 求正方形周长面积</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cA, sA = squareDate(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"边长为7的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(cA, sA))</span><br><span class="line">cB, sB = squareDate(<span class="number">9</span>)</span><br><span class="line">print(<span class="string">"边长为9的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(cB, sB))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/4.png" alt=""></p><h2 id="函数内部调用其他函数"><a href="#函数内部调用其他函数" class="headerlink" title="函数内部调用其他函数"></a>函数内部调用其他函数</h2><p>在函数内部，还可以调用其他函数</p><p>比如求正方形周长面积函数中同时返回正方形的周长和面积</p><p>而求周长和求面积是完全独立的逻辑，可以定义成两个新的函数</p><p>然后在求正方形周长面积函数中调用这两个新函数，得到结果并返回</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareS</span><span class="params">(side)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> side * side</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareC</span><span class="params">(side)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * side</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareDate</span><span class="params">(side)</span>:</span></span><br><span class="line">    c = squareC(side)</span><br><span class="line">    s = squareS(side)</span><br><span class="line">    <span class="keyword">return</span> c, s</span><br><span class="line"></span><br><span class="line">c, s = squareDate(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"边长为7的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(c, s))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/5.png" alt=""></p><p>在函数内部调用其他函数，是非常常见的</p><p>通过合理逻辑拆分可以起到降低程序复杂度的作用</p><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>在一个函数内部调用其自身，这个函数就是递归函数</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义递归函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span></span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    函数名<span class="params">()</span></span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来计算阶乘的 <code>factorial</code> 函数</p><p>我们先用数学方法计算 num 的阶乘</p><blockquote><p> num!<br>= 1 * 2 * 3 * … * (num-1) * num<br>= (num-1)! * num</p></blockquote><p>我们要定义的函数 <code>factorial(num)</code> 只有当 <code>num=1</code> 时需要特殊处理（返回1）</p><p>其他情况下 <code>factorial(num)</code> 也就等于 <code>factorial(num-1) * num</code></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> factorial(num - <span class="number">1</span>) * num</span><br><span class="line"></span><br><span class="line">print(factorial(<span class="number">1</span>))</span><br><span class="line">print(factorial(<span class="number">5</span>)) </span><br><span class="line">print(factorial(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/6.png" alt=""></p><p>递归函数的优点是定义简单，逻辑清晰</p><p>理论上所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是函数&quot;&gt;&lt;a href=&quot;#什么是函数&quot; class=&quot;headerlink&quot; title=&quot;什么是函数&quot;&gt;&lt;/a&gt;什么是函数&lt;/h2&gt;&lt;p&gt;对于什么是函数，其实在前面的学习过程中我们所使用的方法就是函数&lt;/p&gt;
&lt;p&gt;比如在set里面，使用remove()函数进行元素的删除，使用add()函数添加元素等&lt;/p&gt;
&lt;p&gt;但是到现在我们一直都是在调用Python内置的函数，没有学习如何自己定义一个函数&lt;/p&gt;
&lt;p&gt;在编程过程中我们经常需要用到自己定义的函数，这篇文章主要学习如何自己定义并且调用函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取、新增、删除Set容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210523.html"/>
    <id>https://www.gengruiblog.cn/article/20210523.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.497Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>由于Set里面的元素是没有顺序的，因此我们不能像访问List那样通过索引来访问Set</p><p>访问Set中的某个元素实际上就是判断一个元素是否在Set中</p><p>我们可以使用in来判断某个元素是否在Set中</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>判断某个元素是否在Set中格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item <span class="keyword">in</span> set</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且判断Candy和Frank是否在班级中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line"><span class="string">'Candy'</span> <span class="keyword">in</span> students</span><br><span class="line"><span class="string">'Frank'</span> <span class="keyword">in</span> students</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/1.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><h3 id="新增单个元素"><a href="#新增单个元素" class="headerlink" title="新增单个元素"></a>新增单个元素</h3><p>Set本身提供了add方法，传入元素就可以新增到set中</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.add(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且新增名为Frank的学生</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.add(<span class="string">'Frank'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/2.png" alt=""></p><h3 id="批量新增元素"><a href="#批量新增元素" class="headerlink" title="批量新增元素"></a>批量新增元素</h3><p>有些时候需要往Set里添加多个元素，如果一个一个add是比较麻烦的</p><p>Set提供了update()方法，可以一次性给set添加多个元素</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.update([item1, item2, ... , itemN])</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并新增一批同学名字分别是 ‘Hally’,  ‘Isen’,  ‘Jenny’,  ‘Karl’</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.update([<span class="string">'Hally'</span>,  <span class="string">'Isen'</span>,  <span class="string">'Jenny'</span>,  <span class="string">'Karl'</span>])</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/3.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Set本身提供了discard方法允许我们删除Set中的元素</p><h4 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.discard(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并删除Candy</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.discard(<span class="string">'Candy'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/4.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>和Dict一样，Set也提供了clear()方法，可以快速清除Set中所有的元素</p><h4 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>定义一个Set存储学生姓名，之后清除Set中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.clear()</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/5.png" alt=""></p><h2 id="判断集合是否重合"><a href="#判断集合是否重合" class="headerlink" title="判断集合是否重合"></a>判断集合是否重合</h2><p>需要判断两个集合是否有重合的地方，需要使用for循环一个一个的去判断，非常麻烦</p><p>Set本身提供了isdisjoint方法快速判断两个集合是否有重合，如果有重合，返回False，否则返回True</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1.isdisjoint(item2)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>1班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>2班里有 ‘David’, ‘Ellena’, ‘Frank’, ‘Green’, ‘Hally’ 五位学生</p><p>把1、2班学生分别存入两个Set中，判断是否有学生在两个班中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students1 = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">students2 = set([<span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>, <span class="string">'Green'</span>, <span class="string">'Hally'</span>])</span><br><span class="line">students.isdisjoint(<span class="string">'Candy'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字典(Dict)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210521.html"/>
    <id>https://www.gengruiblog.cn/article/20210521.html</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找速度快"><a href="#查找速度快" class="headerlink" title="查找速度快"></a>查找速度快</h2><p>字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样</p><p>而List的查找速度随着元素增加而逐渐下降</p><a id="more"></a><p>不过Dict的查找速度快不是没有代价的，Dict的缺点是占用内存大，还会浪费很多内容</p><p>List正好相反，占用内存小，但是查找速度慢</p><h2 id="Python遍历Dict"><a href="#Python遍历Dict" class="headerlink" title="Python遍历Dict"></a>Python遍历Dict</h2><p>通过直接print(dict)打印出来的是完整的一个Dict</p><p>有时候，我们需要把Dict中满足一定条件的元素打印出来</p><p>这种时候需要使用for循环遍历Dict，并通过条件判断把满足条件的打印出来</p><p>Dict提供了items()方法，会返回Dict中所有的元素，每个元素包含key和value</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>遍历Dict格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">for</span>循环子分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断Dict中是否还有新的key-value对</p><p>有新key-value对时取新key-value对执行子逻辑分支操作</p><p>没有新key-value对结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出大于70分的学生成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">if</span> value &gt; <span class="number">70</span>:</span><br><span class="line">        print(key, value)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-characteristic/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查找速度快&quot;&gt;&lt;a href=&quot;#查找速度快&quot; class=&quot;headerlink&quot; title=&quot;查找速度快&quot;&gt;&lt;/a&gt;查找速度快&lt;/h2&gt;&lt;p&gt;字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样&lt;/p&gt;
&lt;p&gt;而List的查找速度随着元素增加而逐渐下降&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取、新增、修改、删除Dict容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210520.html"/>
    <id>https://www.gengruiblog.cn/article/20210520.html</id>
    <published>2021-05-19T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.523Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="根据key读取value"><a href="#根据key读取value" class="headerlink" title="根据key读取value"></a>根据key读取value</h3><p>Dict本身提供了get方法，把key当作参数传递给get方法就可以获取对应的value，当key不存在时会返回None</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出Bob和David的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.get(<span class="string">'Bob'</span>)</span><br><span class="line">dict.get(<span class="string">'David'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/1.png" alt=""></p><h3 id="读取Dict的所有key"><a href="#读取Dict的所有key" class="headerlink" title="读取Dict的所有key"></a>读取Dict的所有key</h3><p>Dict本身提供了keys方法，可以返回dict中所有的key</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生姓名</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/6.png" alt=""></p><h3 id="读取Dict的所有value"><a href="#读取Dict的所有value" class="headerlink" title="读取Dict的所有value"></a>读取Dict的所有value</h3><p>Dict本身提供了values方法，可以返回dict中所有的value</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生成绩值</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/7.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>可以使用赋值语句往Dict里面新增key-value对</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，添加Frank的成绩59，Green成绩100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Frank'</span>] = <span class="number">59</span></span><br><span class="line">dict[<span class="string">'Green'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/2.png" alt=""></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>上面我们用赋值语句往Dict里面新增了新的元素</p><p>如果说使用赋值语句时传入Dict中已存在的key，就会变成修改该key对应的value值</p><h3 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，修改Alice的成绩为73，Candy的成绩为100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Alice'</span>] = <span class="number">73</span></span><br><span class="line">dict[<span class="string">'Candy'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/4.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Dict本身提供了pop方法，把key当作参数传递给pop方法就可以删除该元素并返回对应的value</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.pop(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，删除Candy的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.pop(<span class="string">'Candy'</span>)</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/3.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>Dict本身提供了clear方法，可以清除Dict中所有的元素</p><h4 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-6"><a href="#使用示例-6" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，之后清除Dict中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.clear()</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python访问Tuple容器的其他方法</title>
    <link href="https://www.gengruiblog.cn/article/20210518.html"/>
    <id>https://www.gengruiblog.cn/article/20210518.html</id>
    <published>2021-05-17T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.387Z</updated>
    
    <content type="html"><![CDATA[<p>由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据</p><p>在使用上Tuple提供了便捷的方法可以访问Tuple中的数据</p><a id="more"></a><h2 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h2><p>count()方法用来统计tuple中某个元素出现的次数</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>count()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(item)</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>计数 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9出现的次数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.count(<span class="number">1</span>)</span><br><span class="line">tuple.count(<span class="number">5</span>)</span><br><span class="line">tuple.count(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/1.png" alt=""></p><h2 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h2><p>index()方法用来返回指定元素的下标，当一个元素多次重复出现时，则返回第一次出现的下标位置</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>index()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index(index)</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>返回 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9的下标</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.index(<span class="number">1</span>)</span><br><span class="line">tuple.index(<span class="number">5</span>)</span><br><span class="line">tuple.index(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据&lt;/p&gt;
&lt;p&gt;在使用上Tuple提供了便捷的方法可以访问Tuple中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python元组(Tuple)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210517.html"/>
    <id>https://www.gengruiblog.cn/article/20210517.html</id>
    <published>2021-05-16T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元组的不可变性"><a href="#元组的不可变性" class="headerlink" title="元组的不可变性"></a>元组的不可变性</h2><p>元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据</p><p>也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍</p><a id="more"></a><h2 id="可变Tuple"><a href="#可变Tuple" class="headerlink" title="可变Tuple"></a>可变Tuple</h2><p>上面说到Tuple和List一个最大的不同点就是Tuple是不可变的</p><p>但这针对的仅仅是基础数据类型（数字类型、布尔类型、字符串类型）的数据，对于组合数据类型则不受这个约束</p><p>比如Tuple中的某个元素是List，那么该List内部的元素是可以被改变的</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="string">'CH'</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(tuple)</span><br><span class="line">list = tuple[<span class="number">2</span>]</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">print(tuple)</span><br></pre></td></tr></table></figure><p>执行流程：</p><ul><li>先定义一个tuple存放一个数字，一个字符串，一个列表</li><li>打印tuple</li><li>取tuple的第三个元素list</li><li>把列表list的第二个元素改为2</li><li>再次打印tuple</li></ul><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/1.png" alt=""></p><p>tuple中的第三个元素已经成功被改变了，这就有悖元组的不可变性，我们来画图分析一下原因</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/2.png" alt=""></p><p>这是因为虽然元组中的列表元素改变了，但是Tuple本身指向的List仍然是同一个List</p><p>List本身并没有改变，改变的只是List里面的一个元素，这是Tuple不可变性所约束不到的范围</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;元组的不可变性&quot;&gt;&lt;a href=&quot;#元组的不可变性&quot; class=&quot;headerlink&quot; title=&quot;元组的不可变性&quot;&gt;&lt;/a&gt;元组的不可变性&lt;/h2&gt;&lt;p&gt;元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据&lt;/p&gt;
&lt;p&gt;也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python二维列表</title>
    <link href="https://www.gengruiblog.cn/article/20210515.html"/>
    <id>https://www.gengruiblog.cn/article/20210515.html</id>
    <published>2021-05-14T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是二维列表"><a href="#什么是二维列表" class="headerlink" title="什么是二维列表"></a>什么是二维列表</h2><p>首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素</p><p>并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）</p><p>在List里面存放List，就会得到二维列表</p><a id="more"></a><h2 id="创建二维列表"><a href="#创建二维列表" class="headerlink" title="创建二维列表"></a>创建二维列表</h2><p>如下图所示是Alice、Bob、David三人的成绩单，请把他们存入List中并顺序打印</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/1.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aliceScore = [<span class="number">100</span>, <span class="number">89</span>, <span class="number">92</span>]</span><br><span class="line">bobScore = [<span class="number">70</span>, <span class="number">65</span>, <span class="number">81</span>]</span><br><span class="line">davidScore = [<span class="number">88</span>, <span class="number">72</span>, <span class="number">77</span>]</span><br><span class="line">scoreList = [aliceScore, bobScore, davidScore]</span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scoreList:</span><br><span class="line">    print(score)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/2.png" alt=""></p><h2 id="访问指定位置"><a href="#访问指定位置" class="headerlink" title="访问指定位置"></a>访问指定位置</h2><p>比如说要打印出Bob的英语成绩可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(scoreList[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/3.png" alt=""></p><p>其中scoreList[1]得到Bob的成绩列表，再通过下标[2]得到Bob的英语成绩</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是二维列表&quot;&gt;&lt;a href=&quot;#什么是二维列表&quot; class=&quot;headerlink&quot; title=&quot;什么是二维列表&quot;&gt;&lt;/a&gt;什么是二维列表&lt;/h2&gt;&lt;p&gt;首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素&lt;/p&gt;
&lt;p&gt;并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）&lt;/p&gt;
&lt;p&gt;在List里面存放List，就会得到二维列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python新增、修改、删除List容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210514.html"/>
    <id>https://www.gengruiblog.cn/article/20210514.html</id>
    <published>2021-05-13T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.300Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据</p><a id="more"></a><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><p>新增元素的方式有 <code>append</code> 和 <code>insert</code> 两种：</p><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>新增元素append方法会把新的元素添加到现有元素之后</p><ul><li><code>insert(index, item)</code> 方法：把新的元素添加到指定位置，该位置及之后的所有元素均往后移一位</li></ul><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素append方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在转来一位名为 ‘Frank’ 的新同学，请把新同学添加进学生列表中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.append(<span class="string">'Frank'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/1.png" alt=""></p><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><p>新增元素insert方法会把新的元素添加到指定索引位置，该位置及之后的所有元素均往后移一位</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素insert方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert(index, item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’, ‘Frank’ 五名同学</p><p>现在转来一位名为 ‘Candy’ 的新同学，请把新同学添加进学生列表中的第3位</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.insert(<span class="number">2</span>, <span class="string">'Candy'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/2.png" alt=""></p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>删除元素pop方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop(index)</span><br></pre></td></tr></table></figure><p>该方法可以传入索引值作为参数，也可以不传参</p><ul><li>不传参：默认删除最后一个元素</li><li>传参：删除指定索引位置的元素，该位置之后的所有元素均往前移一位</li></ul><h3 id="使用示例-不传参"><a href="#使用示例-不传参" class="headerlink" title="使用示例(不传参)"></a>使用示例(不传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’, ‘Frank’ 六名同学</p><p>现在 ‘Frank’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop()</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/3.png" alt=""></p><h3 id="使用示例-传参"><a href="#使用示例-传参" class="headerlink" title="使用示例(传参)"></a>使用示例(传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五名同学</p><p>现在 ‘Candy’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop(<span class="number">2</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/4.png" alt=""></p><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><p>除了可以向列表添加、删除列表元素以外，列表已有的元素也是可以修改的</p><p>我们通过索引指定位置，给该位置赋值新的元素，即可替换列表中原有的元素，已达到修改元素的目的</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[index] = newItem</span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在 ‘Ellena’ 同学的名字打错了，正确的应该是 ‘Ellen’，请修改学生列表中的元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list[<span class="number">3</span>] = <span class="string">'Ellen'</span></span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python访问List容器的三种方式</title>
    <link href="https://www.gengruiblog.cn/article/20210513.html"/>
    <id>https://www.gengruiblog.cn/article/20210513.html</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-06-09T11:14:20.384Z</updated>
    
    <content type="html"><![CDATA[<p>列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列</p><p>我们在访问List中元素的时候有 <strong>顺序 倒序 使用索引号</strong> 三种访问方式</p><a id="more"></a><h2 id="顺序访问List"><a href="#顺序访问List" class="headerlink" title="顺序访问List"></a>顺序访问List</h2><p>在for循环的练习中我们使用 <a href="https://www.gengruiblog.cn/article/20210507.html#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1">for循环访问字符串中的每一个字符</a></p><p>在这里我们同样使用 for循环访问列表每一个元素 的方法，这种方式又称为 <strong>迭代</strong></p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>顺序访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    <span class="keyword">for</span>循环子分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断List中是否还有新item</p><p>有新item时取新item执行子逻辑分支操作</p><p>没有新item结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求学生平均分</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    sum = sum + item</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(sum/count)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/1.png" alt=""></p><h2 id="使用索引号访问List"><a href="#使用索引号访问List" class="headerlink" title="使用索引号访问List"></a>使用索引号访问List</h2><p>在List里面，每一个元素都有一个唯一的位置，我们称之为索引(index)</p><p>在字符串切片的练习中我们使用 <a href="https://www.gengruiblog.cn/article/20210502.html#%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6">位置取字符串中的单个字符</a></p><p>在这里我们同样使用 索引取List中的单个元素 的方法</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>使用索引号访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line">print(list[<span class="number">0</span>])</span><br><span class="line">print(list[<span class="number">1</span>])</span><br><span class="line">print(list[<span class="number">2</span>])</span><br><span class="line">...</span><br><span class="line">print(list[N])</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求前三名成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">    print(list[i])</span><br><span class="line"></span><br><span class="line">print(list[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/2.png" alt=""></p><h2 id="倒序访问List"><a href="#倒序访问List" class="headerlink" title="倒序访问List"></a>倒序访问List</h2><p>Python的列表，除了支持正向顺序索引获取列表中的每一个元素以外，也支持倒序访问list中的每一个元素</p><p>可以使用-1来表示最后一个元素，-2表示倒数第二个元素，以此类推</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>倒序访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line">print(list[-N<span class="number">-1</span>])</span><br><span class="line">print(list[-N])</span><br><span class="line">print(list[-N+<span class="number">1</span>])</span><br><span class="line">...</span><br><span class="line">print(list[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求前三名成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-9</span>,<span class="number">-6</span>):</span><br><span class="line">    print(list[i])  </span><br><span class="line"></span><br><span class="line">print(list[<span class="number">-9</span>:<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列&lt;/p&gt;
&lt;p&gt;我们在访问List中元素的时候有 &lt;strong&gt;顺序 倒序 使用索引号&lt;/strong&gt; 三种访问方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python容器</title>
    <link href="https://www.gengruiblog.cn/article/20210511.html"/>
    <id>https://www.gengruiblog.cn/article/20210511.html</id>
    <published>2021-05-10T16:00:00.000Z</published>
    <updated>2021-06-09T11:14:20.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h2><ul><li>在生活中，容器指的是可以容纳多个物品的收纳器</li><li>在程序中，容器指的是可以把多个元素放在一起的数据结构</li></ul><p>容器中的元素可以用for循环逐个地迭代获取</p><p>还可以用in, not in等关键字来判断某个元素是否包含在容器中</p><a id="more"></a><p>因为Python是动态语言，所以容器里可以同时同时放入数字、字符串等任意类型的元素</p><p>在Python中，列表(List)、元组(Tuple)、字典(Dict)、集合(Set)都可以放入多个元素，因此都可以算作是容器</p><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p>列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列</p><p>定义List的方法非常简单，使用中括号[]把需要放在容器里面的元素括起来就可以定义一个列表，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br></pre></td></tr></table></figure><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h2><p>元组(Tuple)和List一样，也是一个有序容器</p><p>在Tuple中，同样可以包含0个或者多个元素，并且也支持索引访问、切片等操作</p><p>定义Tuple的方式是使用小括号()将Tuple内的元素括起来，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = (item0, item1, item2, ... , itemN)</span><br></pre></td></tr></table></figure><h2 id="List和Tuple相互转换"><a href="#List和Tuple相互转换" class="headerlink" title="List和Tuple相互转换"></a>List和Tuple相互转换</h2><p>Tuple可以使用 <code>list()</code> 方法转换成List，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = list(tuple)</span><br></pre></td></tr></table></figure><p>List可以使用 <code>tuple()</code> 方法转换成Tuple，代码格式如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = tuple(list)</span><br></pre></td></tr></table></figure><p>##字典(Dict)</p><p>Dict是专门保存映射的，在Dict中，每一项包含一个key和一个value，key和value是一一对应的</p><p>定义Dict的方式是使用花括号{}将Dict内的元素(key-value对)包起来，key和value之间使用冒号:分割，并且每一组key:value后用逗号,表示这一组的结束，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'key0'</span>: <span class="string">'value0'</span>,</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>,</span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>,</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'keyN'</span>: <span class="string">'valueN'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h2><p>Set和List类似，是可以放入一系列元素的容器，他们也有区别：</p><ul><li>Set里面的元素是不允许重复的，而List里面可以包含相同的元素</li><li>Set里面的元素是没有顺序的，而List里面的元素是有顺序的</li></ul><p>定义Set的方法set()，并传入一个List，List的元素将会被转换成Set的元素，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set = set([item0, item1, item2, ... , itemN])</span><br></pre></td></tr></table></figure><p>如果传入的List中有重复的元素，转成Set后只会保留一个</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是容器&quot;&gt;&lt;a href=&quot;#什么是容器&quot; class=&quot;headerlink&quot; title=&quot;什么是容器&quot;&gt;&lt;/a&gt;什么是容器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在生活中，容器指的是可以容纳多个物品的收纳器&lt;/li&gt;
&lt;li&gt;在程序中，容器指的是可以把多个元素放在一起的数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器中的元素可以用for循环逐个地迭代获取&lt;/p&gt;
&lt;p&gt;还可以用in, not in等关键字来判断某个元素是否包含在容器中&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python循环嵌套</title>
    <link href="https://www.gengruiblog.cn/article/20210508.html"/>
    <id>https://www.gengruiblog.cn/article/20210508.html</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-06-09T11:13:25.775Z</updated>
    
    <content type="html"><![CDATA[<p>就像多层 <code>if-else</code> 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环</p><p>如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数</p><p>嵌套循环对于循环的种类没有限制，也就是说for和while可以任意组合，本文将分别举例说明</p><a id="more"></a><h2 id="在for循环中嵌入for循环"><a href="#在for循环中嵌入for循环" class="headerlink" title="在for循环中嵌入for循环"></a>在for循环中嵌入for循环</h2><p>输出字符串’ABC’中每个字符和字符串’123’中每个字符的所有排列组合方式</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'ABC'</span></span><br><span class="line">str2 = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> str2:</span><br><span class="line">        print(x + y)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/1.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/2.png" alt=""></p><h2 id="在while循环中嵌入while循环"><a href="#在while循环中嵌入while循环" class="headerlink" title="在while循环中嵌入while循环"></a>在while循环中嵌入while循环</h2><p>输出2~100之间的素数(也称质数，指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数)</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(i%j): </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; i/j) : </span><br><span class="line">        print(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/3.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/4.png" alt=""></p><h2 id="在for循环中嵌入while循环"><a href="#在for循环中嵌入while循环" class="headerlink" title="在for循环中嵌入while循环"></a>在for循环中嵌入while循环</h2><p>打印等腰三角形</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= <span class="number">5</span>-row:</span><br><span class="line">        print(<span class="string">' '</span>,end=<span class="string">''</span>)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= <span class="number">2</span>*row<span class="number">-1</span>:</span><br><span class="line">        print(<span class="string">'*'</span>,end=<span class="string">''</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/5.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/6.png" alt=""></p><h2 id="在while循环中嵌入for循环"><a href="#在while循环中嵌入for循环" class="headerlink" title="在while循环中嵌入for循环"></a>在while循环中嵌入for循环</h2><p>输出99乘法表</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;'</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> col &gt; row:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(template.format(row,col,row*col), end=<span class="string">'  '</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    row = row + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/7.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就像多层 &lt;code&gt;if-else&lt;/code&gt; 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环&lt;/p&gt;
&lt;p&gt;如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数&lt;/p&gt;
&lt;p&gt;嵌套循环对于循环的种类没有限制，也就是说for和while可以任意组合，本文将分别举例说明&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python跳出循环</title>
    <link href="https://www.gengruiblog.cn/article/20210507.html"/>
    <id>https://www.gengruiblog.cn/article/20210507.html</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-06-09T11:13:25.869Z</updated>
    
    <content type="html"><![CDATA[<p>循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去</p><p>如果在循环中需要终止循环就会用到 <code>break</code> 语句或者 <code>continue</code> 语句，两者区别如下：</p><ul><li><code>break</code> 语句：跳出整个循环</li><li><code>continue</code> 语句：跳出本次循环，执行下次循环</li></ul><a id="more"></a><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>break</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/1.png" alt=""></p><p>可以看到两种循环都会在 <code>break</code> 之后跳出整个循环</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/3.png" alt=""></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/4.png" alt=""></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>continue</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/2.png" alt=""></p><p>可以看到两种循环都会在 <code>continue</code> 之后跳出本次循环，执行下次循环</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">continue</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/5.png" alt=""></p><h4 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去&lt;/p&gt;
&lt;p&gt;如果在循环中需要终止循环就会用到 &lt;code&gt;break&lt;/code&gt; 语句或者 &lt;code&gt;continue&lt;/code&gt; 语句，两者区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; 语句：跳出整个循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; 语句：跳出本次循环，执行下次循环&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python循环语句</title>
    <link href="https://www.gengruiblog.cn/article/20210506.html"/>
    <id>https://www.gengruiblog.cn/article/20210506.html</id>
    <published>2021-05-05T16:00:00.000Z</published>
    <updated>2021-06-09T11:13:25.821Z</updated>
    
    <content type="html"><![CDATA[<p>程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句</p><p>代码里的循环语句主要有两种，一种是while循环一种是for循环</p><a id="more"></a><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">while 判断条件：</span><br><span class="line">    while子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件是否为真</p><p>判断条件为真时执行子逻辑分支操作</p><p>判断条件为假时循环结束</p><p><img src="https://gengrui01.github.io/picture/python-loop/1.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，使用while循环计算1~100的和</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">100</span>:</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    sum = sum + num</span><br><span class="line"></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/2.png" alt=""></p><p>在上述代码中，while的判断条件是num&lt;100</p><p>也就是说，当num&lt;100时循环会继续下去，当num&gt;=100时将跳出循环</p><p>因为num在while循环里面不断加1，最终一定会大于等于100</p><p>因此while循环不会无限进行下去</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">for 元素 in 序列:</span><br><span class="line">   for子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断序列中是否还有新元素</p><p>有新元素时取新元素执行子逻辑分支操作</p><p>没有新元素结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，数一数单词 <code>sunny</code> 中有多少个字母</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'sunny'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> str:</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句&lt;/p&gt;
&lt;p&gt;代码里的循环语句主要有两种，一种是while循环一种是for循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python条件判断</title>
    <link href="https://www.gengruiblog.cn/article/20210504.html"/>
    <id>https://www.gengruiblog.cn/article/20210504.html</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-06-09T09:32:17.753Z</updated>
    
    <content type="html"><![CDATA[<p>市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作</p><p>在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作</p><a id="more"></a><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><h3 id="语句格式"><a href="#语句格式" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 判断条件:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><p><strong><em>TIPS:</em></strong> </p><p>语句格式中需要注意的点有两个:</p><blockquote><ol><li>在if语句的最后，有一个 <code>:</code></li><li>子逻辑分支代码 明显比上一行代码缩进了4个字符</li></ol></blockquote><figure class="highlight plain"><figcaption><span>是条件判断的格式，表示接下来是if模块或者else模块的子分支代码块</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也正是因为是子分支代码块，所以需要缩进</span><br><span class="line"></span><br><span class="line">在Python规范中，一般使用 **1个Tab键（推荐）** 或者 4个空格键 作为缩进</span><br><span class="line"></span><br><span class="line">### 执行流程</span><br><span class="line"></span><br><span class="line">判断条件是否为真</span><br><span class="line"></span><br><span class="line">当if条件为真（True）时，执行if的子逻辑分支</span><br><span class="line"></span><br><span class="line">在if条件为假（False）时，执行else的子逻辑分支</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;gengrui01.github.io&#x2F;picture&#x2F;python-if-else&#x2F;2.png)</span><br><span class="line"></span><br><span class="line">### 使用示例</span><br><span class="line"></span><br><span class="line">例如在满分100分的考试中，小于60分的记为不及格，大于60分的记为及格</span><br><span class="line"></span><br><span class="line">现在我们来写一段代码，在输入成绩后自动判断成绩是否及格</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">score &#x3D; 59</span><br><span class="line">if score &lt; 60:</span><br><span class="line">    print(&#39;不及格&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;及格&#39;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/1.png" alt=""></p><p>可以看到程序就会根据score的值判断，走不同的子分支打印出不同的内容</p><p>如果想对达到或者超过60分的学生再进行不同的分类，比如超过90分是卓越，超过80分是优秀超过70分良好</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">59</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">70</span>:</span><br><span class="line">        print(<span class="string">'及格'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">80</span>:</span><br><span class="line">            print(<span class="string">'良好'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> score &lt; <span class="number">90</span>:</span><br><span class="line">                print(<span class="string">'优秀'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/3.png" alt=""></p><p>虽然我们得出了自己需要的结果，但是随着判断条件的增多代码缩进也越来越多，导致代码逻辑看起来也不够清晰</p><p>为了简化以上逻辑我们使用 <code>if-elif-else</code> 语句，其中 <code>elif</code> 相当于 <code>else if</code> 的意思</p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><h3 id="语句格式-1"><a href="#语句格式-1" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 条件A:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">elif 条件B:</span><br><span class="line">    elif子逻辑分支1</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">elif 条件C:</span><br><span class="line">    elif子逻辑分支2</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件A是否为真</p><p>条件A为真（True）时，执行if子逻辑分支</p><p>条件A为假（False）时，判断条件B是否为真</p><p>条件B为真（True）时，执行elif子逻辑分支1</p><p>条件B为假（False）时，判断条件C是否为真</p><p>条件C为真（True）时，elif子逻辑分支2</p><p>条件C为假（False）时，执行else的子逻辑分支</p><p><img src="https://gengrui01.github.io/picture/python-if-else/4.png" alt=""></p><p><strong><em>TIPS:</em></strong> </p><blockquote><p>这一系列条件判断会从上到下依次判断<br>如果某个判断为 <code>True</code> 就会直接执行对应的代码块<br>后面的条件判断就忽略不再执行了</p></blockquote><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'良好'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'优秀'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作&lt;/p&gt;
&lt;p&gt;在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串切片</title>
    <link href="https://www.gengruiblog.cn/article/20210502.html"/>
    <id>https://www.gengruiblog.cn/article/20210502.html</id>
    <published>2021-05-01T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取字符串中的单个字符"><a href="#取字符串中的单个字符" class="headerlink" title="取字符串中的单个字符"></a>取字符串中的单个字符</h2><p>字符串由一个个字符组成，每一个字符都有一个唯一的位置</p><p>比如字符串 <code>&#39;ABC&#39;</code> ，第一个字符是 <code>A</code> ，第二个字符是 <code>B</code> ，第三个字符是 <code>C</code></p><p>我们可以使用 <code>[a]</code> 按照位置的方式取出字符串中的字符</p><a id="more"></a><p>不过需要注意的是，在程序的世界中，计数是从0开始的，这里使用0来表示第一个位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABC'</span></span><br><span class="line">print(s[<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">1</span>])</span><br><span class="line">print(s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-slice/1.png" alt=""></p><h2 id="取字符串的字串"><a href="#取字符串的字串" class="headerlink" title="取字符串的字串"></a>取字符串的字串</h2><p>按照上述方法我们可以切取出字符串中的任意一个字母，但有时候我们不止需要字符串中的一个字母，会想切取字符串的一部分（子串）</p><p>这个时候我们需要在中括号中填入两个数字用冒号分开 <code>[a:b]</code> ，其中a和b分别表示需要切取的开始位置和结束位置</p><p><strong><em>TIPS:</em></strong> 这是半闭半开区间，也就是说切取出的子串会包含开始位置但不包含结束位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABCDEFGHIJK'</span></span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(s[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">10</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-slice/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取字符串中的单个字符&quot;&gt;&lt;a href=&quot;#取字符串中的单个字符&quot; class=&quot;headerlink&quot; title=&quot;取字符串中的单个字符&quot;&gt;&lt;/a&gt;取字符串中的单个字符&lt;/h2&gt;&lt;p&gt;字符串由一个个字符组成，每一个字符都有一个唯一的位置&lt;/p&gt;
&lt;p&gt;比如字符串 &lt;code&gt;&amp;#39;ABC&amp;#39;&lt;/code&gt; ，第一个字符是 &lt;code&gt;A&lt;/code&gt; ，第二个字符是 &lt;code&gt;B&lt;/code&gt; ，第三个字符是 &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;[a]&lt;/code&gt; 按照位置的方式取出字符串中的字符&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串模板化</title>
    <link href="https://www.gengruiblog.cn/article/20210501.html"/>
    <id>https://www.gengruiblog.cn/article/20210501.html</id>
    <published>2021-04-30T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.768Z</updated>
    
    <content type="html"><![CDATA[<p>简单字符串输出的内容是固定的</p><p>有时候输出的内容是有固定的模板，但具体内容是不是固定的</p><p>这个时候需要使用format来使字符串模板化</p><p>用固定的模板输出不固定的内容</p><a id="more"></a><h2 id="字符串format创建及使用"><a href="#字符串format创建及使用" class="headerlink" title="字符串format创建及使用"></a>字符串format创建及使用</h2><p>字符串format由字符串模板和模板数据内容两个部分组成，通过 <code>{ }</code> 把模板数据内容嵌到字符串模板对应的位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello &#123;&#125;'</span></span><br><span class="line">world = <span class="string">'World'</span></span><br><span class="line">print(template.format(world))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/1.png" alt=""></p><h2 id="字符串format包含多模板"><a href="#字符串format包含多模板" class="headerlink" title="字符串format包含多模板"></a>字符串format包含多模板</h2><p>如果模板中{}比较多则容易错乱，我们在定义模板的时候可以指定模板数据内容的顺序或者数据内容名，使得在format过程更加清晰</p><h3 id="指定模板数据顺序"><a href="#指定模板数据顺序" class="headerlink" title="指定模板数据顺序"></a>指定模板数据顺序</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;0&#125; * &#123;1&#125; * &#123;2&#125; * &#123;3&#125; * &#123;4&#125; * &#123;5&#125; * &#123;6&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/2.png" alt=""></p><p>调整模板顺序后打印，打印时的输入顺序不变</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;6&#125; * &#123;5&#125; * &#123;4&#125; * &#123;3&#125; * &#123;2&#125; * &#123;1&#125; * &#123;0&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/3.png" alt=""></p><h3 id="指定模板数据名"><a href="#指定模板数据名" class="headerlink" title="指定模板数据名"></a>指定模板数据名</h3><p>定义模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello&#123;w&#125;\nHello&#123;c&#125;\nHello&#123;b&#125;'</span></span><br></pre></td></tr></table></figure><p>定义数据内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">world = <span class="string">"World!"</span></span><br><span class="line">china = <span class="string">"China!"</span></span><br><span class="line">beijing = <span class="string">"Beijing!"</span></span><br></pre></td></tr></table></figure><p>使用模板并打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(template.format(w = world, c = china, b = beijing))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单字符串输出的内容是固定的&lt;/p&gt;
&lt;p&gt;有时候输出的内容是有固定的模板，但具体内容是不是固定的&lt;/p&gt;
&lt;p&gt;这个时候需要使用format来使字符串模板化&lt;/p&gt;
&lt;p&gt;用固定的模板输出不固定的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串转义</title>
    <link href="https://www.gengruiblog.cn/article/20210430.html"/>
    <id>https://www.gengruiblog.cn/article/20210430.html</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.736Z</updated>
    
    <content type="html"><![CDATA[<p>之前的文章说到过，字符串可以用 <code>&#39; &#39;</code> 或者 <code>&quot; &quot;</code> 括起来表示</p><p>如果字符串本身包含 <strong>‘</strong> 怎么办？比如我们要表示字符串 <code>I&#39;m OK</code> ，这时，可以用 <code>&quot; &quot;</code> 括起来表示：</p><a id="more"></a><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"I'm OK"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/1.png" alt=""></p><p>同理，如果字符串包含 <strong>“</strong> ，我们就可以用 <code>&#39; &#39;</code> 括起来表示：</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said "Hello Python!"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/2.png" alt=""></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>如果字符串既包含 <strong>‘</strong> 又包含 <strong>“</strong> 怎么办？</p><p>这个时候，就需要对字符串中的某些特殊字符进行 <strong>转义</strong> ，Python字符串用 <code>\</code> 进行转义（转义字符 <code>\</code> 不计入字符串的内容中）</p><p>比如要表示字符串 <code>Anne said &quot;I&#39;m OK&quot;</code></p><p>字符串内的 <code>&#39;</code> 和 <code>&quot;</code> 会引起歧义，因此，我们在它前面插入一个 <code>\</code> 表示这是一个普通字符，不代表字符串的起始</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said \"I\'m OK\"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/3.png" alt=""></p><h2 id="转义整个字符串（raw字符串）"><a href="#转义整个字符串（raw字符串）" class="headerlink" title="转义整个字符串（raw字符串）"></a>转义整个字符串（raw字符串）</h2><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦</p><p>为了避免这种情况，我们可以在字符串前面加个前缀 <code>r</code> ，表示这是一个raw字符串</p><p>raw字符串中的内容会自动转义，不需要在每个字符前加 <code>\</code></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'\(~_~)/ \(~_~)/'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/4.png" alt=""></p><p>raw字符串也同样适用于多行字符串，在多行字符串前面添加个前缀 <code>r</code> ，这个多行字符串也会变成一个raw字符串</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'''Anne said "I'm OK"</span></span><br><span class="line"><span class="string">\(~_~)/ \(~_~)/ \(~_~)/'''</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/5.png" alt=""></p><h2 id="常用转义"><a href="#常用转义" class="headerlink" title="常用转义"></a>常用转义</h2><p>其他常常用到转义字符的地方还有：</p><ul><li><code>\n</code> ：换行</li><li><code>\t</code> ：制表符</li><li><code>\\</code> ：\字符本身</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的文章说到过，字符串可以用 &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt; 或者 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示&lt;/p&gt;
&lt;p&gt;如果字符串本身包含 &lt;strong&gt;‘&lt;/strong&gt; 怎么办？比如我们要表示字符串 &lt;code&gt;I&amp;#39;m OK&lt;/code&gt; ，这时，可以用 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python布尔值运算</title>
    <link href="https://www.gengruiblog.cn/article/20210429.html"/>
    <id>https://www.gengruiblog.cn/article/20210429.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-06-05T10:14:24.394Z</updated>
    
    <content type="html"><![CDATA[<p>布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）</p><a id="more"></a><h2 id="and运算（与运算）"><a href="#and运算（与运算）" class="headerlink" title="and运算（与运算）"></a>and运算（与运算）</h2><p>只有所有都为 True，and运算结果才是 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/1.png" alt=""></p><h2 id="or运算（或运算）"><a href="#or运算（或运算）" class="headerlink" title="or运算（或运算）"></a>or运算（或运算）</h2><p>只要其中有一个为 True，or 运算结果就是 True。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/2.png" alt=""></p><h2 id="not运算（非运算）"><a href="#not运算（非运算）" class="headerlink" title="not运算（非运算）"></a>not运算（非运算）</h2><p>是一个单目运算符，把 True 变成 False，False 变成 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/3.png" alt=""></p><p><strong><em>TIPS:</em></strong> not计算的优先级是高于and和or的</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/5.png" alt=""></p><p>在上述布尔计算中，先计算<code>not False = True</code>，然后再计算<code>True and True</code>，因此得到 <strong>True</strong> 的结果</p><h2 id="与其他数据类型运算"><a href="#与其他数据类型运算" class="headerlink" title="与其他数据类型运算"></a>与其他数据类型运算</h2><p>在Python中，布尔类型还可以与其他数据类型（字符串，数字等）做与或非运算</p><p>运算时会把0、空字符串和None看成False，其他数值和非空字符串都看成True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">or</span> <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span> <span class="keyword">and</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/4.png" alt=""></p><h2 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h2><p>Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了直接返回结果</p><h3 id="a-and-b"><a href="#a-and-b" class="headerlink" title="a and b"></a>a and b</h3><ul><li>如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b</li><li>如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a</li></ul><h3 id="a-or-b"><a href="#a-or-b" class="headerlink" title="a or b"></a>a or b</h3><ul><li>如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a</li><li>如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
</feed>
