<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gengruiblog.cn/"/>
  <updated>2021-06-06T15:56:29.772Z</updated>
  <id>https://www.gengruiblog.cn/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python读取、新增、删除Set容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210525.html"/>
    <id>https://www.gengruiblog.cn/article/20210525.html</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2021-06-06T15:56:29.772Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>由于Set里面的元素是没有顺序的，因此我们不能像访问List那样通过索引来访问Set</p><p>访问Set中的某个元素实际上就是判断一个元素是否在Set中</p><p>我们可以使用in来判断某个元素是否在Set中</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>判断某个元素是否在Set中格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item <span class="keyword">in</span> set</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且判断Candy和Frank是否在班级中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line"><span class="string">'Candy'</span> <span class="keyword">in</span> students</span><br><span class="line"><span class="string">'Frank'</span> <span class="keyword">in</span> students</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/1.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><h3 id="新增单个元素"><a href="#新增单个元素" class="headerlink" title="新增单个元素"></a>新增单个元素</h3><p>Set本身提供了add方法，传入元素就可以新增到set中</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.add(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且新增名为Frank的学生</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.add(<span class="string">'Frank'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/2.png" alt=""></p><h3 id="批量新增元素"><a href="#批量新增元素" class="headerlink" title="批量新增元素"></a>批量新增元素</h3><p>有些时候需要往Set里添加多个元素，如果一个一个add是比较麻烦的</p><p>Set提供了update()方法，可以一次性给set添加多个元素</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.update([item1, item2, ... , itemN])</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并新增一批同学名字分别是 ‘Hally’,  ‘Isen’,  ‘Jenny’,  ‘Karl’</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.update([<span class="string">'Hally'</span>,  <span class="string">'Isen'</span>,  <span class="string">'Jenny'</span>,  <span class="string">'Karl'</span>])</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/3.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Set本身提供了discard方法允许我们删除Set中的元素</p><h4 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.discard(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并删除Candy</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.discard(<span class="string">'Candy'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/4.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>和Dict一样，Set也提供了clear()方法，可以快速清除Set中所有的元素</p><h4 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>定义一个Set存储学生姓名，之后清除Set中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.clear()</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/5.png" alt=""></p><h2 id="判断集合是否重合"><a href="#判断集合是否重合" class="headerlink" title="判断集合是否重合"></a>判断集合是否重合</h2><p>需要判断两个集合是否有重合的地方，需要使用for循环一个一个的去判断，非常麻烦</p><p>Set本身提供了isdisjoint方法快速判断两个集合是否有重合，如果有重合，返回False，否则返回True</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1.isdisjoint(item2)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>1班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>2班里有 ‘David’, ‘Ellena’, ‘Frank’, ‘Green’, ‘Hally’ 五位学生</p><p>把1、2班学生分别存入两个Set中，判断是否有学生在两个班中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students1 = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">students2 = set([<span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>, <span class="string">'Green'</span>, <span class="string">'Hally'</span>])</span><br><span class="line">students.isdisjoint(<span class="string">'Candy'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字典(Dict)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210523.html"/>
    <id>https://www.gengruiblog.cn/article/20210523.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-06-06T02:02:53.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找速度快"><a href="#查找速度快" class="headerlink" title="查找速度快"></a>查找速度快</h2><p>字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样</p><p>而List的查找速度随着元素增加而逐渐下降</p><a id="more"></a><p>不过Dict的查找速度快不是没有代价的，Dict的缺点是占用内存大，还会浪费很多内容</p><p>List正好相反，占用内存小，但是查找速度慢</p><h2 id="Python遍历Dict"><a href="#Python遍历Dict" class="headerlink" title="Python遍历Dict"></a>Python遍历Dict</h2><p>通过直接print(dict)打印出来的是完整的一个Dict</p><p>有时候，我们需要把Dict中满足一定条件的元素打印出来</p><p>这种时候需要使用for循环遍历Dict，并通过条件判断把满足条件的打印出来</p><p>Dict提供了items()方法，会返回Dict中所有的元素，每个元素包含key和value</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>遍历Dict格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">for</span>循环子分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断Dict中是否还有新的key-value对</p><p>有新key-value对时取新key-value对执行子逻辑分支操作</p><p>没有新key-value对结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出大于70分的学生成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">if</span> value &gt; <span class="number">70</span>:</span><br><span class="line">        print(key, value)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-characteristic/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查找速度快&quot;&gt;&lt;a href=&quot;#查找速度快&quot; class=&quot;headerlink&quot; title=&quot;查找速度快&quot;&gt;&lt;/a&gt;查找速度快&lt;/h2&gt;&lt;p&gt;字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样&lt;/p&gt;
&lt;p&gt;而List的查找速度随着元素增加而逐渐下降&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取、新增、修改、删除Dict容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210522.html"/>
    <id>https://www.gengruiblog.cn/article/20210522.html</id>
    <published>2021-05-21T16:00:00.000Z</published>
    <updated>2021-06-06T02:37:46.853Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="根据key读取value"><a href="#根据key读取value" class="headerlink" title="根据key读取value"></a>根据key读取value</h3><p>Dict本身提供了get方法，把key当作参数传递给get方法就可以获取对应的value，当key不存在时会返回None</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出Bob和David的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.get(<span class="string">'Bob'</span>)</span><br><span class="line">dict.get(<span class="string">'David'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/1.png" alt=""></p><h3 id="读取Dict的所有key"><a href="#读取Dict的所有key" class="headerlink" title="读取Dict的所有key"></a>读取Dict的所有key</h3><p>Dict本身提供了keys方法，可以返回dict中所有的key</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生姓名</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/6.png" alt=""></p><h3 id="读取Dict的所有value"><a href="#读取Dict的所有value" class="headerlink" title="读取Dict的所有value"></a>读取Dict的所有value</h3><p>Dict本身提供了values方法，可以返回dict中所有的value</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生成绩值</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/7.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>可以使用赋值语句往Dict里面新增key-value对</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，添加Frank的成绩59，Green成绩100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Frank'</span>] = <span class="number">59</span></span><br><span class="line">dict[<span class="string">'Green'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/2.png" alt=""></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>上面我们用赋值语句往Dict里面新增了新的元素</p><p>如果说使用赋值语句时传入Dict中已存在的key，就会变成修改该key对应的value值</p><h3 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，修改Alice的成绩为73，Candy的成绩为100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Alice'</span>] = <span class="number">73</span></span><br><span class="line">dict[<span class="string">'Candy'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/4.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Dict本身提供了pop方法，把key当作参数传递给pop方法就可以删除该元素并返回对应的value</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.pop(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，删除Candy的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.pop(<span class="string">'Candy'</span>)</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/3.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>Dict本身提供了clear方法，可以清除Dict中所有的元素</p><h4 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-6"><a href="#使用示例-6" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，之后清除Dict中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.clear()</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python访问Tuple容器的其他方法</title>
    <link href="https://www.gengruiblog.cn/article/20210520.html"/>
    <id>https://www.gengruiblog.cn/article/20210520.html</id>
    <published>2021-05-19T16:00:00.000Z</published>
    <updated>2021-06-05T23:31:36.737Z</updated>
    
    <content type="html"><![CDATA[<p>由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据</p><p>在使用上Tuple提供了便捷的方法可以访问Tuple中的数据</p><a id="more"></a><h2 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h2><p>count()方法用来统计tuple中某个元素出现的次数</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>count()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(item)</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>计数 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9出现的次数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.count(<span class="number">1</span>)</span><br><span class="line">tuple.count(<span class="number">5</span>)</span><br><span class="line">tuple.count(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/1.png" alt=""></p><h2 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h2><p>index()方法用来返回指定元素的下标，当一个元素多次重复出现时，则返回第一次出现的下标位置</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>index()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index(index)</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>返回 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9的下标</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.index(<span class="number">1</span>)</span><br><span class="line">tuple.index(<span class="number">5</span>)</span><br><span class="line">tuple.index(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据&lt;/p&gt;
&lt;p&gt;在使用上Tuple提供了便捷的方法可以访问Tuple中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python元组(Tuple)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210519.html"/>
    <id>https://www.gengruiblog.cn/article/20210519.html</id>
    <published>2021-05-18T16:00:00.000Z</published>
    <updated>2021-06-06T01:50:44.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元组的不可变性"><a href="#元组的不可变性" class="headerlink" title="元组的不可变性"></a>元组的不可变性</h2><p>元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据</p><p>也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍</p><a id="more"></a><h2 id="可变Tuple"><a href="#可变Tuple" class="headerlink" title="可变Tuple"></a>可变Tuple</h2><p>上面说到Tuple和List一个最大的不同点就是Tuple是不可变的</p><p>但这针对的仅仅是基础数据类型（数字类型、布尔类型、字符串类型）的数据，对于组合数据类型则不受这个约束</p><p>比如Tuple中的某个元素是List，那么该List内部的元素是可以被改变的</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="string">'CH'</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(tuple)</span><br><span class="line">list = tuple[<span class="number">2</span>]</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">print(tuple)</span><br></pre></td></tr></table></figure><p>执行流程：</p><ul><li>先定义一个tuple存放一个数字，一个字符串，一个列表</li><li>打印tuple</li><li>取tuple的第三个元素list</li><li>把列表list的第二个元素改为2</li><li>再次打印tuple</li></ul><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/1.png" alt=""></p><p>tuple中的第三个元素已经成功被改变了，这就有悖元组的不可变性，我们来画图分析一下原因</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/2.png" alt=""></p><p>这是因为虽然元组中的列表元素改变了，但是Tuple本身指向的List仍然是同一个List</p><p>List本身并没有改变，改变的只是List里面的一个元素，这是Tuple不可变性所约束不到的范围</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;元组的不可变性&quot;&gt;&lt;a href=&quot;#元组的不可变性&quot; class=&quot;headerlink&quot; title=&quot;元组的不可变性&quot;&gt;&lt;/a&gt;元组的不可变性&lt;/h2&gt;&lt;p&gt;元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据&lt;/p&gt;
&lt;p&gt;也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python二维列表</title>
    <link href="https://www.gengruiblog.cn/article/20210517.html"/>
    <id>https://www.gengruiblog.cn/article/20210517.html</id>
    <published>2021-05-16T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是二维列表"><a href="#什么是二维列表" class="headerlink" title="什么是二维列表"></a>什么是二维列表</h2><p>首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素</p><p>并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）</p><p>在List里面存放List，就会得到二维列表</p><a id="more"></a><h2 id="创建二维列表"><a href="#创建二维列表" class="headerlink" title="创建二维列表"></a>创建二维列表</h2><p>如下图所示是Alice、Bob、David三人的成绩单，请把他们存入List中并顺序打印</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/1.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aliceScore = [<span class="number">100</span>, <span class="number">89</span>, <span class="number">92</span>]</span><br><span class="line">bobScore = [<span class="number">70</span>, <span class="number">65</span>, <span class="number">81</span>]</span><br><span class="line">davidScore = [<span class="number">88</span>, <span class="number">72</span>, <span class="number">77</span>]</span><br><span class="line">scoreList = [aliceScore, bobScore, davidScore]</span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scoreList:</span><br><span class="line">    print(score)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/2.png" alt=""></p><h2 id="访问指定位置"><a href="#访问指定位置" class="headerlink" title="访问指定位置"></a>访问指定位置</h2><p>比如说要打印出Bob的英语成绩可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(scoreList[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/3.png" alt=""></p><p>其中scoreList[1]得到Bob的成绩列表，再通过下标[2]得到Bob的英语成绩</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是二维列表&quot;&gt;&lt;a href=&quot;#什么是二维列表&quot; class=&quot;headerlink&quot; title=&quot;什么是二维列表&quot;&gt;&lt;/a&gt;什么是二维列表&lt;/h2&gt;&lt;p&gt;首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素&lt;/p&gt;
&lt;p&gt;并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）&lt;/p&gt;
&lt;p&gt;在List里面存放List，就会得到二维列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python新增、修改、删除List容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210516.html"/>
    <id>https://www.gengruiblog.cn/article/20210516.html</id>
    <published>2021-05-15T16:00:00.000Z</published>
    <updated>2021-06-06T02:37:46.866Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据</p><a id="more"></a><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><p>新增元素的方式有 <code>append</code> 和 <code>insert</code> 两种：</p><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>新增元素append方法会把新的元素添加到现有元素之后</p><ul><li><code>insert(index, item)</code> 方法：把新的元素添加到指定位置，该位置及之后的所有元素均往后移一位</li></ul><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素append方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在转来一位名为 ‘Frank’ 的新同学，请把新同学添加进学生列表中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.append(<span class="string">'Frank'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/1.png" alt=""></p><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><p>新增元素insert方法会把新的元素添加到指定索引位置，该位置及之后的所有元素均往后移一位</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素insert方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert(index, item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’, ‘Frank’ 五名同学</p><p>现在转来一位名为 ‘Candy’ 的新同学，请把新同学添加进学生列表中的第3位</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.insert(<span class="number">2</span>, <span class="string">'Candy'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/2.png" alt=""></p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>删除元素pop方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop(index)</span><br></pre></td></tr></table></figure><p>该方法可以传入索引值作为参数，也可以不传参</p><ul><li>不传参：默认删除最后一个元素</li><li>传参：删除指定索引位置的元素，该位置之后的所有元素均往前移一位</li></ul><h3 id="使用示例-不传参"><a href="#使用示例-不传参" class="headerlink" title="使用示例(不传参)"></a>使用示例(不传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’, ‘Frank’ 六名同学</p><p>现在 ‘Frank’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop()</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/3.png" alt=""></p><h3 id="使用示例-传参"><a href="#使用示例-传参" class="headerlink" title="使用示例(传参)"></a>使用示例(传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五名同学</p><p>现在 ‘Candy’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop(<span class="number">2</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/4.png" alt=""></p><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><p>除了可以向列表添加、删除列表元素以外，列表已有的元素也是可以修改的</p><p>我们通过索引指定位置，给该位置赋值新的元素，即可替换列表中原有的元素，已达到修改元素的目的</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[index] = newItem</span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在 ‘Ellena’ 同学的名字打错了，正确的应该是 ‘Ellen’，请修改学生列表中的元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list[<span class="number">3</span>] = <span class="string">'Ellen'</span></span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python访问List容器的三种方式</title>
    <link href="https://www.gengruiblog.cn/article/20210515.html"/>
    <id>https://www.gengruiblog.cn/article/20210515.html</id>
    <published>2021-05-14T16:00:00.000Z</published>
    <updated>2021-06-05T10:14:24.373Z</updated>
    
    <content type="html"><![CDATA[<p>列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列</p><p>我们在访问List中元素的时候有 <strong>顺序 倒序 使用索引号</strong> 三种访问方式</p><a id="more"></a><h2 id="顺序访问List"><a href="#顺序访问List" class="headerlink" title="顺序访问List"></a>顺序访问List</h2><p>在for循环的练习中我们使用 <a href="https://www.gengruiblog.cn/article/20210507.html#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1">for循环访问字符串中的每一个字符</a></p><p>在这里我们同样使用 for循环访问列表每一个元素 的方法，这种方式又称为 <strong>迭代</strong></p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>顺序访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    <span class="keyword">for</span>循环子分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断List中是否还有新item</p><p>有新item时取新item执行子逻辑分支操作</p><p>没有新item结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求学生平均分</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">    sum = sum + item</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(sum/count)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/1.png" alt=""></p><h2 id="使用索引号访问List"><a href="#使用索引号访问List" class="headerlink" title="使用索引号访问List"></a>使用索引号访问List</h2><p>在List里面，每一个元素都有一个唯一的位置，我们称之为索引(index)</p><p>在字符串切片的练习中我们使用 <a href="https://www.gengruiblog.cn/article/20210502.html#%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6">位置取字符串中的单个字符</a></p><p>在这里我们同样使用 索引取List中的单个元素 的方法</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>使用索引号访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line">print(list[<span class="number">0</span>])</span><br><span class="line">print(list[<span class="number">1</span>])</span><br><span class="line">print(list[<span class="number">2</span>])</span><br><span class="line">...</span><br><span class="line">print(list[N])</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求前三名成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">    print(list[i])</span><br><span class="line"></span><br><span class="line">print(list[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/2.png" alt=""></p><h2 id="倒序访问List"><a href="#倒序访问List" class="headerlink" title="倒序访问List"></a>倒序访问List</h2><p>Python的列表，除了支持正向顺序索引获取列表中的每一个元素以外，也支持倒序访问list中的每一个元素</p><p>可以使用-1来表示最后一个元素，-2表示倒数第二个元素，以此类推</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>倒序访问List格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br><span class="line">print(list[-N<span class="number">-1</span>])</span><br><span class="line">print(list[-N])</span><br><span class="line">print(list[-N+<span class="number">1</span>])</span><br><span class="line">...</span><br><span class="line">print(list[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩分别是 95.5, 85, 81, 78, 72, 69, 66.5, 61, 59</p><p>求前三名成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">81</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">69</span>, <span class="number">66.5</span>, <span class="number">61</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-9</span>,<span class="number">-6</span>):</span><br><span class="line">    print(list[i])  </span><br><span class="line"></span><br><span class="line">print(list[<span class="number">-9</span>:<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-select/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列&lt;/p&gt;
&lt;p&gt;我们在访问List中元素的时候有 &lt;strong&gt;顺序 倒序 使用索引号&lt;/strong&gt; 三种访问方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python容器</title>
    <link href="https://www.gengruiblog.cn/article/20210513.html"/>
    <id>https://www.gengruiblog.cn/article/20210513.html</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-06-06T02:36:04.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h2><ul><li>在生活中，容器指的是可以容纳多个物品的收纳器</li><li>在程序中，容器指的是可以把多个元素放在一起的数据结构</li></ul><p>容器中的元素可以用for循环逐个地迭代获取</p><p>还可以用in, not in等关键字来判断某个元素是否包含在容器中</p><a id="more"></a><p>因为Python是动态语言，所以容器里可以同时同时放入数字、字符串等任意类型的元素</p><p>在Python中，列表(List)、元组(Tuple)、字典(Dict)、集合(Set)都可以放入多个元素，因此都可以算作是容器</p><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p>列表(List)是一种有序的容器，放入List中的元素，将会按照一定顺序排列</p><p>定义List的方法非常简单，使用中括号[]把需要放在容器里面的元素括起来就可以定义一个列表，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [item0, item1, item2, ... , itemN]</span><br></pre></td></tr></table></figure><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h2><p>元组(Tuple)和List一样，也是一个有序容器</p><p>在Tuple中，同样可以包含0个或者多个元素，并且也支持索引访问、切片等操作</p><p>定义Tuple的方式是使用小括号()将Tuple内的元素括起来，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = (item0, item1, item2, ... , itemN)</span><br></pre></td></tr></table></figure><h2 id="List和Tuple相互转换"><a href="#List和Tuple相互转换" class="headerlink" title="List和Tuple相互转换"></a>List和Tuple相互转换</h2><p>Tuple可以使用 <code>list()</code> 方法转换成List，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = list(tuple)</span><br></pre></td></tr></table></figure><p>List可以使用 <code>tuple()</code> 方法转换成Tuple，代码格式如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = tuple(list)</span><br></pre></td></tr></table></figure><p>##字典(Dict)</p><p>Dict是专门保存映射的，在Dict中，每一项包含一个key和一个value，key和value是一一对应的</p><p>定义Dict的方式是使用花括号{}将Dict内的元素(key-value对)包起来，key和value之间使用冒号:分割，并且每一组key:value后用逗号,表示这一组的结束，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'key0'</span>: <span class="string">'value0'</span>,</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>,</span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>,</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'keyN'</span>: <span class="string">'valueN'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h2><p>Set和List类似，是可以放入一系列元素的容器，他们也有区别：</p><ul><li>Set里面的元素是不允许重复的，而List里面可以包含相同的元素</li><li>Set里面的元素是没有顺序的，而List里面的元素是有顺序的</li></ul><p>定义Set的方法set()，并传入一个List，List的元素将会被转换成Set的元素，代码格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set = set([item0, item1, item2, ... , itemN])</span><br></pre></td></tr></table></figure><p>如果传入的List中有重复的元素，转成Set后只会保留一个</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是容器&quot;&gt;&lt;a href=&quot;#什么是容器&quot; class=&quot;headerlink&quot; title=&quot;什么是容器&quot;&gt;&lt;/a&gt;什么是容器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在生活中，容器指的是可以容纳多个物品的收纳器&lt;/li&gt;
&lt;li&gt;在程序中，容器指的是可以把多个元素放在一起的数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器中的元素可以用for循环逐个地迭代获取&lt;/p&gt;
&lt;p&gt;还可以用in, not in等关键字来判断某个元素是否包含在容器中&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python循环嵌套</title>
    <link href="https://www.gengruiblog.cn/article/20210509.html"/>
    <id>https://www.gengruiblog.cn/article/20210509.html</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2021-06-05T02:05:33.481Z</updated>
    
    <content type="html"><![CDATA[<p>就像多层 <code>if-else</code> 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环</p><p>如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数</p><p><strong><em>TIPS:</em></strong> 嵌套循环对于循环的种类没有限制，也就是说for和while可以任意组合，下面举例说明：</p><a id="more"></a><h2 id="在for循环中嵌入for循环"><a href="#在for循环中嵌入for循环" class="headerlink" title="在for循环中嵌入for循环"></a>在for循环中嵌入for循环</h2><p>输出字符串’ABC’中每个字符和字符串’123’中每个字符的所有排列组合方式</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'ABC'</span></span><br><span class="line">str2 = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> str2:</span><br><span class="line">        print(x + y)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/1.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/2.png" alt=""></p><h2 id="在while循环中嵌入while循环"><a href="#在while循环中嵌入while循环" class="headerlink" title="在while循环中嵌入while循环"></a>在while循环中嵌入while循环</h2><p>输出2~100之间的素数(也称质数，指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数)</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(i%j): </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; i/j) : </span><br><span class="line">        print(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/3.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/4.png" alt=""></p><h2 id="在for循环中嵌入while循环"><a href="#在for循环中嵌入while循环" class="headerlink" title="在for循环中嵌入while循环"></a>在for循环中嵌入while循环</h2><p>打印等腰三角形</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= <span class="number">5</span>-row:</span><br><span class="line">        print(<span class="string">' '</span>,end=<span class="string">''</span>)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= <span class="number">2</span>*row<span class="number">-1</span>:</span><br><span class="line">        print(<span class="string">'*'</span>,end=<span class="string">''</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/5.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/6.png" alt=""></p><h2 id="在while循环中嵌入for循环"><a href="#在while循环中嵌入for循环" class="headerlink" title="在while循环中嵌入for循环"></a>在while循环中嵌入for循环</h2><p>输出99乘法表</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;'</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> col &gt; row:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(template.format(row,col,row*col), end=<span class="string">'  '</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    row = row + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/7.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就像多层 &lt;code&gt;if-else&lt;/code&gt; 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环&lt;/p&gt;
&lt;p&gt;如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;TIPS:&lt;/em&gt;&lt;/strong&gt; 嵌套循环对于循环的种类没有限制，也就是说for和while可以任意组合，下面举例说明：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python跳出循环</title>
    <link href="https://www.gengruiblog.cn/article/20210508.html"/>
    <id>https://www.gengruiblog.cn/article/20210508.html</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-06-04T12:08:39.644Z</updated>
    
    <content type="html"><![CDATA[<p>循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去</p><p>如果在循环中需要终止循环就会用到 <code>break</code> 语句或者 <code>continue</code> 语句，两者区别如下：</p><ul><li><code>break</code> 语句：跳出整个循环</li><li><code>continue</code> 语句：跳出本次循环，执行下次循环</li></ul><a id="more"></a><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>break</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/1.png" alt=""></p><p>可以看到两种循环都会在 <code>break</code> 之后跳出整个循环</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/3.png" alt=""></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/4.png" alt=""></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>continue</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/2.png" alt=""></p><p>可以看到两种循环都会在 <code>continue</code> 之后跳出本次循环，执行下次循环</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">continue</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/5.png" alt=""></p><h4 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去&lt;/p&gt;
&lt;p&gt;如果在循环中需要终止循环就会用到 &lt;code&gt;break&lt;/code&gt; 语句或者 &lt;code&gt;continue&lt;/code&gt; 语句，两者区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; 语句：跳出整个循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; 语句：跳出本次循环，执行下次循环&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python循环语句</title>
    <link href="https://www.gengruiblog.cn/article/20210507.html"/>
    <id>https://www.gengruiblog.cn/article/20210507.html</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-06-04T12:06:44.980Z</updated>
    
    <content type="html"><![CDATA[<p>程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句</p><p>代码里的循环语句主要有两种，一种是while循环一种是for循环</p><a id="more"></a><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">while 判断条件：</span><br><span class="line">    while子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件是否为真</p><p>判断条件为真时执行子逻辑分支操作</p><p>判断条件为假时循环结束</p><p><img src="https://gengrui01.github.io/picture/python-loop/1.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，使用while循环计算1~100的和</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">100</span>:</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    sum = sum + num</span><br><span class="line"></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/2.png" alt=""></p><p>在上述代码中，while的判断条件是num&lt;100</p><p>也就是说，当num&lt;100时循环会继续下去，当num&gt;=100时将跳出循环</p><p>因为num在while循环里面不断加1，最终一定会大于等于100</p><p>因此while循环不会无限进行下去</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">for 元素 in 序列:</span><br><span class="line">   for子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断序列中是否还有新元素</p><p>有新元素时取新元素执行子逻辑分支操作</p><p>没有新元素结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，数一数单词 <code>sunny</code> 中有多少个字母</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'sunny'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> str:</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句&lt;/p&gt;
&lt;p&gt;代码里的循环语句主要有两种，一种是while循环一种是for循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python条件判断</title>
    <link href="https://www.gengruiblog.cn/article/20210504.html"/>
    <id>https://www.gengruiblog.cn/article/20210504.html</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-31T06:45:18.168Z</updated>
    
    <content type="html"><![CDATA[<p>市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作</p><p>在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作</p><a id="more"></a><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><h3 id="语句格式"><a href="#语句格式" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 判断条件:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><p><strong><em>TIPS:</em></strong> 语句格式中需要注意的点有两个:</p><ol><li>在if语句的最后，有一个 <code>:</code></li><li>子逻辑分支代码 明显比上一行代码缩进了4个字符</li></ol><figure class="highlight plain"><figcaption><span>是条件判断的格式，表示接下来是if模块或者else模块的子分支代码块</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也正是因为是子分支代码块，所以需要缩进</span><br><span class="line"></span><br><span class="line">在Python规范中，一般使用 **1个Tab键（推荐）** 或者 4个空格键 作为缩进</span><br><span class="line"></span><br><span class="line">### 执行流程</span><br><span class="line"></span><br><span class="line">判断条件是否为真</span><br><span class="line"></span><br><span class="line">当if条件为真（True）时，执行if的子逻辑分支</span><br><span class="line"></span><br><span class="line">在if条件为假（False）时，执行else的子逻辑分支</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;gengrui01.github.io&#x2F;picture&#x2F;python-if-else&#x2F;2.png)</span><br><span class="line"></span><br><span class="line">### 使用示例</span><br><span class="line"></span><br><span class="line">例如在满分100分的考试中，小于60分的记为不及格，大于60分的记为及格</span><br><span class="line"></span><br><span class="line">现在我们来写一段代码，在输入成绩后自动判断成绩是否及格</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">score &#x3D; 59</span><br><span class="line">if score &lt; 60:</span><br><span class="line">    print(&#39;不及格&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;及格&#39;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/1.png" alt=""></p><p>可以看到程序就会根据score的值判断，走不同的子分支打印出不同的内容</p><p>如果想对达到或者超过60分的学生再进行不同的分类，比如超过90分是卓越，超过80分是优秀超过70分良好</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">59</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">70</span>:</span><br><span class="line">        print(<span class="string">'及格'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">80</span>:</span><br><span class="line">            print(<span class="string">'良好'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> score &lt; <span class="number">90</span>:</span><br><span class="line">                print(<span class="string">'优秀'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/3.png" alt=""></p><p>虽然我们得出了自己需要的结果，但是随着判断条件的增多代码缩进也越来越多，导致代码逻辑看起来也不够清晰</p><p>为了简化以上逻辑我们使用 <code>if-elif-else</code> 语句，其中 <code>elif</code> 相当于 <code>else if</code> 的意思</p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><h3 id="语句格式-1"><a href="#语句格式-1" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 条件A:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">elif 条件B:</span><br><span class="line">    elif子逻辑分支1</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">elif 条件C:</span><br><span class="line">    elif子逻辑分支2</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件A是否为真</p><p>条件A为真（True）时，执行if子逻辑分支</p><p>条件A为假（False）时，判断条件B是否为真</p><p>条件B为真（True）时，执行elif子逻辑分支1</p><p>条件B为假（False）时，判断条件C是否为真</p><p>条件C为真（True）时，elif子逻辑分支2</p><p>条件C为假（False）时，执行else的子逻辑分支</p><p><img src="https://gengrui01.github.io/picture/python-if-else/4.png" alt=""></p><p><strong><em>TIPS:</em></strong> 这一系列条件判断会从上到下依次判断，如果某个判断为 <code>True</code> 就会直接执行对应的代码块，后面的条件判断就忽略不再执行了</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'良好'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'优秀'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作&lt;/p&gt;
&lt;p&gt;在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串切片</title>
    <link href="https://www.gengruiblog.cn/article/20210502.html"/>
    <id>https://www.gengruiblog.cn/article/20210502.html</id>
    <published>2021-05-01T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取字符串中的单个字符"><a href="#取字符串中的单个字符" class="headerlink" title="取字符串中的单个字符"></a>取字符串中的单个字符</h2><p>字符串由一个个字符组成，每一个字符都有一个唯一的位置</p><p>比如字符串 <code>&#39;ABC&#39;</code> ，第一个字符是 <code>A</code> ，第二个字符是 <code>B</code> ，第三个字符是 <code>C</code></p><p>我们可以使用 <code>[a]</code> 按照位置的方式取出字符串中的字符</p><a id="more"></a><p>不过需要注意的是，在程序的世界中，计数是从0开始的，这里使用0来表示第一个位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABC'</span></span><br><span class="line">print(s[<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">1</span>])</span><br><span class="line">print(s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-slice/1.png" alt=""></p><h2 id="取字符串的字串"><a href="#取字符串的字串" class="headerlink" title="取字符串的字串"></a>取字符串的字串</h2><p>按照上述方法我们可以切取出字符串中的任意一个字母，但有时候我们不止需要字符串中的一个字母，会想切取字符串的一部分（子串）</p><p>这个时候我们需要在中括号中填入两个数字用冒号分开 <code>[a:b]</code> ，其中a和b分别表示需要切取的开始位置和结束位置</p><p><strong><em>TIPS:</em></strong> 这是半闭半开区间，也就是说切取出的子串会包含开始位置但不包含结束位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABCDEFGHIJK'</span></span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(s[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">10</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-slice/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取字符串中的单个字符&quot;&gt;&lt;a href=&quot;#取字符串中的单个字符&quot; class=&quot;headerlink&quot; title=&quot;取字符串中的单个字符&quot;&gt;&lt;/a&gt;取字符串中的单个字符&lt;/h2&gt;&lt;p&gt;字符串由一个个字符组成，每一个字符都有一个唯一的位置&lt;/p&gt;
&lt;p&gt;比如字符串 &lt;code&gt;&amp;#39;ABC&amp;#39;&lt;/code&gt; ，第一个字符是 &lt;code&gt;A&lt;/code&gt; ，第二个字符是 &lt;code&gt;B&lt;/code&gt; ，第三个字符是 &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;[a]&lt;/code&gt; 按照位置的方式取出字符串中的字符&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串模板化</title>
    <link href="https://www.gengruiblog.cn/article/20210501.html"/>
    <id>https://www.gengruiblog.cn/article/20210501.html</id>
    <published>2021-04-30T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.768Z</updated>
    
    <content type="html"><![CDATA[<p>简单字符串输出的内容是固定的</p><p>有时候输出的内容是有固定的模板，但具体内容是不是固定的</p><p>这个时候需要使用format来使字符串模板化</p><p>用固定的模板输出不固定的内容</p><a id="more"></a><h2 id="字符串format创建及使用"><a href="#字符串format创建及使用" class="headerlink" title="字符串format创建及使用"></a>字符串format创建及使用</h2><p>字符串format由字符串模板和模板数据内容两个部分组成，通过 <code>{ }</code> 把模板数据内容嵌到字符串模板对应的位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello &#123;&#125;'</span></span><br><span class="line">world = <span class="string">'World'</span></span><br><span class="line">print(template.format(world))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/1.png" alt=""></p><h2 id="字符串format包含多模板"><a href="#字符串format包含多模板" class="headerlink" title="字符串format包含多模板"></a>字符串format包含多模板</h2><p>如果模板中{}比较多则容易错乱，我们在定义模板的时候可以指定模板数据内容的顺序或者数据内容名，使得在format过程更加清晰</p><h3 id="指定模板数据顺序"><a href="#指定模板数据顺序" class="headerlink" title="指定模板数据顺序"></a>指定模板数据顺序</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;0&#125; * &#123;1&#125; * &#123;2&#125; * &#123;3&#125; * &#123;4&#125; * &#123;5&#125; * &#123;6&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/2.png" alt=""></p><p>调整模板顺序后打印，打印时的输入顺序不变</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;6&#125; * &#123;5&#125; * &#123;4&#125; * &#123;3&#125; * &#123;2&#125; * &#123;1&#125; * &#123;0&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/3.png" alt=""></p><h3 id="指定模板数据名"><a href="#指定模板数据名" class="headerlink" title="指定模板数据名"></a>指定模板数据名</h3><p>定义模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello&#123;w&#125;\nHello&#123;c&#125;\nHello&#123;b&#125;'</span></span><br></pre></td></tr></table></figure><p>定义数据内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">world = <span class="string">"World!"</span></span><br><span class="line">china = <span class="string">"China!"</span></span><br><span class="line">beijing = <span class="string">"Beijing!"</span></span><br></pre></td></tr></table></figure><p>使用模板并打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(template.format(w = world, c = china, b = beijing))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-format/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单字符串输出的内容是固定的&lt;/p&gt;
&lt;p&gt;有时候输出的内容是有固定的模板，但具体内容是不是固定的&lt;/p&gt;
&lt;p&gt;这个时候需要使用format来使字符串模板化&lt;/p&gt;
&lt;p&gt;用固定的模板输出不固定的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串转义</title>
    <link href="https://www.gengruiblog.cn/article/20210430.html"/>
    <id>https://www.gengruiblog.cn/article/20210430.html</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.736Z</updated>
    
    <content type="html"><![CDATA[<p>之前的文章说到过，字符串可以用 <code>&#39; &#39;</code> 或者 <code>&quot; &quot;</code> 括起来表示</p><p>如果字符串本身包含 <strong>‘</strong> 怎么办？比如我们要表示字符串 <code>I&#39;m OK</code> ，这时，可以用 <code>&quot; &quot;</code> 括起来表示：</p><a id="more"></a><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"I'm OK"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/1.png" alt=""></p><p>同理，如果字符串包含 <strong>“</strong> ，我们就可以用 <code>&#39; &#39;</code> 括起来表示：</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said "Hello Python!"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/2.png" alt=""></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>如果字符串既包含 <strong>‘</strong> 又包含 <strong>“</strong> 怎么办？</p><p>这个时候，就需要对字符串中的某些特殊字符进行 <strong>转义</strong> ，Python字符串用 <code>\</code> 进行转义（转义字符 <code>\</code> 不计入字符串的内容中）</p><p>比如要表示字符串 <code>Anne said &quot;I&#39;m OK&quot;</code></p><p>字符串内的 <code>&#39;</code> 和 <code>&quot;</code> 会引起歧义，因此，我们在它前面插入一个 <code>\</code> 表示这是一个普通字符，不代表字符串的起始</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said \"I\'m OK\"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/3.png" alt=""></p><h2 id="转义整个字符串（raw字符串）"><a href="#转义整个字符串（raw字符串）" class="headerlink" title="转义整个字符串（raw字符串）"></a>转义整个字符串（raw字符串）</h2><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦</p><p>为了避免这种情况，我们可以在字符串前面加个前缀 <code>r</code> ，表示这是一个raw字符串</p><p>raw字符串中的内容会自动转义，不需要在每个字符前加 <code>\</code></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'\(~_~)/ \(~_~)/'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/4.png" alt=""></p><p>raw字符串也同样适用于多行字符串，在多行字符串前面添加个前缀 <code>r</code> ，这个多行字符串也会变成一个raw字符串</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'''Anne said "I'm OK"</span></span><br><span class="line"><span class="string">\(~_~)/ \(~_~)/ \(~_~)/'''</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-string-raw/5.png" alt=""></p><h2 id="常用转义"><a href="#常用转义" class="headerlink" title="常用转义"></a>常用转义</h2><p>其他常常用到转义字符的地方还有：</p><ul><li><code>\n</code> ：换行</li><li><code>\t</code> ：制表符</li><li><code>\\</code> ：\字符本身</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的文章说到过，字符串可以用 &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt; 或者 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示&lt;/p&gt;
&lt;p&gt;如果字符串本身包含 &lt;strong&gt;‘&lt;/strong&gt; 怎么办？比如我们要表示字符串 &lt;code&gt;I&amp;#39;m OK&lt;/code&gt; ，这时，可以用 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python布尔值运算</title>
    <link href="https://www.gengruiblog.cn/article/20210429.html"/>
    <id>https://www.gengruiblog.cn/article/20210429.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-06-05T10:14:24.394Z</updated>
    
    <content type="html"><![CDATA[<p>布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）</p><a id="more"></a><h2 id="and运算（与运算）"><a href="#and运算（与运算）" class="headerlink" title="and运算（与运算）"></a>and运算（与运算）</h2><p>只有所有都为 True，and运算结果才是 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/1.png" alt=""></p><h2 id="or运算（或运算）"><a href="#or运算（或运算）" class="headerlink" title="or运算（或运算）"></a>or运算（或运算）</h2><p>只要其中有一个为 True，or 运算结果就是 True。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/2.png" alt=""></p><h2 id="not运算（非运算）"><a href="#not运算（非运算）" class="headerlink" title="not运算（非运算）"></a>not运算（非运算）</h2><p>是一个单目运算符，把 True 变成 False，False 变成 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/3.png" alt=""></p><p><strong><em>TIPS:</em></strong> not计算的优先级是高于and和or的</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/5.png" alt=""></p><p>在上述布尔计算中，先计算<code>not False = True</code>，然后再计算<code>True and True</code>，因此得到 <strong>True</strong> 的结果</p><h2 id="与其他数据类型运算"><a href="#与其他数据类型运算" class="headerlink" title="与其他数据类型运算"></a>与其他数据类型运算</h2><p>在Python中，布尔类型还可以与其他数据类型（字符串，数字等）做与或非运算</p><p>运算时会把0、空字符串和None看成False，其他数值和非空字符串都看成True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">or</span> <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span> <span class="keyword">and</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-bool/4.png" alt=""></p><h2 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h2><p>Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了直接返回结果</p><h3 id="a-and-b"><a href="#a-and-b" class="headerlink" title="a and b"></a>a and b</h3><ul><li>如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b</li><li>如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a</li></ul><h3 id="a-or-b"><a href="#a-or-b" class="headerlink" title="a or b"></a>a or b</h3><ul><li>如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a</li><li>如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数字类型运算法则</title>
    <link href="https://www.gengruiblog.cn/article/20210428.html"/>
    <id>https://www.gengruiblog.cn/article/20210428.html</id>
    <published>2021-04-27T16:00:00.000Z</published>
    <updated>2021-06-05T10:17:52.704Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中整数和小数（浮点数）虽然属于不同的数据类型，但是在运算上是可以一起运算的，所以经常一起称为数字类型</p><a id="more"></a>ti<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h3><p>使用Python进行进制转换的时候，可以使用bin()函数来将十进制转换成二进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = bin(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/8.png" alt=""></p><h3 id="十进制转换成八进制"><a href="#十进制转换成八进制" class="headerlink" title="十进制转换成八进制"></a>十进制转换成八进制</h3><p>使用Python进行进制转换的时候，oct()函数来将十进制转换成八进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = oct(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/9.png" alt=""></p><h3 id="十进制转换成十六进制"><a href="#十进制转换成十六进制" class="headerlink" title="十进制转换成十六进制"></a>十进制转换成十六进制</h3><p>使用Python进行进制转换的时候，hex()函数来将十进制转换成十六进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = hex(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/10.png" alt=""></p><h3 id="八进制转十六进制"><a href="#八进制转十六进制" class="headerlink" title="八进制转十六进制"></a>八进制转十六进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0o35</span></span><br><span class="line">b = hex(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/11.png" alt=""></p><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><p>整数和浮点数可以直接进行四则运算</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 + num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/1.png" alt=""></p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 - num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/2.png" alt=""></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 * num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/3.png" alt=""></p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 / num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/4.png" alt=""></p><p><strong><em>TIPS:</em></strong></p><p>从上面可以发现一个规律，整数和浮点数运算后，得到的结果不管小数点后是否有值，结果都变成浮点数了</p><p>这是合理的，因为浮点数可以表达整数的结果，但是整数不能表达浮点数的结果</p><h2 id="取模运算"><a href="#取模运算" class="headerlink" title="取模运算"></a>取模运算</h2><p>Python数字支持取模运算，使用百分号%表示取模</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span> % <span class="number">2</span>)</span><br><span class="line">print(<span class="number">33</span> % <span class="number">10</span>)</span><br><span class="line">print(<span class="number">99</span> % <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/5.png" alt=""></p><h2 id="地板除"><a href="#地板除" class="headerlink" title="地板除"></a>地板除</h2><p>Python除了普通除法之外，还有一个特殊的除法被称为地板除</p><p>对于地板除，得到的结果只有整数的部分会忽略纯小数</p><p>地板除使用//进行</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>//<span class="number">4</span></span><br><span class="line"><span class="number">10</span>//<span class="number">2.5</span></span><br><span class="line"><span class="number">10</span>//<span class="number">3</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/6.png" alt=""></p><h2 id="保留小数点位数"><a href="#保留小数点位数" class="headerlink" title="保留小数点位数"></a>保留小数点位数</h2><p>使用Python计算小数的时候，可以使用round()函数来保留小数点后若干位</p><p>调用round函数要输入两个参数，第一个是需要保留小数点位数的数值，第二个是要保留的位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span> / <span class="number">3</span></span><br><span class="line">print(num)</span><br><span class="line">round(num, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-number/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中整数和小数（浮点数）虽然属于不同的数据类型，但是在运算上是可以一起运算的，所以经常一起称为数字类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python变量命名规范及如何定义变量</title>
    <link href="https://www.gengruiblog.cn/article/20210427.html"/>
    <id>https://www.gengruiblog.cn/article/20210427.html</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2021-04-30T03:29:35.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量的概念基本上和初中代数的方程变量是一致的</p><p>例如，对于方程式 y=x*x ，x就是变量</p><p>在Python中，变量指的是一段数据或者一段空间的别名</p><a id="more"></a><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><ol><li>增强程序可读性 拒绝硬编码</li><li>提高了对程序的修改效率</li></ol><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ol><li>变量名必须以字母或者下划线(_)或者汉字开头</li><li>变量名中可以包括字母、下划线(_)、数字、汉字</li><li>变量名中不能出现Python关键字和保留字</li><li>变量名中要区分大小写，即 abc 和 Abc 不是同一个变量</li></ol><h3 id="常用变量命名法则"><a href="#常用变量命名法则" class="headerlink" title="常用变量命名法则"></a>常用变量命名法则</h3><p>在学习工作中，给变量命名的最高境界是见名知意</p><p>所以汉字、汉语拼音、单个字母、个别无意义的单词不推荐作为变量名，例如：年龄、xingming、a、the……</p><p>推荐使用英文单词或者缩写对变量命名，例如：age、name……</p><p>当一个单词不能准确表达变量含义，变量名由多个单词构成时通常使用如下法则进行变量命名：</p><ol><li>驼峰命名法：除第一个单词外其余首字母大写，例如：myAge、yourName……</li><li>大驼峰命名法：所有单词的首字母均大写，例如：MyAge、YourName……</li><li>posix命名法：变量名中所有字母均小写，俩单词间用下划线链接，例如：my_age、your_name……</li></ol><p>在开发工程中，程序员常常默认：</p><ul><li>驼峰命名法用来对变量进行命名</li><li>大驼峰命名法用来对类进行命名</li><li>posix命名法很少用到</li></ul><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>定义变量的方式很简单，通过 <code>变量名=数据</code> ，即可定义一个变量</p><p>例如：<code>temp = 1</code></p><p>在这个例子里面，temp就是变量，它的值是整数1</p><p>例如：<code>hello = &#39;Hello&#39;</code></p><p>在这个例子里面，hello就是变量，它的值是字符串’Hello’</p><p>在Python里面，一个变量可以先后存储多种不同类型的数据，比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="number">1</span></span><br><span class="line">print(temp)</span><br><span class="line">temp = <span class="string">'ABC'</span></span><br><span class="line">print(temp)</span><br></pre></td></tr></table></figure><p>起初temp存储的是整数1，之后存储的是字符串’ABC’</p><p>这是Python这类语言特有的特性，我们称之为动态语言，Python、Javascript等等都是动态语言</p><p>与之对应的是静态语言，Java、C、C++等等属于静态语言</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是变量&quot;&gt;&lt;a href=&quot;#什么是变量&quot; class=&quot;headerlink&quot; title=&quot;什么是变量&quot;&gt;&lt;/a&gt;什么是变量&lt;/h2&gt;&lt;p&gt;变量的概念基本上和初中代数的方程变量是一致的&lt;/p&gt;
&lt;p&gt;例如，对于方程式 y=x*x ，x就是变量&lt;/p&gt;
&lt;p&gt;在Python中，变量指的是一段数据或者一段空间的别名&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础数据类型</title>
    <link href="https://www.gengruiblog.cn/article/20210426.html"/>
    <id>https://www.gengruiblog.cn/article/20210426.html</id>
    <published>2021-04-25T16:00:00.000Z</published>
    <updated>2021-06-05T02:14:16.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据类型"><a href="#什么是数据类型" class="headerlink" title="什么是数据类型"></a>什么是数据类型</h2><p>计算机顾名思义就是可以做数学计算的机器，因此计算机程序理所当然地可以处理各种数值</p><p>但是计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据</p><p>不同种类的数据，就需要定义不同的数据类型来存储，认识编程中的不同数据类型是非常有必要的</p><p>Python中能够直接处理的有 <strong><em>整数、浮点数、字符串、布尔类型、空值</em></strong> 五种数据类型</p><a id="more"></a><p>这篇文章就来讲解这五种数据类型分别用来存放什么样的数据</p><p>至于Python提供的列表、字典等多种数据类型，以及创建自定义数据类型，本文不会介绍</p><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可以处理任意大小的整数，这里的整数和我们生活中定义的整数是一个概念，例如：1,2,3,0,-1,-2,-3 等等都是整数</p><p>对于整数，除了生活中常用的十进制以外，计算机由于使用二进制，所以，在计算机中也常用二进制或者十六进制表示整数</p><p>在Python中使用以下方式表示二进制数和十六进制数：</p><ul><li>二进制数都是由数字0、1组成，逢2进1。在Python中，二进制整数使用前缀0b表示，例如：0b0110, 0b1100</li><li>八进制数都是由数字0~7的数字组成，逢8进1。在Python中，八进制整数使用前缀0o表示，例如：0o123, 0o657</li><li>十六进制数除了0<del>9十个数字以外，还使用a</del>f表示10~15的数字，逢16进1。在Python中，十六进制使用前缀0x，例如：0x12ef, 0xde24</li></ul><p>十进制数、二进制数和十六进制数之间是可以相互转换的，下篇文章会讲解python中不同进制转换的函数</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><h3 id="什么是浮点数"><a href="#什么是浮点数" class="headerlink" title="什么是浮点数"></a>什么是浮点数</h3><p>浮点数对应我们生活的是小数，例如：0.1, 3.1415926, -0.5, -12.34 等等都是浮点数</p><h3 id="为什么小数在计算机领域被称为浮点数？"><a href="#为什么小数在计算机领域被称为浮点数？" class="headerlink" title="为什么小数在计算机领域被称为浮点数？"></a>为什么小数在计算机领域被称为浮点数？</h3><p>这是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的（可浮动的），例如：1.23x10^9和12.3x10^8是相等的，因此称为浮点数</p><p>浮点数可以用数学写法，例如：1.23，3.14，-9.01，但是对于很大或很小的浮点数，就必须用科学计数法表示</p><p>在Python中，把10^用e替代，例如：1.23x10^9就可写为1.23e9或者12.3e8，0.000012可以写成1.2e-5</p><h3 id="关于浮点数运算的误差"><a href="#关于浮点数运算的误差" class="headerlink" title="关于浮点数运算的误差"></a>关于浮点数运算的误差</h3><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算可能会有四舍五入的误差</p><p>我们在Python终端中输入<code>0.1 + 0.2</code>，期望的结果是0.3，看看得到的真实结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype/1.png" alt=""></p><p>真实结果和我们所期望的值不一样，这就是浮点数运算所带来的误差</p><p>这里的原理涉及到了科学计数法底层的运算，如果感兴趣的可以自己进一步的学习原理层面的知识</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串表示记录文本信息的一种形式，对应生活中的就是非数字类型的内容，比如一个句子，一段话在Python中就是字符串</p><p>在Python中，字符串是用单引号（’ ‘）或者双引号（” “）括起来的任意文本，例如：<code>&#39;abc&#39;</code>, <code>&quot;xyz&quot;</code>等等都是字符串</p><p><strong><em>TIPS:</em></strong> 单双引号只是一种表示方式，不是字符串的一部分，因此字符串’abc’只有a，b，c这3个字符</p><p>如果要表示多行字符串，可以直接在需要换行的地方添加 <code>\n</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Line 1\nLine 2\nLine 3&#39;</span><br></pre></td></tr></table></figure><p>也可以用叁引号（’’’ ‘’’）括起来表示，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值对应于生活中的就是对和错</p><p>在计算机的世界里，大部分判断都是非错则对的，一个布尔值只有True、False两种值，要么是True，要么是False</p><p>在Python中，可以直接用True、False表示布尔值（请注意大小写，不需要使用字符串符号括起来）</p><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是Python里一个特殊的值，用None表示</p><p><strong><em>TIPS:</em></strong> None和0是不一样的，None不能理解为0，因为0是有意义的</p><p>比如我有0个苹果表示我没有苹果，0表达的是数值0的意思</p><p>而不能表示为我有None个苹果，None是一个特殊的空值</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是数据类型&quot;&gt;&lt;a href=&quot;#什么是数据类型&quot; class=&quot;headerlink&quot; title=&quot;什么是数据类型&quot;&gt;&lt;/a&gt;什么是数据类型&lt;/h2&gt;&lt;p&gt;计算机顾名思义就是可以做数学计算的机器，因此计算机程序理所当然地可以处理各种数值&lt;/p&gt;
&lt;p&gt;但是计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据&lt;/p&gt;
&lt;p&gt;不同种类的数据，就需要定义不同的数据类型来存储，认识编程中的不同数据类型是非常有必要的&lt;/p&gt;
&lt;p&gt;Python中能够直接处理的有 &lt;strong&gt;&lt;em&gt;整数、浮点数、字符串、布尔类型、空值&lt;/em&gt;&lt;/strong&gt; 五种数据类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
</feed>
