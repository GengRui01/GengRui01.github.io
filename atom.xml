<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gengrui01.github.io/"/>
  <updated>2021-02-28T09:52:53.508Z</updated>
  <id>https://gengrui01.github.io/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis简介</title>
    <link href="https://gengrui01.github.io/article/20210227.html"/>
    <id>https://gengrui01.github.io/article/20210227.html</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射</p><p>与其它ORM框架不同，MyBatis没有将Java对象与数据表关联起来，而是作为Java方法和SQL语句的桥梁，我们一般称它为半ORM框架</p><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>方便地定制化SQL，操作数据库对象</li><li>使用简单的XML或注解来配置和映射原生类、接口和Java的POJO为数据库中的记录</li><li>提供强大的动态SQL功能，可以更加灵活地使用SQL语句</li><li>提供插件增强机制，可以轻松集成其它插件</li></ul><h2 id="Hibernate与MyBatis对比"><a href="#Hibernate与MyBatis对比" class="headerlink" title="Hibernate与MyBatis对比"></a>Hibernate与MyBatis对比</h2><ul><li>Hibernate<ul><li>全自动化ORM框架，数据库移植性好，基础业务几乎不需要写SQL</li><li>易学难精，上手简单但熟练使用需要阅读大量文档，框架结构复杂</li></ul></li><li>MyBatis<ul><li>半自动化ORM框架，数据库移植性一般，基础业务仍需写SQL，但可以通过基础Mapper来简化</li><li>易学易用，上手简单，结构精简清晰，易深入学习</li></ul></li></ul><p>对比结果：</p><ul><li>Hibernate适合在需求明确、业务固定的项目中使用，如OA、ERP项目</li><li>MyBatis适合在需求多变，快速迭代的项目中使用，如互联网的电商项目</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射&lt;/p&gt;
&lt;p&gt;与其它ORM框架不同，MyBatis没有将Java对象与数据表关联起来，而是作为Java方法和SQL语句的桥梁，我们一般称它为半ORM框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://gengrui01.github.io/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>ORM程序技术</title>
    <link href="https://gengrui01.github.io/article/20210226.html"/>
    <id>https://gengrui01.github.io/article/20210226.html</id>
    <published>2021-02-25T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC操作数据库步骤"><a href="#JDBC操作数据库步骤" class="headerlink" title="JDBC操作数据库步骤"></a>JDBC操作数据库步骤</h2><p><a href="https://gengrui01.github.io/article/20181025.html">JDBC连接及操作数据库</a></p><ol><li>注册驱动</li><li>获取连接</li></ol><a id="more"></a><ol start="3"><li>获取statement对象</li><li>执行SQL语句返回结果集</li><li>遍历结果集</li><li>关闭连接释放资源</li></ol><p>原生JDBC连接及操作数据库有几个缺点：</p><ul><li>某条语句执行失败时的处理逻辑非常复杂</li><li>要对其中某些业务逻辑做修改，改动代码量较大</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>ORM是对象(Object)、关系(Relational)、映射(Mapping)的缩写，是一种用于实现面向对象编程语言里不同类型系统的数据之间转换的程序技术</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>Java是一门面向对象语言，几乎所有的程序中都存在对象和关系数据库</p><p>当对象信息发生变化的时候，我们需要去改数据库中的数据</p><p>ORM会把对SQL的操作转换为对象的操作，从而让程序员使用起来更加方便和易于接受</p><p>一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录，类的每个属性对应表的每个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">    Integer gender;</span><br><span class="line">    Date birthday;</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>birthday</th></tr></thead><tbody><tr><td>1</td><td>Anne</td><td>female</td><td>1999-01-01</td></tr><tr><td>2</td><td>Bob</td><td>male</td><td>1998-08-21</td></tr></tbody></table><p>由于类和表之间、属性和字段之间建立起了映射关系，所以SQL对表的操作就可以转换为对象的操作</p><p>程序员从此无需编写SQL语句，由框架根据对象的变化及映射关系自动生成SQL语句，这就是ORM的作用</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>提高了开发效率。由于ORM可以自动对Entity对象与数据库中的Table进行字段与属性的映射，所以我们实际可能已经不需要一个专用的、庞大的数据访问层。 </li><li>ORM提供了对数据库的映射，不用SQL直接编码，能够像操作对象一样从数据库获取数据</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JDBC操作数据库步骤&quot;&gt;&lt;a href=&quot;#JDBC操作数据库步骤&quot; class=&quot;headerlink&quot; title=&quot;JDBC操作数据库步骤&quot;&gt;&lt;/a&gt;JDBC操作数据库步骤&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gengrui01.github.io/article/20181025.html&quot;&gt;JDBC连接及操作数据库&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册驱动&lt;/li&gt;
&lt;li&gt;获取连接&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://gengrui01.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC简介</title>
    <link href="https://gengrui01.github.io/article/20210225.html"/>
    <id>https://gengrui01.github.io/article/20210225.html</id>
    <published>2021-02-24T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>SpringMVC是Spring生态圈中的WEB-MVC框架</p><a id="more"></a><h2 id="SpringMVC和Spring的关系"><a href="#SpringMVC和Spring的关系" class="headerlink" title="SpringMVC和Spring的关系"></a>SpringMVC和Spring的关系</h2><p>由于Spring的概念有狭义广义两种理解方式，SpringMVC和Spring的关系可以从如下两个角度理解：</p><ul><li>水平角度：SpringMVC是Spring生态圈中的一个功能模块，两者是包含与被包含的关系；</li><li>垂直角度：SpringMVC是建立在Spring核心功能之上的一个WEB-MVC框架，是Spring核心功能的延伸和扩展。</li></ul><h2 id="Struts2与SpringMVC对比"><a href="#Struts2与SpringMVC对比" class="headerlink" title="Struts2与SpringMVC对比"></a>Struts2与SpringMVC对比</h2><ul><li>Struts2很多功能也需要借助于Spring实现，SpringMVC和Spring有直属血缘的关系，两者吻合度更高</li><li>使用SpringMVC时所需要的其他逻辑组件都经由IOC创建Spring容器管理，可根据组件特性保证其线程安全性</li><li>SpringMVC利用DI功能，能轻松地装配好各组件之间的依赖，开发者只需要关注编写自己的业务逻辑便可</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;SpringMVC是Spring生态圈中的WEB-MVC框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringMVC" scheme="https://gengrui01.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>MVC设计模式</title>
    <link href="https://gengrui01.github.io/article/20210224.html"/>
    <id>https://gengrui01.github.io/article/20210224.html</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB应用"><a href="#WEB应用" class="headerlink" title="WEB应用"></a>WEB应用</h2><p>WEB应用程序的主流开发技术有 3 种：</p><ul><li>Servlet</li><li>PHP</li><li>.net</li></ul><a id="more"></a><p>Servlet是基于Java语言的动态WEB开发技术，Servlet指的是J2EE中所提出来的企业级服务器开发规范。</p><p>理论上讲，每一次不同的http请求需要一个Servlet组件来响应，当请求类型比较多时，Servlet就会相应增加，也意味着每一个Servlet都可以成为进入服务器的入口。</p><p>原生Servlet构建的MVC开发模式有几个缺点：</p><ul><li>Servlet本身采用单例设计模式，生命周期由服务器维护，存在线程安全隐患的问题；</li><li>随着Servlet数量的增加，对服务器的存储空间也会产生压力；</li><li>使用Servlet响应用户请求时，每一个响应逻辑都需要开发者不厌其烦地做些重复的事情，如，解析请求包中的数据、构建响应包、设置页面跳转等等。</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>MVC是模型(Model)、视图(View)、控制器(Controller)的缩写，是一种分离显示业务逻辑、数据和界面的设计模式</p><h2 id="组件关系"><a href="#组件关系" class="headerlink" title="组件关系"></a>组件关系</h2><ul><li>模型（Model）表示应用程序核心，是应用程序中用于处理应用程序数据逻辑的部分，通常负责在数据库中存取数据。</li><li>视图（View）用来显示数据，是应用程序中处理数据显示的部分，通常View是依据Model的数据而创建的。</li><li>控制器（Controller）用来处理用户输入并调用模型和视图来满足用户的需求，是应用程序中处理用户交互的部分，通常Controller负责从View读取数据，控制用户输入，并向Model发送数据。</li></ul><h2 id="请求响应流程"><a href="#请求响应流程" class="headerlink" title="请求响应流程"></a>请求响应流程</h2><p><img src="https://gengrui01.github.io/picture/mvc/2.png" alt=""></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>低耦合性：MVC的视图层和业务层是分离的，如果项目的业务流程或业务规则有所更改，只需要更改MVC的Model层，不需要重新更改编译View和Controller的代码内容。</li><li>高可重用性：MVC模式允许不同类型的View访问相同的服务器端代码，多个View可以共享一个Model，它包括任何WEB浏览器(HTTP)或无线浏览器(WAP)，因为这些表示所需要改变的只有View层的实现方式，Model层和Controller层不需要做任何改变。</li><li>低生命周期成本：MVC降低了用户界面开发和维护的技术需求，从而降低了生命周期成本</li><li>快速部署：使用MVC模式可以大大缩短开发时间，允许后端开发人员只关注业务逻辑，而前端开发人员只需要关注页面的表现形式。</li><li>高可维护性：前后端分离使得WEB应用程序更易于维护和修改。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WEB应用&quot;&gt;&lt;a href=&quot;#WEB应用&quot; class=&quot;headerlink&quot; title=&quot;WEB应用&quot;&gt;&lt;/a&gt;WEB应用&lt;/h2&gt;&lt;p&gt;WEB应用程序的主流开发技术有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;.net&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://gengrui01.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring简介</title>
    <link href="https://gengrui01.github.io/article/20210223.html"/>
    <id>https://gengrui01.github.io/article/20210223.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用Spring？"><a href="#为什么使用Spring？" class="headerlink" title="为什么使用Spring？"></a>为什么使用Spring？</h2><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring官网</a></p><p>Spring官网首页滚动显示如下内容：</p><a id="more"></a><p><em>Spring makes Java simple.</em></p><p><em>Spring makes Java modern.</em></p><p><em>Spring makes Java productive.</em></p><p><em>Spring makes Java reactive.</em></p><p><em>Spring makes Java cloud-ready.</em></p><p>Spring使Java简单易用、紧跟时代、复用性强、快速响应、云就绪。</p><p><img src="https://gengrui01.github.io/picture/spring/2.png" alt=""></p><h2 id="体系结构介绍"><a href="#体系结构介绍" class="headerlink" title="体系结构介绍"></a>体系结构介绍</h2><p><img src="https://gengrui01.github.io/picture/spring/1.png" alt=""></p><p>结构图阐释：</p><ul><li>Data Access/Integration：持久层 是Spring对数据持久化、事务管理的支持。SpringDataJpa就是其中的一种</li><li>Web：表现层 是Spring对表现层数据的处理部分的支持。SpirngMVC就是其中的一种</li><li>Test：测试层 是Spring对项目提供的一个完整测试环境</li><li>中间的两部分 是Spring框架的核心功能</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Spring刚出世时，仅提供了一些核心功能模块</p><p>其中IOC&amp;DI和AOP两大两大核心模块对企业项目开发过程产生了巨大的影响</p><p>后来，Spring在核心功能的的基础之上，延伸出更多的功能模块</p><p>由这些功能模块为企业项目开发提供了较完整的、全方位的解决方案</p><p>所以Spring概念在狭义及广义角度理解不同：</p><ul><li>狭义角度：Spring指的是Spring框架核心功能模块</li><li>广义角度：Spring是一个提供了众多功能模块的生态圈</li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="控制反转-IOC-amp-依赖注入-DI"><a href="#控制反转-IOC-amp-依赖注入-DI" class="headerlink" title="控制反转(IOC) &amp; 依赖注入(DI)"></a>控制反转(IOC) &amp; 依赖注入(DI)</h3><h4 id="控制反转-IOC"><a href="#控制反转-IOC" class="headerlink" title="控制反转(IOC)"></a>控制反转(IOC)</h4><p>简单理解IOC是一种设计模式，将实例化对象的控制权由手动的new变成了Spring框架通过反射机制实例化，并将对象的实例存入在容器种进行管理</p><h4 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h4><p>首先理解依赖，程序运行的需要可以称之为依赖</p><p>如果一个类中的某个属性是另一个类，该属性无需手动赋值，通过Spring的配置文件或者注解，通过Spring框架可以实现直接注入属性</p><h4 id="IOC-amp-DI-联合使用"><a href="#IOC-amp-DI-联合使用" class="headerlink" title="IOC &amp; DI 联合使用"></a>IOC &amp; DI 联合使用</h4><p>B类中需要使用A类时：</p><ul><li>未引入Spring框架</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引入Spring框架后</li></ul><p><img src="https://gengrui01.github.io/picture/spring/3.png" alt=""></p><h3 id="面向切面编程-AOP"><a href="#面向切面编程-AOP" class="headerlink" title="面向切面编程(AOP)"></a>面向切面编程(AOP)</h3><p>首先理解切面，切面是数学中的一个概念，和球面只有一个交点的平面称作球的切面，而接触点称作切点</p><p>在Spring中，切面编程指的就是在程序运行某个方法的时候，不修改原始执行代码逻辑，由程序动态地执行某些额外的功能，对原有的方法做增强，这就叫做面向切面编程，那个被监测的执行方法，称呼为切入点。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>Spring框架以控制反转(IOC)和面向切面编程(AOP)为内核，提供了展现层(SpringMVC)、持久层(SpringJDBC)、业务层事务管理等众多的企业级应用技术，还能整合其他第三方开源框架和类库。</p><p>对于对象的实例管理更加方便，代码编写更加优雅，降低代码的耦合性，提升代码的可扩展性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么使用Spring？&quot;&gt;&lt;a href=&quot;#为什么使用Spring？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Spring？&quot;&gt;&lt;/a&gt;为什么使用Spring？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring官网首页滚动显示如下内容：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://gengrui01.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>SSH和SSM的区别</title>
    <link href="https://gengrui01.github.io/article/20210222.html"/>
    <id>https://gengrui01.github.io/article/20210222.html</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH-amp-SSM"><a href="#SSH-amp-SSM" class="headerlink" title="SSH &amp; SSM"></a>SSH &amp; SSM</h2><p>SSH是Spring+Struts2+Hibernate的缩写，是一种较主流的Java企业级应用框架。</p><p>SSM是Spring+SpringMVC+MyBatis的缩写，是继SSH之后，目前比较主流的Java企业级应用框架。</p><a id="more"></a><p>本质上都是Spring框架+MVC模式框架+ORM技术框架</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><img src="https://gengrui01.github.io/picture/ssh-ssm-difference/1.png" alt=""></p><p><a href="https://gengrui01.github.io/article/20210223.html">Spring简介</a></p><h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gengrui01.github.io/picture/ssh-ssm-difference/2.png" alt=""></p><p>Struts2是一个基于 <a href="https://gengrui01.github.io/article/20210224.html">MVC设计模式</a> 的表现层框架，Struts2作为控制器来建立模型与视图的数据交互。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>校验较繁琐，多字段时出错返回不同。</li><li>安全性太低。</li><li>获取传参时较麻烦</li></ul><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p><img src="https://gengrui01.github.io/picture/ssh-ssm-difference/3.png" alt=""></p><p><a href="https://gengrui01.github.io/article/20210225.html">SpringMVC简介</a></p><h2 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gengrui01.github.io/picture/ssh-ssm-difference/4.png" alt=""></p><p>Hibernate是一个基于 <a href="https://gengrui01.github.io/article/20210226.html">ORM程序技术</a> 的持久层框架，与各种数据库，SQL语句打交道，是数据持久化的一种解决方案。</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>持久层封装过于完整，导致开发人员无法对SQL进行优化，无法灵活应用原生SQL</li><li>批量数据处理能力较弱势</li><li>导致配置过于复杂，遇到大项目，维护和问题不断</li></ul><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p><img src="https://gengrui01.github.io/picture/ssh-ssm-difference/5.png" alt=""></p><p><a href="https://gengrui01.github.io/article/20210227.html">MyBatis简介</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSH-amp-SSM&quot;&gt;&lt;a href=&quot;#SSH-amp-SSM&quot; class=&quot;headerlink&quot; title=&quot;SSH &amp;amp; SSM&quot;&gt;&lt;/a&gt;SSH &amp;amp; SSM&lt;/h2&gt;&lt;p&gt;SSH是Spring+Struts2+Hibernate的缩写，是一种较主流的Java企业级应用框架。&lt;/p&gt;
&lt;p&gt;SSM是Spring+SpringMVC+MyBatis的缩写，是继SSH之后，目前比较主流的Java企业级应用框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://gengrui01.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>安装MySQL并配置环境变量(以MySQL8为例)</title>
    <link href="https://gengrui01.github.io/article/20210221.html"/>
    <id>https://gengrui01.github.io/article/20210221.html</id>
    <published>2021-02-20T16:00:00.000Z</published>
    <updated>2021-02-22T01:48:31.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官方下载地址：<a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">MySQL :: MySQL Downloads</a> </p><p>这是MySQL的官方下载页面，我们安装社区版的MySQL，页面下拉点击“MySQL Community (GPL) Downloads”按钮</p><a id="more"></a><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/1.png" alt=""></p><p>接下来跳转到这个页面，点击下载社区版的服务器</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/2.png" alt=""></p><p>确认我们的电脑系统，下载免安装版</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/3.png" alt=""></p><p>此时需要注册用户并登录，我们可以点击下方的“No thanks, just start my download.”按钮跳过登录直接下载</p><p>等待压缩包下载完成即可</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/4.png" alt=""></p><p>把下载完成的压缩包解压到指定目录下，要注意路径中不能有中文</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/5.png" alt=""></p><h2 id="配置初始化的my-ini文件"><a href="#配置初始化的my-ini文件" class="headerlink" title="配置初始化的my.ini文件"></a>配置初始化的my.ini文件</h2><p>在解压后的目录下自行创建my.ini配置文件，使用记事本打开后写入如下配置：</p><p>其中安装目录和数据库的数据的存放目录需要根据自己的安装目录进行调整，要和解压后的文件夹目录一致</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=解压后的文件夹目录 例如：D:\\software\mysql-<span class="number">8.0</span>.<span class="number">23</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=解压后的文件夹目录后加“\Data” 例如：D:\\software\mysql-<span class="number">8.0</span>.<span class="number">23</span>-winx64\Data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure><p>这里需要注意我们的数据存放目录为“安装目录\Data”，Data文件夹不需要自己创建</p><h2 id="安装服务并初始化"><a href="#安装服务并初始化" class="headerlink" title="安装服务并初始化"></a>安装服务并初始化</h2><p>虽然我我们下载的是免安装版，还是要用命令安装MySQL服务并且初始化MySQL</p><p>以管理员身份打开控制台，一定要是管理员身份，否则后续部分命令会出现权限错误，点此链接查看<a href="https://jingyan.baidu.com/article/86fae346e586323c49121a00.html" target="_blank" rel="noopener">如何以管理员身份打开CMD控制台（详解-百度经验）</a></p><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><p>转到mysql安装目录的bin目录下</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/6.png" alt=""></p><p>使用<code>.\mysqld --install</code>命令安装MySQL服务</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/7.png" alt=""></p><h3 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h3><p>使用<code>.\mysqld --initialize --console</code>命令初始化MySQL</p><p>初始化会产生一个随机密码，需要复制下来，后面第一次登录会用到</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/8.png" alt=""></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>使用<code>net start mysql</code>命令开启mysql的服务</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/9.png" alt=""></p><p>使用MySQL登录命令<code>mysql -u root -p随机密码</code>，出现如下界面表示安装成功</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/10.png" alt=""></p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>使用如下SQL语句修改root用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">"root"</span>@<span class="string">"localhost"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"新的密码"</span>;</span><br></pre></td></tr></table></figure><p>提示“Query OK”表示命令执行成功</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/11.png" alt=""></p><p>退出登陆后使用新密码登录，验证密码是否修改成功</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/12.png" alt=""></p><p>关闭控制台</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>复制MySQL安装目录下bin目录绝对路径</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/15.png" alt=""></p><p>鼠标右键我的电脑-属性 会进入到可以查看计算机基本信息的系统页</p><p>点击左侧“高级系统设置” 会弹出“系统属性”对话框</p><p>之后点击“环境变量” 会弹出“环境变量”对话框</p><p>选中用户变量下的PATH变量，点击“编辑”</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/13.png" alt=""></p><p>弹出“编辑环境变量”对话框，点击新建，粘贴刚才复制的MySQL安装目录下bin目录绝对路径，点击确定</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/14.png" alt=""></p><p>依次点击“环境变量”对话框和“系统属性”对话框中的确定按钮，完成MySQL环境变量配置</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/16.png" alt=""></p><h3 id="检测环境变量是否配置成功"><a href="#检测环境变量是否配置成功" class="headerlink" title="检测环境变量是否配置成功"></a>检测环境变量是否配置成功</h3><p>WIN+R键打开运行框，输入<code>cmd</code>点击确定打开控制台</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/16.png" alt=""></p><p>输入<code>mysql -u root -p自设密码</code>验证是否可直接登录，登录成功表示配置成功</p><p><img src="https://gengrui01.github.io/picture/mysql-install-configurate/17.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;官方下载地址：&lt;a href=&quot;https://www.mysql.com/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL :: MySQL Downloads&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;这是MySQL的官方下载页面，我们安装社区版的MySQL，页面下拉点击“MySQL Community (GPL) Downloads”按钮&lt;/p&gt;
    
    </summary>
    
    
      <category term="安装与配置" scheme="https://gengrui01.github.io/categories/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>安装JDK并配置环境变量(以Java8为例)</title>
    <link href="https://gengrui01.github.io/article/20210220.html"/>
    <id>https://gengrui01.github.io/article/20210220.html</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-22T01:45:57.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官方下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">JavaSE-Downloads</a> </p><p>这是所有版本JDK的下载页面，我们安装Java8版本，往下拉找到JavaSE8，单击JDK Download</p><a id="more"></a><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/1.png" alt=""></p><p>在Java SE Development Kit 8u281中找到自己的电脑版本，点击右侧下载按钮</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/2.png" alt=""></p><p>勾选接受协议，点击下载</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/3.png" alt=""></p><p>此时需要注册用户并登录</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/4.png" alt=""></p><p>登录成功后会自动下载，等待安装包下载完成</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>双击打开下载好的安装包，点击下一步即可</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/5.png" alt=""></p><p>点击“更改”可以修改安装路径，修改时要注意路径中不能有中文</p><p>也可以使用默认路径不做修改（要记住这个路径，之后配置环境变量会用到）</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/6.png" alt=""></p><p>我们安装的JDK中已经包含了JRE，所以不需要安装“公共JRE”</p><p>点击“公共JRE”前面的下拉框，选择第三项“此功能将不可用”</p><p>选择好后如下图所示，“公共JRE”前面会变成红色的“X”，之后点击下一步</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/7.png" alt=""></p><p>之后等待安装</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/8.png" alt=""></p><p>安装完成会弹出如下页面，点击关闭</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/9.png" alt=""></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="新建JAVA-HOME环境变量"><a href="#新建JAVA-HOME环境变量" class="headerlink" title="新建JAVA_HOME环境变量"></a>新建JAVA_HOME环境变量</h3><p>鼠标右键我的电脑-属性 会进入到可以查看计算机基本信息的系统页</p><p>点击左侧“高级系统设置” 会弹出“系统属性”对话框</p><p>之后点击“环境变量” 会弹出“环境变量”对话框</p><p>在用户变量下点击“新增”</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/10.png" alt=""></p><p>新建一个用户变量，变量名为 <code>JAVA_HOME</code> ，变量值为刚才的安装路径，之后点击确定</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/11.png" alt=""></p><h3 id="编辑PATH变量"><a href="#编辑PATH变量" class="headerlink" title="编辑PATH变量"></a>编辑PATH变量</h3><p>选中PATH变量，点击“编辑”</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/12.png" alt=""></p><p>弹出“编辑环境变量”对话框</p><p>新建两个PATH变量分别是<code>%JAVA_HOME%\bin</code>和<code>%JAVA_HOME%\jre\bin</code></p><p>两个PATH变量都新建好后点击确定</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/13.png" alt=""></p><h3 id="新建JAVA-HOME环境变量-1"><a href="#新建JAVA-HOME环境变量-1" class="headerlink" title="新建JAVA_HOME环境变量"></a>新建JAVA_HOME环境变量</h3><p>继续在“环境变量”对话框中的用户变量下点击“新增”</p><p>输入变量名<code>CLASSPATH</code>，变量值<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;</code>，点击确定</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/14.png" alt=""></p><p>依次点击“环境变量”对话框和“系统属性”对话框中的确定按钮，完成JDK环境变量配置</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/15.png" alt=""></p><h3 id="检测环境变量是否配置成功"><a href="#检测环境变量是否配置成功" class="headerlink" title="检测环境变量是否配置成功"></a>检测环境变量是否配置成功</h3><p>WIN+R键打开运行框，输入<code>cmd</code>点击确定打开控制台</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/16.png" alt=""></p><p>分别输入<code>java -version</code>和<code>javac -version</code>查看JDK版本，结果如图所示表示安装及配置成功</p><p><img src="https://gengrui01.github.io/picture/jdk-install-configurate/17.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;官方下载地址：&lt;a href=&quot;https://www.oracle.com/java/technologies/javase-downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaSE-Downloads&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;这是所有版本JDK的下载页面，我们安装Java8版本，往下拉找到JavaSE8，单击JDK Download&lt;/p&gt;
    
    </summary>
    
    
      <category term="安装与配置" scheme="https://gengrui01.github.io/categories/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>git的安装与配置</title>
    <link href="https://gengrui01.github.io/article/20210219.html"/>
    <id>https://gengrui01.github.io/article/20210219.html</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2021-02-19T12:32:46.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h2><p>官方下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git-Downloads</a> </p><p>安装方法：无特殊需求直接下一步即可</p><a id="more"></a><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>设置Git的用户名和邮件地址（邮箱就是注册Github时候的邮箱）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"gengrui01"</span></span><br><span class="line">$ git config --global user.email <span class="string">"12******09@qq.com"</span></span><br></pre></td></tr></table></figure><h2 id="Git-GitHub建立联系（SSH）"><a href="#Git-GitHub建立联系（SSH）" class="headerlink" title="Git-GitHub建立联系（SSH）"></a>Git-GitHub建立联系（SSH）</h2><h3 id="删除原有SSH配置"><a href="#删除原有SSH配置" class="headerlink" title="删除原有SSH配置"></a>删除原有SSH配置</h3><p>检查电脑是否有ssh配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>出现下面提示表示无ssh配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls: cannot access <span class="string">'/c/Users/HUAWEI/.ssh'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>如果未提示上述内容表示已经有ssh配置，需要删除用户文件夹下.ssh文件夹中的所有文件</p><h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>键入命令，注意这里需要输入注册Github时候的邮箱地址，停顿的地方一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"12******09@qq.com"</span></span><br></pre></td></tr></table></figure><p>之后键入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent -s</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>如果出现如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure><p>先执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure><p>再重新执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="添加SSH密钥到GitHub账户"><a href="#添加SSH密钥到GitHub账户" class="headerlink" title="添加SSH密钥到GitHub账户"></a>添加SSH密钥到GitHub账户</h3><p>执行如下命令复制密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>之后打开GitHub<a href="https://github.com/GengRui01" target="_blank" rel="noopener">https://github.com/GengRui01</a> ，其中“GengRui01”为用户名</p><p>按下图步骤打开设置页</p><p><img src="https://gengrui01.github.io/picture/git-install-configurate/1.png" alt=""></p><p>单击左边标签栏中的 SSH and GPG keys 打开密钥管理页</p><p>单击 New SSH key 添加SSH密钥</p><p><img src="https://gengrui01.github.io/picture/git-install-configurate/2.png" alt=""></p><p>title可以随意输入，key直接粘贴刚才复制好的密钥即可</p><p><img src="https://gengrui01.github.io/picture/git-install-configurate/3.png" alt=""></p><p>最后点击添加按钮完成SSH密钥添加</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载并安装&quot;&gt;&lt;a href=&quot;#下载并安装&quot; class=&quot;headerlink&quot; title=&quot;下载并安装&quot;&gt;&lt;/a&gt;下载并安装&lt;/h2&gt;&lt;p&gt;官方下载地址：&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git-Downloads&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;安装方法：无特殊需求直接下一步即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="安装与配置" scheme="https://gengrui01.github.io/categories/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA安装破解教程(转发)</title>
    <link href="https://gengrui01.github.io/article/20210218.html"/>
    <id>https://gengrui01.github.io/article/20210218.html</id>
    <published>2021-02-17T16:00:00.000Z</published>
    <updated>2021-02-20T05:39:05.126Z</updated>
    
    <content type="html"><![CDATA[<p>此文章为转载文章</p><p>原文作者：<a href="https://www.cnblogs.com/heathhou/" target="_blank" rel="noopener">诸葛借剑</a></p><p>原文平台：<a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></p><p>原文链接：<a href="https://www.cnblogs.com/heathhou/p/14017570.html" target="_blank" rel="noopener">IDEA安装破解教程</a></p><a id="more"></a><p>如下是正文内容：</p><hr><h2 id="一、-下载安装包"><a href="#一、-下载安装包" class="headerlink" title="一、 下载安装包"></a>一、 下载安装包</h2><h3 id="1-1-方式1-百度网盘链接"><a href="#1-1-方式1-百度网盘链接" class="headerlink" title="1.1 方式1 百度网盘链接"></a>1.1 方式1 百度网盘链接</h3><p>链接：<a href="https://pan.baidu.com/s/1EomVhSv1dy2znZEhMM-bYw" target="_blank" rel="noopener">单击此处百度网盘下载</a></p><p>提取码：68m8</p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/1.png" alt=""></p><h3 id="1-2-方式2-官网下载"><a href="#1-2-方式2-官网下载" class="headerlink" title="1.2 方式2 官网下载"></a>1.2 方式2 官网下载</h3><p><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">单击此处官网下载</a></p><h2 id="二、-安装IDEA"><a href="#二、-安装IDEA" class="headerlink" title="二、 安装IDEA"></a>二、 安装IDEA</h2><ol><li>双击 ideaIU-2020.1.exe</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/2.png" alt=""></p><ol start="2"><li>跟着图片走</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/3.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/4.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/5.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/6.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/7.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/8.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/9.png" alt=""></p><ol start="3"><li>安装完毕</li></ol><h2 id="三、-破解IDEA"><a href="#三、-破解IDEA" class="headerlink" title="三、 破解IDEA"></a>三、 破解IDEA</h2><ol><li>在IDEA的安装路径旁 新创建一个文件夹，不要有中文。将第一步骤下载的 其他三个文件 移动到 这个新创建的文件夹中</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/10.png" alt=""></p><ol start="2"><li>进入启动页，把jetbrains-agent-latest.jar拖入到启动页</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/11.png" alt=""></p><ol start="3"><li>点击【为IDEA安装】</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/12.png" alt=""></p><ol start="4"><li>跟着图片走</li></ol><p><img src="https://gengrui01.github.io/picture/idea-install-crack/13.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/14.png" alt=""></p><p><img src="https://gengrui01.github.io/picture/idea-install-crack/15.png" alt=""></p><ol start="5"><li>破解完成</li></ol><hr><p>此文章为转载文章</p><p>原文作者：<a href="https://www.cnblogs.com/heathhou/" target="_blank" rel="noopener">诸葛借剑</a></p><p>原文平台：<a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></p><p>原文链接：<a href="https://www.cnblogs.com/heathhou/p/14017570.html" target="_blank" rel="noopener">IDEA安装破解教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章为转载文章&lt;/p&gt;
&lt;p&gt;原文作者：&lt;a href=&quot;https://www.cnblogs.com/heathhou/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;诸葛借剑&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文平台：&lt;a href=&quot;https://www.cnblogs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/heathhou/p/14017570.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA安装破解教程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="安装与配置" scheme="https://gengrui01.github.io/categories/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>博客改版</title>
    <link href="https://gengrui01.github.io/article/20200718.html"/>
    <id>https://gengrui01.github.io/article/20200718.html</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2021-02-19T12:32:46.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="改版计划及目前进度"><a href="#改版计划及目前进度" class="headerlink" title="改版计划及目前进度"></a>改版计划及目前进度</h2><p>博客改版开始啦，这次的改版主要将博客主题修改为简洁轻量的<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a>主题</p><a id="more"></a><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>在每次完成文档修改后执行如下指令完成部署（先生成后上传）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>每次部署完成后执行如下指令完成备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="更换开发环境"><a href="#更换开发环境" class="headerlink" title="更换开发环境"></a>更换开发环境</h2><p>备份的目的是满足异地工作的需求，更换开发环境时只需要安装git和node，执行如下操作即可</p><ol><li>安装IDEA</li></ol><p>IDEA的安装及破解方法见往期文章<a href="https://gengrui01.github.io/article/20210218.html">IDEA的安装与破解</a></p><ol start="2"><li>安装git 配置git</li></ol><p>git的安装及配置方法见往期文章<a href="https://gengrui01.github.io/article/20210219.html">git的安装与配置</a></p><ol start="3"><li><p>idea拉取Hexo-admin备份文件</p></li><li><p>安装hexo</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Hexo-admin</span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ npm install hexo</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;改版计划及目前进度&quot;&gt;&lt;a href=&quot;#改版计划及目前进度&quot; class=&quot;headerlink&quot; title=&quot;改版计划及目前进度&quot;&gt;&lt;/a&gt;改版计划及目前进度&lt;/h2&gt;&lt;p&gt;博客改版开始啦，这次的改版主要将博客主题修改为简洁轻量的&lt;a href=&quot;https://github.com/chaooo/hexo-theme-BlueLake&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BlueLake&lt;/a&gt;主题&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客相关" scheme="https://gengrui01.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>JDBC连接及操作数据库</title>
    <link href="https://gengrui01.github.io/article/20181025.html"/>
    <id>https://gengrui01.github.io/article/20181025.html</id>
    <published>2018-10-24T16:00:00.000Z</published>
    <updated>2021-02-28T09:52:53.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接数据库步骤"><a href="#连接数据库步骤" class="headerlink" title="连接数据库步骤"></a>连接数据库步骤</h2><p>第一步：注册驱动</p><p>第二步：获取连接</p><p>第三步：获取statement对象</p><a id="more"></a><p>第四步：执行SQL语句返回结果集</p><p>第五步：遍历结果集</p><p>第六步：关闭连接释放资源</p><h2 id="传统方式连接数据库"><a href="#传统方式连接数据库" class="headerlink" title="传统方式连接数据库"></a>传统方式连接数据库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//3.获取Statement对象</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"select * from tb_user"</span>);</span><br><span class="line"><span class="comment">//4.执行SQL语句返回结果集</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">System.out.println(resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这种方式连接数据库存在一个重要的问题：</p><p>注册驱动时，当前类和MySQL的驱动类有很强的依赖关系。</p><p>当我们没有驱动类的时候，连编译都不能通过。</p><p>这种调用者与被调用者之间的依赖关系，就叫做程序的耦合，耦合分为高耦合（紧密联系）和低耦合（松散联系）</p><p>我们在开发中，理想的状态应该是编译时不依赖，运行时才依赖。</p><p>要做到编译时不依赖，就需要使用反射来创建类对象。</p><p>即将注册驱动部分的代码稍作修改如下：</p><h2 id="编译时不依赖的数据库连接"><a href="#编译时不依赖的数据库连接" class="headerlink" title="编译时不依赖的数据库连接"></a>编译时不依赖的数据库连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//3.获取Statement对象</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"select * from tb_user"</span>);</span><br><span class="line"><span class="comment">//4.执行SQL语句返回结果集</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">System.out.println(resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做的好处是，我们的类中不再依赖具体的驱动类，此时就算删除mysql的驱动jar包依然可以通过编译，只不过因为没有驱动类所以不能运行罢了。</p><p>不过，此处还有一个问题，就是我们反射类对象的全限定类名称是在java类中写死的，数据库的端口号、用户名密码也是写死的，一旦要修改就等于是要修改源码。<br>自己小打小闹写的代码改源码什么的还好说，但如果是上线项目，改源码势必要停服务器重新编运行。</p><p>这么看来这个问题造成的后果很严重，其实它的解决方法也很简单，使用配置文件配置数据库连接信息就可以啦。</p><h2 id="使用配置文件连接数据库"><a href="#使用配置文件连接数据库" class="headerlink" title="使用配置文件连接数据库"></a>使用配置文件连接数据库</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/ssm</span><br><span class="line"><span class="attr">jdbc.username</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=root</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemoPro</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//读取配置文件db.properties</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(<span class="keyword">new</span> FileInputStream(<span class="string">"db.properties"</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取配置文件中的相关参数值</span></span><br><span class="line">String driver = prop.getProperty(<span class="string">"jdbc.driver"</span>);</span><br><span class="line">String url = prop.getProperty(<span class="string">"jdbc.url"</span>);</span><br><span class="line">String user = prop.getProperty(<span class="string">"jdbc.username"</span>);</span><br><span class="line">String password = prop.getProperty(<span class="string">"jdbc.password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">//3.获取Statement对象</span></span><br><span class="line">PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">"select * from tb_user"</span>);</span><br><span class="line"><span class="comment">//4.执行SQL语句返回结果集</span></span><br><span class="line">ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">System.out.println(resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;连接数据库步骤&quot;&gt;&lt;a href=&quot;#连接数据库步骤&quot; class=&quot;headerlink&quot; title=&quot;连接数据库步骤&quot;&gt;&lt;/a&gt;连接数据库步骤&lt;/h2&gt;&lt;p&gt;第一步：注册驱动&lt;/p&gt;
&lt;p&gt;第二步：获取连接&lt;/p&gt;
&lt;p&gt;第三步：获取statement对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://gengrui01.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="https://gengrui01.github.io/article/20180718.html"/>
    <id>https://gengrui01.github.io/article/20180718.html</id>
    <published>2018-07-17T16:00:00.000Z</published>
    <updated>2021-02-19T12:32:46.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><ul><li>加载<ol><li>找到类文件（通过类的全限定名来获取定义此类的二进制字节流）</li><li>放入方法区（将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构）</li><li>开个入口（生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口）</li></ol></li></ul><a id="more"></a><ul><li>连接<ol><li>校验（检查Class文件的字节流中包含的信息是否符合当前虚拟机的要求）</li><li>准备（为静态变量和静态常量分配内存，并给静态常量赋设定值，静态变量赋初始值）</li><li>解析（jvm将常量池的符号引用替换为直接引用）</li></ol></li><li>初始化(为静态变量赋程序设定的初值，类只有在如下五种情况下会初始化)<ul><li>使用new关键字创建类的实例，或读取或设置一个静态字段的值，或调用静态方法的时候</li><li>通过java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则要首先进行初始化</li><li>当初始化一个类的时候，如果发现其父类没有进行过初始化，则首先触发父类初始化</li><li>当虚拟机启动时，用户需要指定一个主类（包含main()方法的类），虚拟机会首先初始化这个类</li><li>使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REFgetStatic、REFputStatic、RE_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行初始化，则需要先触发其初始化</li></ul></li><li>使用</li><li>卸载</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ol><li>启动类加载器(BootStrapClassLoader)<ul><li>负责加载Java的核心库</li><li>是用原生代码来实现的</li><li>并不继承自java.lang.ClassLoader</li></ul></li><li>扩展类加载器(ExtClassLoader)<ul><li>负责加载Java的扩展库</li><li>在虚拟机实现时提供的扩展库目录里面查找并加载Java类</li></ul></li><li>应用程序类加载器(AppClassLoader)<ul><li>负责加载classpath路径下的Java类</li><li>一般来说 Java应用的类都是由它来完成加载的</li><li>可以通过ClassLoader.getSystemClassLoader()来获取它</li></ul></li><li>用户自定义类加载器<ul><li>用户根据自定义需求，自由的定制加载的逻辑</li><li>一般都继承AppClassLoader，仅仅覆盖findClass()方法，继续遵守双亲委派模型</li></ul></li></ol><p>如上四种类加载器之间存在继承关系，除了引导类加载器外，其他的加载器都可以用getParent()方法获取父类加载器</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类的加载机制是双亲委派机制，工作过程如下：</p><ol><li>当前加载器从自己的缓存中查询是否此类已经加载，有就返回加载好的类（每个类加载器都有自己的加载缓存，已经加载的类都会放入缓存中）</li><li>当前加载器的缓存中没有找到被加载的类的时候，委托父类加载器去加载，父类加载器采用同样的策略，首先查看自己的缓存，然后委托父类的父类去加载，一直到启动类加载器</li><li>当所有的父类加载器都没有加载的时候，再由当前的类加载器加载，并将其放入它自己的缓存中，以便下次有加载请求的时候直接返回</li></ol><p>双亲委派的优点是：</p><ol><li>保证 Java 程序安全稳定运行，Java 核心 API 定义类型不会被随意替换。比如自己写的String.class类就不会被加载</li><li>通过带有优先级的层级关可以避免类的重复加载</li></ol><p><img src="https://gengrui01.github.io/picture/jvm-class-loading/1.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的生命周期&quot;&gt;&lt;a href=&quot;#类的生命周期&quot; class=&quot;headerlink&quot; title=&quot;类的生命周期&quot;&gt;&lt;/a&gt;类的生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加载&lt;ol&gt;
&lt;li&gt;找到类文件（通过类的全限定名来获取定义此类的二进制字节流）&lt;/li&gt;
&lt;li&gt;放入方法区（将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构）&lt;/li&gt;
&lt;li&gt;开个入口（生成一个代表此类的java.lang.Class对象，作为访问方法区这些数据结构的入口）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://gengrui01.github.io/categories/JVM/"/>
    
    
  </entry>
  
</feed>
