<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gengruiblog.cn/"/>
  <updated>2021-06-05T01:50:23.791Z</updated>
  <id>https://www.gengruiblog.cn/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python循环嵌套</title>
    <link href="https://www.gengruiblog.cn/article/20210509.html"/>
    <id>https://www.gengruiblog.cn/article/20210509.html</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2021-06-05T01:50:23.791Z</updated>
    
    <content type="html"><![CDATA[<p>就像多层 <code>if-else</code> 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环</p><p>如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数</p><a id="more"></a><p><strong><em>TIPS:</em></strong> 嵌套循环对于循环的种类没有限制，也就是说for和while可以任意组合，下面举例说明：</p><h2 id="在for循环中嵌入for循环"><a href="#在for循环中嵌入for循环" class="headerlink" title="在for循环中嵌入for循环"></a>在for循环中嵌入for循环</h2><p>输出字符串’ABC’中每个字符和字符串’123’中每个字符的所有排列组合方式</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'ABC'</span></span><br><span class="line">str2 = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> str2:</span><br><span class="line">        print(x + y)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/1.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/2.png" alt=""></p><h2 id="在while循环中嵌入while循环"><a href="#在while循环中嵌入while循环" class="headerlink" title="在while循环中嵌入while循环"></a>在while循环中嵌入while循环</h2><p>输出2~100之间的素数(也称质数，指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数)</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(i%j): </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; i/j) : </span><br><span class="line">        print(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/3.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/4.png" alt=""></p><h2 id="在for循环中嵌入while循环"><a href="#在for循环中嵌入while循环" class="headerlink" title="在for循环中嵌入while循环"></a>在for循环中嵌入while循环</h2><p>打印等腰三角形</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= <span class="number">5</span>-row:</span><br><span class="line">        print(<span class="string">' '</span>,end=<span class="string">''</span>)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= <span class="number">2</span>*row<span class="number">-1</span>:</span><br><span class="line">        print(<span class="string">'*'</span>,end=<span class="string">''</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/5.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/6.png" alt=""></p><h2 id="在while循环中嵌入for循环"><a href="#在while循环中嵌入for循环" class="headerlink" title="在while循环中嵌入for循环"></a>在while循环中嵌入for循环</h2><p>输出99乘法表</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;'</span></span><br><span class="line">row = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> row &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> col &gt; row:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(template.format(row,col,row*col), end=<span class="string">'  '</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    row = row + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/7.png" alt=""></p><p>流程分析：</p><p><img src="https://gengrui01.github.io/picture/python-loop-nesting/8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就像多层 &lt;code&gt;if-else&lt;/code&gt; 嵌套一样，Python语言的循环语句也支持嵌套，允许在一个循环体里面嵌入另一个循环&lt;/p&gt;
&lt;p&gt;如果说没有break或者continue，嵌套后内循环中代码块执行次数 = 外循环执行次数 * 内循环执行次数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python跳出循环</title>
    <link href="https://www.gengruiblog.cn/article/20210508.html"/>
    <id>https://www.gengruiblog.cn/article/20210508.html</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-06-04T12:08:39.644Z</updated>
    
    <content type="html"><![CDATA[<p>循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去</p><p>如果在循环中需要终止循环就会用到 <code>break</code> 语句或者 <code>continue</code> 语句，两者区别如下：</p><ul><li><code>break</code> 语句：跳出整个循环</li><li><code>continue</code> 语句：跳出本次循环，执行下次循环</li></ul><a id="more"></a><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>break</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/1.png" alt=""></p><p>可以看到两种循环都会在 <code>break</code> 之后跳出整个循环</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">break</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/3.png" alt=""></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/4.png" alt=""></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>在while循环（左图）和for循环（右图）中加入 <code>continue</code> 之后的执行流程如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/2.png" alt=""></p><p>可以看到两种循环都会在 <code>continue</code> 之后跳出本次循环，执行下次循环</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:</span><br><span class="line">   var = var - <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">continue</span>            </span><br><span class="line">   print(var)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/5.png" alt=""></p><h4 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(letter)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-outof-loop/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环语句中，while循环条件为真 或者 for循环序列中还有新的元素，循环就会一直进行下去&lt;/p&gt;
&lt;p&gt;如果在循环中需要终止循环就会用到 &lt;code&gt;break&lt;/code&gt; 语句或者 &lt;code&gt;continue&lt;/code&gt; 语句，两者区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; 语句：跳出整个循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; 语句：跳出本次循环，执行下次循环&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python循环语句</title>
    <link href="https://www.gengruiblog.cn/article/20210507.html"/>
    <id>https://www.gengruiblog.cn/article/20210507.html</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-06-04T12:06:44.980Z</updated>
    
    <content type="html"><![CDATA[<p>程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句</p><p>代码里的循环语句主要有两种，一种是while循环一种是for循环</p><a id="more"></a><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">while 判断条件：</span><br><span class="line">    while子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件是否为真</p><p>判断条件为真时执行子逻辑分支操作</p><p>判断条件为假时循环结束</p><p><img src="https://gengrui01.github.io/picture/python-loop/1.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，使用while循环计算1~100的和</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">100</span>:</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    sum = sum + num</span><br><span class="line"></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/2.png" alt=""></p><p>在上述代码中，while的判断条件是num&lt;100</p><p>也就是说，当num&lt;100时循环会继续下去，当num&gt;=100时将跳出循环</p><p>因为num在while循环里面不断加1，最终一定会大于等于100</p><p>因此while循环不会无限进行下去</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><figcaption><span>循环语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">for 元素 in 序列:</span><br><span class="line">   for子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断序列中是否还有新元素</p><p>有新元素时取新元素执行子逻辑分支操作</p><p>没有新元素结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>现在我们来写一段代码，数一数单词 <code>sunny</code> 中有多少个字母</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'sunny'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> str:</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-loop/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序在一般情况下是按顺序执行的，在需要执行一个语句或语句组多次的场景中会用到循环语句&lt;/p&gt;
&lt;p&gt;代码里的循环语句主要有两种，一种是while循环一种是for循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python条件判断</title>
    <link href="https://www.gengruiblog.cn/article/20210504.html"/>
    <id>https://www.gengruiblog.cn/article/20210504.html</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-31T06:45:18.168Z</updated>
    
    <content type="html"><![CDATA[<p>市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作</p><p>在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作</p><a id="more"></a><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><h3 id="语句格式"><a href="#语句格式" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 判断条件:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><p><strong><em>TIPS:</em></strong> 语句格式中需要注意的点有两个:</p><ol><li>在if语句的最后，有一个 <code>:</code></li><li>子逻辑分支代码 明显比上一行代码缩进了4个字符</li></ol><figure class="highlight plain"><figcaption><span>是条件判断的格式，表示接下来是if模块或者else模块的子分支代码块</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也正是因为是子分支代码块，所以需要缩进</span><br><span class="line"></span><br><span class="line">在Python规范中，一般使用 **1个Tab键（推荐）** 或者 4个空格键 作为缩进</span><br><span class="line"></span><br><span class="line">### 执行流程</span><br><span class="line"></span><br><span class="line">判断条件是否为真</span><br><span class="line"></span><br><span class="line">当if条件为真（True）时，执行if的子逻辑分支</span><br><span class="line"></span><br><span class="line">在if条件为假（False）时，执行else的子逻辑分支</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;gengrui01.github.io&#x2F;picture&#x2F;python-if-else&#x2F;2.png)</span><br><span class="line"></span><br><span class="line">### 使用示例</span><br><span class="line"></span><br><span class="line">例如在满分100分的考试中，小于60分的记为不及格，大于60分的记为及格</span><br><span class="line"></span><br><span class="line">现在我们来写一段代码，在输入成绩后自动判断成绩是否及格</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">score &#x3D; 59</span><br><span class="line">if score &lt; 60:</span><br><span class="line">    print(&#39;不及格&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;及格&#39;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/1.png" alt=""></p><p>可以看到程序就会根据score的值判断，走不同的子分支打印出不同的内容</p><p>如果想对达到或者超过60分的学生再进行不同的分类，比如超过90分是卓越，超过80分是优秀超过70分良好</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">59</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">70</span>:</span><br><span class="line">        print(<span class="string">'及格'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">80</span>:</span><br><span class="line">            print(<span class="string">'良好'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> score &lt; <span class="number">90</span>:</span><br><span class="line">                print(<span class="string">'优秀'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/3.png" alt=""></p><p>虽然我们得出了自己需要的结果，但是随着判断条件的增多代码缩进也越来越多，导致代码逻辑看起来也不够清晰</p><p>为了简化以上逻辑我们使用 <code>if-elif-else</code> 语句，其中 <code>elif</code> 相当于 <code>else if</code> 的意思</p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><h3 id="语句格式-1"><a href="#语句格式-1" class="headerlink" title="语句格式"></a>语句格式</h3><figure class="highlight plain"><figcaption><span>条件判断语句格式如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">if 条件A:</span><br><span class="line">    if子逻辑分支</span><br><span class="line">elif 条件B:</span><br><span class="line">    elif子逻辑分支1</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">elif 条件C:</span><br><span class="line">    elif子逻辑分支2</span><br><span class="line">else:</span><br><span class="line">    else子逻辑分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断条件A是否为真</p><p>条件A为真（True）时，执行if子逻辑分支</p><p>条件A为假（False）时，判断条件B是否为真</p><p>条件B为真（True）时，执行elif子逻辑分支1</p><p>条件B为假（False）时，判断条件C是否为真</p><p>条件C为真（True）时，elif子逻辑分支2</p><p>条件C为假（False）时，执行else的子逻辑分支</p><p><img src="https://gengrui01.github.io/picture/python-if-else/4.png" alt=""></p><p><strong><em>TIPS:</em></strong> 这一系列条件判断会从上到下依次判断，如果某个判断为 <code>True</code> 就会直接执行对应的代码块，后面的条件判断就忽略不再执行了</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'及格'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'良好'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'优秀'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'卓越'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-if-else/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;市面上的软件硬件之所以能自动化的完成任务、智能的为大家服务，是因为它可以自己通过程序判断自己该执行什么操作&lt;/p&gt;
&lt;p&gt;在代码里我们常用条件判断语句来设定程序在不同场景下应该执行的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串切片</title>
    <link href="https://www.gengruiblog.cn/article/20210502.html"/>
    <id>https://www.gengruiblog.cn/article/20210502.html</id>
    <published>2021-05-01T16:00:00.000Z</published>
    <updated>2021-05-25T06:30:52.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取字符串中的单个字符"><a href="#取字符串中的单个字符" class="headerlink" title="取字符串中的单个字符"></a>取字符串中的单个字符</h2><p>字符串由一个个字符组成，每一个字符都有一个唯一的位置</p><p>比如字符串 <code>&#39;ABC&#39;</code> ，第一个字符是 <code>A</code> ，第二个字符是 <code>B</code> ，第三个字符是 <code>C</code></p><p>我们可以使用 <code>[a]</code> 按照位置的方式取出字符串中的字符</p><a id="more"></a><p>不过需要注意的是，在程序的世界中，计数是从0开始的，这里使用0来表示第一个位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABC'</span></span><br><span class="line">print(s[<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">1</span>])</span><br><span class="line">print(s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-slice/1.png" alt=""></p><h2 id="取字符串的字串"><a href="#取字符串的字串" class="headerlink" title="取字符串的字串"></a>取字符串的字串</h2><p>按照上述方法我们可以切取出字符串中的任意一个字母，但有时候我们不止需要字符串中的一个字母，会想切取字符串的一部分（子串）</p><p>这个时候我们需要在中括号中填入两个数字用冒号分开 <code>[a:b]</code> ，其中a和b分别表示需要切取的开始位置和结束位置</p><p><strong><em>TIPS:</em></strong> 这是半闭半开区间，也就是说切取出的子串会包含开始位置但不包含结束位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'ABCDEFGHIJK'</span></span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(s[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">10</span>])</span><br><span class="line">print(s[<span class="number">5</span>:<span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-slice/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取字符串中的单个字符&quot;&gt;&lt;a href=&quot;#取字符串中的单个字符&quot; class=&quot;headerlink&quot; title=&quot;取字符串中的单个字符&quot;&gt;&lt;/a&gt;取字符串中的单个字符&lt;/h2&gt;&lt;p&gt;字符串由一个个字符组成，每一个字符都有一个唯一的位置&lt;/p&gt;
&lt;p&gt;比如字符串 &lt;code&gt;&amp;#39;ABC&amp;#39;&lt;/code&gt; ，第一个字符是 &lt;code&gt;A&lt;/code&gt; ，第二个字符是 &lt;code&gt;B&lt;/code&gt; ，第三个字符是 &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;[a]&lt;/code&gt; 按照位置的方式取出字符串中的字符&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串模板化</title>
    <link href="https://www.gengruiblog.cn/article/20210501.html"/>
    <id>https://www.gengruiblog.cn/article/20210501.html</id>
    <published>2021-04-30T16:00:00.000Z</published>
    <updated>2021-05-25T06:03:50.316Z</updated>
    
    <content type="html"><![CDATA[<p>简单字符串输出的内容是固定的</p><p>有时候输出的内容是有固定的模板，但具体内容是不是固定的</p><p>这个时候需要使用format来使字符串模板化</p><p>用固定的模板输出不固定的内容</p><a id="more"></a><h2 id="字符串format创建及使用"><a href="#字符串format创建及使用" class="headerlink" title="字符串format创建及使用"></a>字符串format创建及使用</h2><p>字符串format由字符串模板和模板数据内容两个部分组成，通过 <code>{ }</code> 把模板数据内容嵌到字符串模板对应的位置</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello &#123;&#125;'</span></span><br><span class="line">world = <span class="string">'World'</span></span><br><span class="line">print(template.format(world))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-format/1.png" alt=""></p><h2 id="字符串format包含多模板"><a href="#字符串format包含多模板" class="headerlink" title="字符串format包含多模板"></a>字符串format包含多模板</h2><p>如果模板中{}比较多则容易错乱，我们在定义模板的时候可以指定模板数据内容的顺序或者数据内容名，使得在format过程更加清晰</p><h3 id="指定模板数据顺序"><a href="#指定模板数据顺序" class="headerlink" title="指定模板数据顺序"></a>指定模板数据顺序</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;0&#125; * &#123;1&#125; * &#123;2&#125; * &#123;3&#125; * &#123;4&#125; * &#123;5&#125; * &#123;6&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-format/2.png" alt=""></p><p>调整模板顺序后打印，打印时的输入顺序不变</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'* &#123;6&#125; * &#123;5&#125; * &#123;4&#125; * &#123;3&#125; * &#123;2&#125; * &#123;1&#125; * &#123;0&#125; *'</span></span><br><span class="line">print(template.format(<span class="string">'你'</span>, <span class="string">'是'</span>, <span class="string">'年'</span>, <span class="string">'少'</span>, <span class="string">'的'</span>, <span class="string">'欢'</span>, <span class="string">'喜'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-format/3.png" alt=""></p><h3 id="指定模板数据名"><a href="#指定模板数据名" class="headerlink" title="指定模板数据名"></a>指定模板数据名</h3><p>定义模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'Hello&#123;w&#125;\nHello&#123;c&#125;\nHello&#123;b&#125;'</span></span><br></pre></td></tr></table></figure><p>定义数据内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">world = <span class="string">"World!"</span></span><br><span class="line">china = <span class="string">"China!"</span></span><br><span class="line">beijing = <span class="string">"Beijing!"</span></span><br></pre></td></tr></table></figure><p>使用模板并打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(template.format(w = world, c = china, b = beijing))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-format/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单字符串输出的内容是固定的&lt;/p&gt;
&lt;p&gt;有时候输出的内容是有固定的模板，但具体内容是不是固定的&lt;/p&gt;
&lt;p&gt;这个时候需要使用format来使字符串模板化&lt;/p&gt;
&lt;p&gt;用固定的模板输出不固定的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符串转义</title>
    <link href="https://www.gengruiblog.cn/article/20210430.html"/>
    <id>https://www.gengruiblog.cn/article/20210430.html</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2021-05-25T06:03:50.347Z</updated>
    
    <content type="html"><![CDATA[<p>之前的文章说到过，字符串可以用 <code>&#39; &#39;</code> 或者 <code>&quot; &quot;</code> 括起来表示</p><p>如果字符串本身包含 <strong>‘</strong> 怎么办？比如我们要表示字符串 <code>I&#39;m OK</code> ，这时，可以用 <code>&quot; &quot;</code> 括起来表示：</p><a id="more"></a><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"I'm OK"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-raw/1.png" alt=""></p><p>同理，如果字符串包含 <strong>“</strong> ，我们就可以用 <code>&#39; &#39;</code> 括起来表示：</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said "Hello Python!"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-raw/2.png" alt=""></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>如果字符串既包含 <strong>‘</strong> 又包含 <strong>“</strong> 怎么办？</p><p>这个时候，就需要对字符串中的某些特殊字符进行 <strong>转义</strong> ，Python字符串用 <code>\</code> 进行转义（转义字符 <code>\</code> 不计入字符串的内容中）</p><p>比如要表示字符串 <code>Anne said &quot;I&#39;m OK&quot;</code></p><p>字符串内的 <code>&#39;</code> 和 <code>&quot;</code> 会引起歧义，因此，我们在它前面插入一个 <code>\</code> 表示这是一个普通字符，不代表字符串的起始</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Anne said \"I\'m OK\"'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-raw/3.png" alt=""></p><h2 id="转义整个字符串（raw字符串）"><a href="#转义整个字符串（raw字符串）" class="headerlink" title="转义整个字符串（raw字符串）"></a>转义整个字符串（raw字符串）</h2><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦</p><p>为了避免这种情况，我们可以在字符串前面加个前缀 <code>r</code> ，表示这是一个raw字符串</p><p>raw字符串中的内容会自动转义，不需要在每个字符前加 <code>\</code></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'\(~_~)/ \(~_~)/'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-raw/4.png" alt=""></p><p>raw字符串也同样适用于多行字符串，在多行字符串前面添加个前缀 <code>r</code> ，这个多行字符串也会变成一个raw字符串</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">r'''Anne said "I'm OK"</span></span><br><span class="line"><span class="string">\(~_~)/ \(~_~)/ \(~_~)/'''</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-string-raw/5.png" alt=""></p><h2 id="常用转义"><a href="#常用转义" class="headerlink" title="常用转义"></a>常用转义</h2><p>其他常常用到转义字符的地方还有：</p><ul><li><code>\n</code> ：换行</li><li><code>\t</code> ：制表符</li><li><code>\\</code> ：\字符本身</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的文章说到过，字符串可以用 &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt; 或者 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示&lt;/p&gt;
&lt;p&gt;如果字符串本身包含 &lt;strong&gt;‘&lt;/strong&gt; 怎么办？比如我们要表示字符串 &lt;code&gt;I&amp;#39;m OK&lt;/code&gt; ，这时，可以用 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 括起来表示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python布尔值运算</title>
    <link href="https://www.gengruiblog.cn/article/20210429.html"/>
    <id>https://www.gengruiblog.cn/article/20210429.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-05-25T06:03:50.330Z</updated>
    
    <content type="html"><![CDATA[<p>布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）</p><a id="more"></a><h2 id="and运算（与运算）"><a href="#and运算（与运算）" class="headerlink" title="and运算（与运算）"></a>and运算（与运算）</h2><p>只有所有都为 True，and运算结果才是 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-bool/1.png" alt=""></p><h2 id="or运算（或运算）"><a href="#or运算（或运算）" class="headerlink" title="or运算（或运算）"></a>or运算（或运算）</h2><p>只要其中有一个为 True，or 运算结果就是 True。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-bool/2.png" alt=""></p><h2 id="not运算（非运算）"><a href="#not运算（非运算）" class="headerlink" title="not运算（非运算）"></a>not运算（非运算）</h2><p>是一个单目运算符，把 True 变成 False，False 变成 True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-bool/3.png" alt=""></p><p><strong><em>TIPS:</em></strong> not计算的优先级是高于and和or的</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-bool/5.png" alt=""></p><p>在上述布尔计算中，先计算<code>not False = True</code>，然后再计算<code>True and True</code>，因此得到 <strong>True</strong> 的结果</p><h2 id="与其他数据类型运算"><a href="#与其他数据类型运算" class="headerlink" title="与其他数据类型运算"></a>与其他数据类型运算</h2><p>在Python中，布尔类型还可以与其他数据类型（字符串，数字等）做与或非运算</p><p>运算时会把0、空字符串和None看成False，其他数值和非空字符串都看成True</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">or</span> <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line"><span class="number">99</span> <span class="keyword">and</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-bool/4.png" alt=""></p><h2 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h2><p>Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了直接返回结果</p><h3 id="a-and-b"><a href="#a-and-b" class="headerlink" title="a and b"></a>a and b</h3><ul><li>如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b</li><li>如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a</li></ul><h3 id="a-or-b"><a href="#a-or-b" class="headerlink" title="a or b"></a>a or b</h3><ul><li>如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a</li><li>如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布尔类型只有True和False两种值，可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数字类型运算法则</title>
    <link href="https://www.gengruiblog.cn/article/20210428.html"/>
    <id>https://www.gengruiblog.cn/article/20210428.html</id>
    <published>2021-04-27T16:00:00.000Z</published>
    <updated>2021-05-25T06:03:50.336Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中整数和小数（浮点数）虽然属于不同的数据类型，但是在运算上是可以一起运算的，所以经常一起称为数字类型</p><a id="more"></a>ti<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h3><p>使用Python进行进制转换的时候，可以使用bin()函数来将十进制转换成二进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = bin(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/8.png" alt=""></p><h3 id="十进制转换成八进制"><a href="#十进制转换成八进制" class="headerlink" title="十进制转换成八进制"></a>十进制转换成八进制</h3><p>使用Python进行进制转换的时候，oct()函数来将十进制转换成八进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = oct(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/9.png" alt=""></p><h3 id="十进制转换成十六进制"><a href="#十进制转换成十六进制" class="headerlink" title="十进制转换成十六进制"></a>十进制转换成十六进制</h3><p>使用Python进行进制转换的时候，hex()函数来将十进制转换成十六进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = hex(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/10.png" alt=""></p><h3 id="八进制转十六进制"><a href="#八进制转十六进制" class="headerlink" title="八进制转十六进制"></a>八进制转十六进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0o35</span></span><br><span class="line">b = hex(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/11.png" alt=""></p><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><p>整数和浮点数可以直接进行四则运算</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 + num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/1.png" alt=""></p><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 - num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/2.png" alt=""></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 * num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/3.png" alt=""></p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">10</span></span><br><span class="line">num2 = <span class="number">0.5</span></span><br><span class="line">result = num1 / num2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/4.png" alt=""></p><p><strong><em>TIPS:</em></strong></p><p>从上面可以发现一个规律，整数和浮点数运算后，得到的结果不管小数点后是否有值，结果都变成浮点数了</p><p>这是合理的，因为浮点数可以表达整数的结果，但是整数不能表达浮点数的结果</p><h2 id="取模运算"><a href="#取模运算" class="headerlink" title="取模运算"></a>取模运算</h2><p>Python数字支持取模运算，使用百分号%表示取模</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span> % <span class="number">2</span>)</span><br><span class="line">print(<span class="number">33</span> % <span class="number">10</span>)</span><br><span class="line">print(<span class="number">99</span> % <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/5.png" alt=""></p><h2 id="地板除"><a href="#地板除" class="headerlink" title="地板除"></a>地板除</h2><p>Python除了普通除法之外，还有一个特殊的除法被称为地板除</p><p>对于地板除，得到的结果只有整数的部分会忽略纯小数</p><p>地板除使用//进行</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>//<span class="number">4</span></span><br><span class="line"><span class="number">10</span>//<span class="number">2.5</span></span><br><span class="line"><span class="number">10</span>//<span class="number">3</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/6.png" alt=""></p><h2 id="保留小数点位数"><a href="#保留小数点位数" class="headerlink" title="保留小数点位数"></a>保留小数点位数</h2><p>使用Python计算小数的时候，可以使用round()函数来保留小数点后若干位</p><p>调用round函数要输入两个参数，第一个是需要保留小数点位数的数值，第二个是要保留的位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span> / <span class="number">3</span></span><br><span class="line">print(num)</span><br><span class="line">round(num, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype-number/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python中整数和小数（浮点数）虽然属于不同的数据类型，但是在运算上是可以一起运算的，所以经常一起称为数字类型&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python变量命名规范及如何定义变量</title>
    <link href="https://www.gengruiblog.cn/article/20210427.html"/>
    <id>https://www.gengruiblog.cn/article/20210427.html</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2021-04-30T03:29:35.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量的概念基本上和初中代数的方程变量是一致的</p><p>例如，对于方程式 y=x*x ，x就是变量</p><p>在Python中，变量指的是一段数据或者一段空间的别名</p><a id="more"></a><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><ol><li>增强程序可读性 拒绝硬编码</li><li>提高了对程序的修改效率</li></ol><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ol><li>变量名必须以字母或者下划线(_)或者汉字开头</li><li>变量名中可以包括字母、下划线(_)、数字、汉字</li><li>变量名中不能出现Python关键字和保留字</li><li>变量名中要区分大小写，即 abc 和 Abc 不是同一个变量</li></ol><h3 id="常用变量命名法则"><a href="#常用变量命名法则" class="headerlink" title="常用变量命名法则"></a>常用变量命名法则</h3><p>在学习工作中，给变量命名的最高境界是见名知意</p><p>所以汉字、汉语拼音、单个字母、个别无意义的单词不推荐作为变量名，例如：年龄、xingming、a、the……</p><p>推荐使用英文单词或者缩写对变量命名，例如：age、name……</p><p>当一个单词不能准确表达变量含义，变量名由多个单词构成时通常使用如下法则进行变量命名：</p><ol><li>驼峰命名法：除第一个单词外其余首字母大写，例如：myAge、yourName……</li><li>大驼峰命名法：所有单词的首字母均大写，例如：MyAge、YourName……</li><li>posix命名法：变量名中所有字母均小写，俩单词间用下划线链接，例如：my_age、your_name……</li></ol><p>在开发工程中，程序员常常默认：</p><ul><li>驼峰命名法用来对变量进行命名</li><li>大驼峰命名法用来对类进行命名</li><li>posix命名法很少用到</li></ul><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>定义变量的方式很简单，通过 <code>变量名=数据</code> ，即可定义一个变量</p><p>例如：<code>temp = 1</code></p><p>在这个例子里面，temp就是变量，它的值是整数1</p><p>例如：<code>hello = &#39;Hello&#39;</code></p><p>在这个例子里面，hello就是变量，它的值是字符串’Hello’</p><p>在Python里面，一个变量可以先后存储多种不同类型的数据，比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="number">1</span></span><br><span class="line">print(temp)</span><br><span class="line">temp = <span class="string">'ABC'</span></span><br><span class="line">print(temp)</span><br></pre></td></tr></table></figure><p>起初temp存储的是整数1，之后存储的是字符串’ABC’</p><p>这是Python这类语言特有的特性，我们称之为动态语言，Python、Javascript等等都是动态语言</p><p>与之对应的是静态语言，Java、C、C++等等属于静态语言</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是变量&quot;&gt;&lt;a href=&quot;#什么是变量&quot; class=&quot;headerlink&quot; title=&quot;什么是变量&quot;&gt;&lt;/a&gt;什么是变量&lt;/h2&gt;&lt;p&gt;变量的概念基本上和初中代数的方程变量是一致的&lt;/p&gt;
&lt;p&gt;例如，对于方程式 y=x*x ，x就是变量&lt;/p&gt;
&lt;p&gt;在Python中，变量指的是一段数据或者一段空间的别名&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础数据类型</title>
    <link href="https://www.gengruiblog.cn/article/20210426.html"/>
    <id>https://www.gengruiblog.cn/article/20210426.html</id>
    <published>2021-04-25T16:00:00.000Z</published>
    <updated>2021-05-25T02:56:15.676Z</updated>
    
    <content type="html"><![CDATA[<p>计算机顾名思义就是可以做数学计算的机器，因此计算机程序理所当然地可以处理各种数值</p><p>但是计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据</p><p>不同种类的数据，就需要定义不同的数据类型来存储，认识编程中的不同数据类型是非常有必要的</p><p>Python中能够直接处理的有 <strong><em>整数、浮点数、字符串、布尔类型、空值</em></strong> 五种数据类型</p><p>这篇文章就来讲解这五种数据类型分别用来存放什么样的数据</p><p>至于Python提供的列表、字典等多种数据类型，以及创建自定义数据类型，本文不会介绍</p><a id="more"></a><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可以处理任意大小的整数，这里的整数和我们生活中定义的整数是一个概念，例如：1,2,3,0,-1,-2,-3 等等都是整数</p><p>对于整数，除了生活中常用的十进制以外，计算机由于使用二进制，所以，在计算机中也常用二进制或者十六进制表示整数</p><p>在Python中使用以下方式表示二进制数和十六进制数：</p><ul><li>二进制数都是由数字0、1组成，逢2进1。在Python中，二进制整数使用前缀0b表示，例如：0b0110, 0b1100</li><li>八进制数都是由数字0~7的数字组成，逢8进1。在Python中，八进制整数使用前缀0o表示，例如：0o123, 0o657</li><li>十六进制数除了0<del>9十个数字以外，还使用a</del>f表示10~15的数字，逢16进1。在Python中，十六进制使用前缀0x，例如：0x12ef, 0xde24</li></ul><p>十进制数、二进制数和十六进制数之间是可以相互转换的，下篇文章会讲解python中不同进制转换的函数</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><h3 id="什么是浮点数"><a href="#什么是浮点数" class="headerlink" title="什么是浮点数"></a>什么是浮点数</h3><p>浮点数对应我们生活的是小数，例如：0.1, 3.1415926, -0.5, -12.34 等等都是浮点数</p><h3 id="为什么小数在计算机领域被称为浮点数？"><a href="#为什么小数在计算机领域被称为浮点数？" class="headerlink" title="为什么小数在计算机领域被称为浮点数？"></a>为什么小数在计算机领域被称为浮点数？</h3><p>这是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的（可浮动的），例如：1.23x10^9和12.3x10^8是相等的，因此称为浮点数</p><p>浮点数可以用数学写法，例如：1.23，3.14，-9.01，但是对于很大或很小的浮点数，就必须用科学计数法表示</p><p>在Python中，把10^用e替代，例如：1.23x10^9就可写为1.23e9或者12.3e8，0.000012可以写成1.2e-5</p><h3 id="关于浮点数运算的误差"><a href="#关于浮点数运算的误差" class="headerlink" title="关于浮点数运算的误差"></a>关于浮点数运算的误差</h3><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算可能会有四舍五入的误差</p><p>我们在Python终端中输入<code>0.1 + 0.2</code>，期望的结果是0.3，看看得到的真实结果：</p><p><img src="https://gengrui01.github.io/picture/python-datatype/1.png" alt=""></p><p>真实结果和我们所期望的值不一样，这就是浮点数运算所带来的误差</p><p>这里的原理涉及到了科学计数法底层的运算，如果感兴趣的可以自己进一步的学习原理层面的知识</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串表示记录文本信息的一种形式，对应生活中的就是非数字类型的内容，比如一个句子，一段话在Python中就是字符串</p><p>在Python中，字符串是用单引号（’ ‘）或者双引号（” “）括起来的任意文本，例如：<code>&#39;abc&#39;</code>, <code>&quot;xyz&quot;</code>等等都是字符串</p><p><strong><em>TIPS:</em></strong> 单双引号只是一种表示方式，不是字符串的一部分，因此字符串’abc’只有a，b，c这3个字符</p><p>如果要表示多行字符串，可以直接在需要换行的地方添加 <code>\n</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Line 1\nLine 2\nLine 3&#39;</span><br></pre></td></tr></table></figure><p>也可以用叁引号（’’’ ‘’’）括起来表示，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值对应于生活中的就是对和错</p><p>在计算机的世界里，大部分判断都是非错则对的，一个布尔值只有True、False两种值，要么是True，要么是False</p><p>在Python中，可以直接用True、False表示布尔值（请注意大小写，不需要使用字符串符号括起来）</p><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是Python里一个特殊的值，用None表示</p><p><strong><em>TIPS:</em></strong> None和0是不一样的，None不能理解为0，因为0是有意义的</p><p>比如我有0个苹果表示我没有苹果，0表达的是数值0的意思</p><p>而不能表示为我有None个苹果，None是一个特殊的空值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机顾名思义就是可以做数学计算的机器，因此计算机程序理所当然地可以处理各种数值&lt;/p&gt;
&lt;p&gt;但是计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据&lt;/p&gt;
&lt;p&gt;不同种类的数据，就需要定义不同的数据类型来存储，认识编程中的不同数据类型是非常有必要的&lt;/p&gt;
&lt;p&gt;Python中能够直接处理的有 &lt;strong&gt;&lt;em&gt;整数、浮点数、字符串、布尔类型、空值&lt;/em&gt;&lt;/strong&gt; 五种数据类型&lt;/p&gt;
&lt;p&gt;这篇文章就来讲解这五种数据类型分别用来存放什么样的数据&lt;/p&gt;
&lt;p&gt;至于Python提供的列表、字典等多种数据类型，以及创建自定义数据类型，本文不会介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>首次编写并运行Python程序</title>
    <link href="https://www.gengruiblog.cn/article/20210425.html"/>
    <id>https://www.gengruiblog.cn/article/20210425.html</id>
    <published>2021-04-24T16:00:00.000Z</published>
    <updated>2021-04-27T11:50:35.145Z</updated>
    
    <content type="html"><![CDATA[<p>编写及运行Python程序的方法有两种</p><ol><li>控制台编写代码并运行</li><li>编写Python文件并运行</li></ol><p>下面主要讲解这两种方式下如何编写并运行Python程序</p><a id="more"></a><h2 id="控制台编写代码并运行"><a href="#控制台编写代码并运行" class="headerlink" title="控制台编写代码并运行"></a>控制台编写代码并运行</h2><h3 id="进入Python运行环境"><a href="#进入Python运行环境" class="headerlink" title="进入Python运行环境"></a>进入Python运行环境</h3><p>在控制台输入<code>python</code>进入Python运行环境（正确的Python运行环境会有&gt;&gt;&gt;的提示）</p><p><img src="https://gengrui01.github.io/picture/first-python-program/1.png" alt=""></p><h3 id="输入并运行第一行Python代码"><a href="#输入并运行第一行Python代码" class="headerlink" title="输入并运行第一行Python代码"></a>输入并运行第一行Python代码</h3><p>输入我们的第一行Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure><p>打印出<code>Hello World</code>说明第一行代码运行成功</p><p><img src="https://gengrui01.github.io/picture/first-python-program/2.png" alt=""></p><p>如果代码出现错误需要核实：</p><ol><li>在Hello World前后是否都有引号</li><li>print和&gt;&gt;&gt;不可以有空格</li><li>注意所有的标点符号均为英文字符</li></ol><h3 id="退出Python运行环境"><a href="#退出Python运行环境" class="headerlink" title="退出Python运行环境"></a>退出Python运行环境</h3><p>输入Python提供的<code>quit()</code>函数退出Python运行环境</p><p><img src="https://gengrui01.github.io/picture/first-python-program/5.png" alt=""></p><h2 id="编写Python文件并运行"><a href="#编写Python文件并运行" class="headerlink" title="编写Python文件并运行"></a>编写Python文件并运行</h2><p>编写文件要注意以下两点：</p><ol><li>编写工具：用记事本输入</li><li>文件后缀：.py 非必须 其他后缀Python解释器也可以执行它</li></ol><h3 id="编写第一个Python文件"><a href="#编写第一个Python文件" class="headerlink" title="编写第一个Python文件"></a>编写第一个Python文件</h3><p>新建一个txt文件名为“hello”</p><p><img src="https://gengrui01.github.io/picture/first-python-program/3.png" alt=""></p><p>在该文件内输入我们的第一行Python代码 要注意最前面不能有空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure><p>保存好之后修改文件的后缀名为<code>.py</code></p><p>如上就完成了第一个Python文件的编写</p><p><img src="https://gengrui01.github.io/picture/first-python-program/4.png" alt=""></p><h3 id="运行第一个Python文件"><a href="#运行第一个Python文件" class="headerlink" title="运行第一个Python文件"></a>运行第一个Python文件</h3><p>在控制台输入 <code>python + Python文件路径 + \ + Python文件名</code> 运行Python文件中的代码</p><p>打印出<code>Hello World</code>说明第一个Python文件运行成功</p><p><img src="https://gengrui01.github.io/picture/first-python-program/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写及运行Python程序的方法有两种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;控制台编写代码并运行&lt;/li&gt;
&lt;li&gt;编写Python文件并运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面主要讲解这两种方式下如何编写并运行Python程序&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3.8版本安装</title>
    <link href="https://www.gengruiblog.cn/article/20210424.html"/>
    <id>https://www.gengruiblog.cn/article/20210424.html</id>
    <published>2021-04-23T16:00:00.000Z</published>
    <updated>2021-04-27T11:10:19.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先进入Python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">Welcome to Python.org</a></p><p>点击 DownLoads 选择自己的电脑系统 之后查看所有的版本</p><a id="more"></a><p><img src="https://gengrui01.github.io/picture/python-install/1.png" alt=""></p><p>找到 <em>Looking for a specific release?</em> 选择3.8的某个版本 点击右侧的 DownLoad 按钮进入下载详情页</p><p><img src="https://gengrui01.github.io/picture/python-install/2.png" alt=""></p><p>进入详情页后 拉到最下面选择自己的电脑系统 点击后等待下载完成</p><p><img src="https://gengrui01.github.io/picture/python-install/3.png" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先勾选 <em>Add Python 3.8 to PATH</em></p><p>接下来点击 <em>Install Now</em> 默认安装或者点击 <em>Customize installation</em> 自定义安装</p><p>我们这里选择自定义安装 目的是修改安装路径</p><p><img src="https://gengrui01.github.io/picture/python-install/4.png" alt=""></p><p>进入如下界面是用来选择要安装的其他工具，可以看到默认安装了PIP包安装器等工具，直接点击下一步即可</p><p><img src="https://gengrui01.github.io/picture/python-install/5.png" alt=""></p><p>最后修改Python安装路径 点击安装</p><p><img src="https://gengrui01.github.io/picture/python-install/6.png" alt=""></p><p>等待安装</p><p><img src="https://gengrui01.github.io/picture/python-install/7.png" alt=""></p><p>出现如下界面表示安装完成</p><p><img src="https://gengrui01.github.io/picture/python-install/8.png" alt=""></p><h2 id="安装检测"><a href="#安装检测" class="headerlink" title="安装检测"></a>安装检测</h2><p>Win + R 键打开运行框，输入<code>cmd</code>打开控制台</p><p>输入<code>python -V</code>查看Python版本号</p><p>打印出如下内容说明安装成功</p><p><img src="https://gengrui01.github.io/picture/python-install/9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;首先进入Python官网：&lt;a href=&quot;https://www.python.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Welcome to Python.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击 DownLoads 选择自己的电脑系统 之后查看所有的版本&lt;/p&gt;
    
    </summary>
    
    
      <category term="安装与配置" scheme="https://www.gengruiblog.cn/categories/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Python简介</title>
    <link href="https://www.gengruiblog.cn/article/20210423.html"/>
    <id>https://www.gengruiblog.cn/article/20210423.html</id>
    <published>2021-04-22T16:00:00.000Z</published>
    <updated>2021-04-30T03:20:52.572Z</updated>
    
    <content type="html"><![CDATA[<p>定义：Python是一门面型对象、解释型的编程语言</p><p>特点：使用缩进作为逻辑层次</p><p>读音：拍桑（美） <strong><em>派森（英）</em></strong></p><a id="more"></a><h2 id="Python语言的历史"><a href="#Python语言的历史" class="headerlink" title="Python语言的历史"></a>Python语言的历史</h2><ul><li>1989年 由 Guido · van Rossum 写下第一行Python代码</li><li>1991年2月 诞生第一个Python解释器</li><li>1994年1月 发布 Python1.0 版本（开源后更多开发者可以加入开发此框架 进入新的开发模式）</li><li>2000年10月 发布 Python2.0 版本（更多的开发者开始使用此语言）</li><li>2008年12月 发布 Python3.0 版本（2.0和3.0不完全兼容）</li><li>2020年 宣布停止 Python2.0 版本维护</li></ul><h2 id="Python能做什么"><a href="#Python能做什么" class="headerlink" title="Python能做什么"></a>Python能做什么</h2><ol><li><strong>系统运维</strong> 自动化运维</li><li>网络编程<ul><li><strong>爬虫</strong></li><li>服务器编程</li><li>搜索引擎</li></ul></li><li><strong>科学计算</strong><ul><li>数据分析</li><li>大数据</li></ul></li><li>教学语言 入门简单易学习</li><li><strong>AI</strong></li><li>图像处理</li><li>游戏</li></ol><p><strong><em>TIPS:</em></strong> 加粗的方向Python已经占据了很大的市场</p><h2 id="Python的特点"><a href="#Python的特点" class="headerlink" title="Python的特点"></a>Python的特点</h2><h3 id="Python的优点"><a href="#Python的优点" class="headerlink" title="Python的优点"></a>Python的优点</h3><ol><li>纯面向对象</li><li>免费（公司使用后不怕有法律纠纷）</li><li>移植性能好</li><li>可混合编程（胶水语言 适合快速整合其他语言开发的内容）</li><li>开发效率高</li><li>简单明了 入门难度低</li></ol><h3 id="Python的缺点"><a href="#Python的缺点" class="headerlink" title="Python的缺点"></a>Python的缺点</h3><p>运行效率低，运行速度确实是python的软肋</p><h3 id="Java-C-C-Python-对比"><a href="#Java-C-C-Python-对比" class="headerlink" title="Java C/C++ Python 对比"></a>Java C/C++ Python 对比</h3><table><thead><tr><th>语言</th><th>类型</th><th>运行速度</th><th>代码量</th></tr></thead><tbody><tr><td>C/C++</td><td>编译成机器码</td><td>非常快</td><td>非常多</td></tr><tr><td>Java</td><td>编译成字节码</td><td>快</td><td>多</td></tr><tr><td>Python</td><td>解释执行</td><td>慢</td><td>少</td></tr></tbody></table><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><p>搭建Python开发环境需要安装如下内容：</p><ol><li>Python解释器</li></ol><p>现在大多使用Python3.X，本博客内容使用 Python3.8 版本学习</p><p>注意：Python2.X已停止维护，Python2.X 写的代码在 Python3.X 运行时会报错</p><p>点击根据攻略完成 <a href="https://gengrui01.github.io/article/20210424.html" target="_blank" rel="noopener">Python3.8版本安装</a></p><ol start="2"><li>包安装器</li></ol><p>常用包安装器有pip、conda等</p><p>Python解释器安装时会帮我们自动把pip安装好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义：Python是一门面型对象、解释型的编程语言&lt;/p&gt;
&lt;p&gt;特点：使用缩进作为逻辑层次&lt;/p&gt;
&lt;p&gt;读音：拍桑（美） &lt;strong&gt;&lt;em&gt;派森（英）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>内推是什么？有哪些注意事项？如何争取？</title>
    <link href="https://www.gengruiblog.cn/article/20210417.html"/>
    <id>https://www.gengruiblog.cn/article/20210417.html</id>
    <published>2021-04-16T16:00:00.000Z</published>
    <updated>2021-04-20T03:30:15.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间是春招的高峰期，很多同学都忙着投简历准备面试</p><p>我发现一个现象，很多应届学生开始谈论“内推”，而一些求职平台，也会发布一些“内推机会”，“免费内推群”</p><p>在朋友圈已经看到了好几个“赶快加入XX内推群”的消息，现在应届生找工作都各种内推了？</p><a id="more"></a><h2 id="内推是什么？"><a href="#内推是什么？" class="headerlink" title="内推是什么？"></a>内推是什么？</h2><p>内推，顾名思义，是通过公司内部人员推荐，直接给用人部门投递简历推荐应聘者</p><p>用人部门会优先考虑内推的人员，这样可以极大缩短应聘流程，成功率也较高，看上去这是一个不错的渠道</p><p>用人部门基本也会卖推荐人一个面子，仔细看一下简历（当然，这个仔细，可能也就是把原来花20秒看简历的时间，变成30秒而已）</p><p>通过“内推”途径可以避开网申筛选笔试筛选，甚至还能避开可怕的群面，直接进单面，是不是很棒？</p><p>如果推荐成功，公司基本上还会给推荐人奖金，从几百到上万的都有</p><p>这样想起来，用人部门很快就招到了靠谱的人，推荐人拿到了奖金，而应聘者则节约了很多应聘流程，真是一个三赢的局面</p><h2 id="应届生求职现状"><a href="#应届生求职现状" class="headerlink" title="应届生求职现状"></a>应届生求职现状</h2><p>大家都知道，现在找工作真的一年比一年难</p><p>每年的应届毕业生都是个天文数字，同时还要算上归国的留学生，还有上一届找工作落下的</p><p>所以校招基本上是一个职位上百人在应聘，有的公司有的岗位甚至能达到上千上万人竞争的情况</p><p>能够在校招中拿到一个名企的offer，那真的是杀出来的一条血路，手下败将数以百计</p><p>应届生进入名企，最常见的就如下两种途径：</p><ol><li>走流程的网申（简历）-笔试-群面-单面（可能1-2轮）-录用</li><li>实习转正（名额很少，有机会实习一定要好好表现）</li></ol><h2 id="应届生的内推可能性"><a href="#应届生的内推可能性" class="headerlink" title="应届生的内推可能性"></a>应届生的内推可能性</h2><p>企业随便跑去一个学校开个宣讲会，简历都能收到成百上千份，还不包括网申的，怎么会愁选不到合适的人？</p><p>之前听某大厂HR说招聘会一下午收到上千份简历，他们人少带不走，只从中选出几百份985的简历带走了</p><p>所以对于大厂而言，应届生是根本不会缺的，很多根本没有也不需要对外提供内推机会</p><p>就算真的有内推机会，内推应届生又不可能是经理及以上级别，没多少奖金，换位思考内推者图什么？</p><p><strong>大家对于“内推”信息一定要谨慎，千万不要因为找工作迫切的心情而失去理性判断</strong></p><h2 id="常见内推骗局"><a href="#常见内推骗局" class="headerlink" title="常见内推骗局"></a>常见内推骗局</h2><ol><li>收费提供内推名额</li></ol><p>收费人号称可以通过自己的“人脉网”帮助求职者内推，一个内推名额可以收费上千</p><p>明明该部门就这两天就能招到人，却声称整个招聘季都能提供内推名额</p><ol start="2"><li>系列课程+内推机会</li></ol><p>通过一个系列课程+内推机会的形式包装后收取高价，一个人有的甚至能收到上万</p><p>这类会主打教学，讲解如何通过学习获得工作技能，至于内推，只是个“机会”</p><p>“机会”这个东西就比较微妙了，你怎么知道给你的这个“机会”到底推了还是没有推？</p><p>他说给你推了，发给了某某部门的XX经理，但是人家经理觉得你的个人能力不达标，不予录用，你怎么办？</p><h2 id="应届生可以寻求的内推"><a href="#应届生可以寻求的内推" class="headerlink" title="应届生可以寻求的内推"></a>应届生可以寻求的内推</h2><p>虽然上面说了，对外宣传的应届生内推大多不靠谱，收费的更是如此</p><p>但是不否认应届生确实可以通过内推获得一些不错的机会，只是这样的机会基本不是正式的offer，而是实习</p><p>应届生通过内推拿到实习机会，进而通过实习转正倒是常有发生的</p><p>从公司和实习生角度分别看待实习生内推这件事：</p><ul><li>公司<ul><li>现在的实习生实习期到了要走了或者是转正了，总要找个人续上</li><li>实习岗位也没有那么的重要（毕竟，实习生差不多就是个打杂的），不需要层层考核，即便这个实习生不行开除了也没什么损失</li></ul></li><li>实习生<ul><li>积累实习经验</li><li>实习表现好还有可能转正</li></ul></li></ul><p>所以“实习生内推”可以算作是很实在的内推了，其他承诺能够给应届生内推正式工作的最好留个心眼</p><h2 id="怎么拿到实习内推"><a href="#怎么拿到实习内推" class="headerlink" title="怎么拿到实习内推"></a>怎么拿到实习内推</h2><ol><li>算好时间准备</li></ol><p>一定要提前准备，在毕业前一年的4-5月了解清楚自己想去的行业和公司，选出差不多3-5个公司（不要选多了 会晕菜）</p><p>根据每个公司的不同岗位要求，学习需要的技能，针对性地修改自己的简历，尽量做到完全匹配</p><ol start="2"><li>找到介绍人</li></ol><p>介绍人一定要是自己相信的人，比如家人朋友等等，最好的途径是学长学姐，你们的校友关系这张感情牌一定要好好用（毕竟内推没多少钱奖金，别人不一定乐意帮你）</p><p>至于怎么找，可以问辅导员，问老师，问学生会的人，到底有谁是在你意向公司里面工作，甚至是实习过的也可以（实习过的，可能还认识里面的人，可以帮忙介绍一下里面的人）</p><p>找到过后，发短信或者加微信，或者是发邮件什么的无所谓。第一次对话一定要礼貌，先表明自己的校友身份，然后说知道师兄/师姐在XX公司，自己也很想进XX公司实习，想请教一些问题（这里要说是请教，不要直接说帮你内推）</p><p>你在了解完一些信息（招聘人数，招聘要求，工作地点等）后，你一定要表示出你的感激之情（至于怎么感激，发红包或者请吃饭都行）</p><p>在对方收了你这个红包，或者答应你请吃饭后，你再接着说帮忙看看简历，能否帮忙内推一下，经过上面的接触这个时候校友一般就不会拒绝你啦</p><h2 id="给想要内推进大厂的应届生三条忠告"><a href="#给想要内推进大厂的应届生三条忠告" class="headerlink" title="给想要内推进大厂的应届生三条忠告"></a>给想要内推进大厂的应届生三条忠告</h2><ol><li>应届生内推并没有想象中的那么有用，市面上的各种推出来的内推机会只是一种敛财的手段罢了，大家要理性看待</li><li>对于应届生而言实习生内推会更为靠谱，想找这种内推需要提前准备，该打的感情牌就打不要不好意思</li><li>内推只是一种获得机会加快筛选进程的手段，想要找到一份好工作，最重要的仍然是个人能力</li></ol><p><strong>参考链接：</strong></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjAxNTc0NQ==&mid=2247487019&idx=1&sn=b46ddea463f5b39ec63e4255bd1fdc98&chksm=a6eef5c591997cd3f80c3127270927fb0312efe24ef6674151bb1b4b894a983271792fb8d6b7&mpshare=1&scene=1&srcid=0420mV9GxxPXMQa7IXwYSdJM&sharer_sharetime=1618887025074&sharer_shareid=2a57902a16db2e6ec73e056ce9ed0fba#rd" target="_blank" rel="noopener">内推，真有那么神吗？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一段时间是春招的高峰期，很多同学都忙着投简历准备面试&lt;/p&gt;
&lt;p&gt;我发现一个现象，很多应届学生开始谈论“内推”，而一些求职平台，也会发布一些“内推机会”，“免费内推群”&lt;/p&gt;
&lt;p&gt;在朋友圈已经看到了好几个“赶快加入XX内推群”的消息，现在应届生找工作都各种内推了？&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>如何写简历经历</title>
    <link href="https://www.gengruiblog.cn/article/20210411.html"/>
    <id>https://www.gengruiblog.cn/article/20210411.html</id>
    <published>2021-04-10T16:00:00.000Z</published>
    <updated>2021-04-20T02:56:49.128Z</updated>
    
    <content type="html"><![CDATA[<p>一份简历到HR的手上一般有如下两种结果：</p><ol><li>进垃圾桶</li><li>仔细看看，约来面试</li></ol><p>那么，HR做出这样的判断需要多长时间呢？</p><p>我们咨询了中国外企、垄断国企和民企的HR，他们基本表示，一天看300-400份简历是经常的，并且表示——小菜一碟</p><p>做一个简单的数学题：按照每个HR一天8小时工作不做其他事计算，平均1分钟到1分半处理一份简历——当然，没有一个HR一天只做简历处理的，所以这个时间还要缩短</p><p>1分钟就对1个读了18年书的青年做出判断，是一种负责任的态度么？</p><a id="more"></a><h2 id="针对应聘岗位写简历"><a href="#针对应聘岗位写简历" class="headerlink" title="针对应聘岗位写简历"></a>针对应聘岗位写简历</h2><p>为了说明这个问题，乔布简历的创始人Rick Ma同志创造性的发明了一种理论</p><p>在阐述这个理论之前，我们先看一张图，这张图上是一只鸟。你要说出“这是一只什么鸟”</p><p><img src="https://gengrui01.github.io/picture/make-resume/1.jpg" alt=""></p><p>是鸭子!你用了多长时间？1秒，2秒，还是1分钟？应该是脱口而出吧。</p><p>下一个问题，为什么是鸭子呢？</p><p>这还用问么，因为 Ta有扁扁的嘴和扁扁的脚，这都是明显鸭子的特征嘛</p><p>我们判断鸭子，就看鸭嘴和鸭掌</p><p>只要有鸭嘴鸭掌，鸭子！</p><p>只要没有鸭嘴鸭掌，不知道是什么，反正不是鸭子。</p><p>看简历选人是同样的道理。我们管这叫 “鸭子理论”</p><p>你的简历要像那张鸭子的图片一样，迅速把你有的并且他们需要的能力（“鸭嘴”和“鸭掌”）亮出来，马上让企业知道，你就是他们要的人</p><p>面试官阅读简历的目的是根据每一段经历判断你的能力达到了什么水平</p><p>为了方便面试官迅速在我们的经历中找到他需要的能力，我们的每一段经历都要写的具体、简洁、有条理</p><p>因为不同的岗位和领域，所需要的能力是不一样的，所以我们要针对不同的应聘岗位写不同侧重点的简历</p><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><p>如果你的简历写得朦朦胧胧，面试官可能会觉得你没什么干货，所以不敢写得详细。</p><p>面试官看经历，是为了判断能力，因此经历越具体，判断就会越准确</p><p>下面介绍三个可以把经历写具体的方法：</p><h3 id="1-动作分解"><a href="#1-动作分解" class="headerlink" title="1.动作分解"></a>1.动作分解</h3><p>把一件事情，按照它发生的顺序拆解成多个步骤，一步一步的写下来，这就是按步骤描述经历</p><p>举例用动作分解法将“他走了”3个字写成4句话：</p><ul><li>他抬起头看了老师一眼，迟疑了一下，慢慢地站了起来</li><li>来到中间过道上，弯下腰，悄悄地朝门口走去</li><li>来到门前，将手搭在把手上向左旋转，门应声而开</li><li>走出去把门带上，头也不回地离开了</li></ul><h3 id="2-深入细节"><a href="#2-深入细节" class="headerlink" title="2.深入细节"></a>2.深入细节</h3><p>不够复杂不好进行动作分解的经历可以使用深入细节法，从背景、做法、结果三个角度细节描写，添加具体内容</p><p>举例有一位求职者，在大学期间曾经组织过一次游园会，虽然她只是打杂，却很积极很投入，比其他打杂的干事强很多，我们使用深入细节法把这些不同表达出来：</p><ul><li>背景：游园会是XXX大学最有影响的传统经典活动，包括文艺巡演、围湖诗会、思源灯谜等3大部分，从每年的4月份持续到5月份。</li><li>做法：作为干事参与组织部、宣传部的工作。联系参演社团的工作人员，通知会议、做会议记录、协调排练场地。收集各社团的宣传海报，统一张贴。</li><li>结果：本届活动有大约200多名工作人员，2000多人次参加，成为最成功的一届游园会。</li></ul><h3 id="3-数字支撑"><a href="#3-数字支撑" class="headerlink" title="3.数字支撑"></a>3.数字支撑</h3><p>数字可能是一种新的迷信。有数字的经历看起来更真实，数字也让我们可以横向对比，更精确的感受程度和水平。</p><p>比如上文提到的游园会经历的做法，如果把数字加进去，一切就变得更容易理解了：</p><ul><li>联系23个参演社团的200多名工作人员，共通知了6次会议，记录会议摘要1万多字，协调排练场地34次</li><li>收集46张各社团的宣传海报，统一张贴在校内7个主要的海报栏</li></ul><h2 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h2><p>在我们的简历里，文字要简洁，舍弃一切无助于描述客观事实的文字，排版也要简洁，每句话独立地表述一件事情，呈现一个能力</p><h3 id="1-文字简洁"><a href="#1-文字简洁" class="headerlink" title="1.文字简洁"></a>1.文字简洁</h3><p>描述事情、表达能力的最小单元是一个动宾结构</p><p>就像我常常在课上讲的，“我”是代词，“自行车”是名词，这两个词放在一起，没有能力</p><p>我们加上不同的动词，就会出现不同的能力，比如“我骑自行车”、“我修自行车”、“我偷自行车”</p><p>我们进一步发现，“偷自行车”和“偷汽车”所需要的能力是很不一样的，前者只是毛贼，后者就是《速度与激情》了</p><p>因此动词加上宾语，一个动宾结构就可能完整而具体地表达一个能力，简历中的文字可以多使用动宾短语</p><p>上文我们提到“动作分解”，就是要把一件事情用多个“动宾结构”表达出来，各种各样的能力就自然表达出来了</p><h3 id="2-排版简洁"><a href="#2-排版简洁" class="headerlink" title="2.排版简洁"></a>2.排版简洁</h3><p>排版的目的是让阅读更简单，最简单的句子就是只表达一个意思的句子</p><p>我们比较以下两段经历就明白了</p><ol><li>上海图书馆志愿者活动 团体负责人</li></ol><p>我在里面担任了志愿者的小组长，协助领导的工作。在工作中学会了与人相处的技能，提高了团队合作能力，尤其是在协调志愿者的过程中，锻炼了沟通的技巧。最后我们获得了“先进集体”的正好，我获得“个人优秀组织者”称号。</p><ol start="2"><li>上海图书馆志愿者活动 团体负责人</li></ol><ul><li>宣传志愿活动、招募选拔组员并进行培训</li><li>处理突发事件、组织协调管理人事调动</li><li>与上图志愿者管理方协调解决志愿过程中暴露的问题</li><li>任职期间，所带团队获上图志愿“先进集体”称号，个人获“优秀组织者”称号。</li></ul><h2 id="条理"><a href="#条理" class="headerlink" title="条理"></a>条理</h2><p>任何一段文字内容的安排顺序，如果不符合人的思维习惯，读起来就会很吃力</p><p>对于简历中的经历而言，常用的表达顺序是“时间顺序”或“逻辑顺序”</p><h3 id="1-时间顺序"><a href="#1-时间顺序" class="headerlink" title="1.时间顺序"></a>1.时间顺序</h3><p>时间顺序也可以叫做流程顺序，如果是一个独立的项目，可以把先做了什么后做了什么依次写出来，如下面这段经历：</p><p>中国农业大学暑期实践团 暑期社会实践调查员</p><ul><li>针对农民设计简单易懂的问卷，并独立走访调查</li><li>与当地政府合作，综合分析相关会议记录和政策资料</li><li>完成长达20页的报告，荣获优秀社会实践报告</li></ul><h3 id="2-逻辑顺序"><a href="#2-逻辑顺序" class="headerlink" title="2.逻辑顺序"></a>2.逻辑顺序</h3><p>如果在一个组织中参与了多个项目，或者做了很多彼此关联度不大的事情，可以遵循一定的逻辑顺序来表述，如下面这段经历：</p><p>华东师范大学“一诺”志愿者服务队 队长</p><ul><li>组建华东师范大学“一诺”志愿者服务队，配备5支分队，与14个社区与单位达成共建协议，吸引注册志愿者共计400余人</li><li>开展“向日葵理财计划”系列金融理财知识普及活动，培训理财志愿者70名，主编《理财行动手册》，被评为校精品活动</li><li>因成功开展“关爱智障儿童”活动，与强生、微软共同被邀请至闵行区“爱心联盟”，2008年被评为闵行区优秀志愿服务队</li></ul><p><strong>参考链接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/340664691" target="_blank" rel="noopener">“鸭子理论”：针对应聘岗位写简历 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/340573616" target="_blank" rel="noopener">怎么写好经历 - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一份简历到HR的手上一般有如下两种结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进垃圾桶&lt;/li&gt;
&lt;li&gt;仔细看看，约来面试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，HR做出这样的判断需要多长时间呢？&lt;/p&gt;
&lt;p&gt;我们咨询了中国外企、垄断国企和民企的HR，他们基本表示，一天看300-400份简历是经常的，并且表示——小菜一碟&lt;/p&gt;
&lt;p&gt;做一个简单的数学题：按照每个HR一天8小时工作不做其他事计算，平均1分钟到1分半处理一份简历——当然，没有一个HR一天只做简历处理的，所以这个时间还要缩短&lt;/p&gt;
&lt;p&gt;1分钟就对1个读了18年书的青年做出判断，是一种负责任的态度么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>HR问及职业规划相关问题如何作答</title>
    <link href="https://www.gengruiblog.cn/article/20210410.html"/>
    <id>https://www.gengruiblog.cn/article/20210410.html</id>
    <published>2021-04-09T16:00:00.000Z</published>
    <updated>2021-04-20T03:09:46.337Z</updated>
    
    <content type="html"><![CDATA[<p>你的职业规划是什么？</p><p>你为什么来这个城市工作而不回家乡？</p><p>这篇来讲一讲遇到这一类职业规划相关问题怎样的回答才会受到HR的欣赏</p><a id="more"></a><h2 id="你的职业规划是什么？"><a href="#你的职业规划是什么？" class="headerlink" title="你的职业规划是什么？"></a>你的职业规划是什么？</h2><h3 id="HR想了解什么？"><a href="#HR想了解什么？" class="headerlink" title="HR想了解什么？"></a>HR想了解什么？</h3><ol><li>了解求职者的求职动机和对自己中长期职业发展的思考</li><li>求职者的稳定性</li><li>对自己的职业定位和发展判断是否准确</li></ol><h3 id="面试前需要了解的内容"><a href="#面试前需要了解的内容" class="headerlink" title="面试前需要了解的内容"></a>面试前需要了解的内容</h3><ol><li>这个职位对面试者的关键需求是什么？主要工作内容是什么？</li><li>职位的长期发展方向如何？类似职位的现有员工，在公司的成长经历如何？</li><li>从此职位出发，更进一步，需要哪些方面的能力与素质？</li><li>公司的企业文化？精神？</li><li>自己哪些优点和特点能够和上述四个问题中的答案挂上钩？</li></ol><h3 id="回答的重点"><a href="#回答的重点" class="headerlink" title="回答的重点"></a>回答的重点</h3><p>要表明自己是有备而来的，有着良好的职业规划，清楚地知道未来三到五年的计划和打算，表明你是符合企业要求的稳定型员工</p><p>表达时要注意添加面试前已了解的内容，尽量让自己的优势和公司发展、职业发展相融合</p><h2 id="你为什么来这个城市工作而不回家乡？"><a href="#你为什么来这个城市工作而不回家乡？" class="headerlink" title="你为什么来这个城市工作而不回家乡？"></a>你为什么来这个城市工作而不回家乡？</h2><h3 id="HR想了解什么？-1"><a href="#HR想了解什么？-1" class="headerlink" title="HR想了解什么？"></a>HR想了解什么？</h3><ol><li>考察你工作的稳定性，看你是否想把目前所在城市做为职业发展的长远目标城市，是否会长期在这里发展</li><li>是否存在还没解决的生活问题？会不会影响入职时间或者其他。比如外地实习生租房就是一个很大的难题</li><li>考察原因，你来这个城市的原因有很大的信息量。例如：男/女朋友在这个城市(因为感情结束而离职的人也不少 判定为不稳定)</li></ol><h3 id="回答的重点-1"><a href="#回答的重点-1" class="headerlink" title="回答的重点"></a>回答的重点</h3><p>记住这五个大字 <strong><em>为了我自己！</em></strong></p><p>一定要体现出自己是有准备有决心有能力在外地工作生活的，请提供一些让自己看起来稳定的理由</p><h3 id="参考回答方向"><a href="#参考回答方向" class="headerlink" title="参考回答方向"></a>参考回答方向</h3><p>1.这个城市的工作机会更多，薪资也不错，我还年轻，想给自己 <strong>几年</strong> 的时间锻炼一下<br>2.我 <strong>一直</strong> 想来这个城市生活，大学期间就做了 <strong>很多的准备</strong> ，打工存钱，实习等等，自己一个人生活是没有问题的<br>3.我的亲戚/朋友在这里， <strong>我会和他们一起住，生活上有个照顾比较方便，爸妈也放心</strong><br>4.我和男/女朋友恋爱多年已经 <strong>有结婚的打算</strong> ，我们计划在这里 <strong>结婚定居</strong></p><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><p>1.因为男朋友在这，我们想结束异地我就辞职过来了</p><p>点评：如果分手，是不是又要离职换地方了？如果两人还没有结婚的打算，可以换个其他的理由</p><p>2.还不确定能呆多久呢，想先来试试看在考虑要不要留下来</p><p>点评：太不稳定了，可能今天上班，明天工作的不开心就走了</p><p>3.脑袋一热，买票就来了，还没找好住的地方。先来面试吧，找到工作再说</p><p>点评：明显的没有计划，没有准备</p><p><strong>参考链接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/31369563" target="_blank" rel="noopener">HR问：你的职业规划是什么？怎么回答？</a></p><p><a href="https://zhuanlan.zhihu.com/p/32814546" target="_blank" rel="noopener">面试最容易被刷的题：你为什么来这个城市工作而不回家乡呢？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你的职业规划是什么？&lt;/p&gt;
&lt;p&gt;你为什么来这个城市工作而不回家乡？&lt;/p&gt;
&lt;p&gt;这篇来讲一讲遇到这一类职业规划相关问题怎样的回答才会受到HR的欣赏&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：SpringMVC面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210405.html"/>
    <id>https://www.gengruiblog.cn/article/20210405.html</id>
    <published>2021-04-04T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.549Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：SpringMVC面试题</p><a id="more"></a><h2 id="1-MVC是什么的缩写？"><a href="#1-MVC是什么的缩写？" class="headerlink" title="1.MVC是什么的缩写？"></a>1.MVC是什么的缩写？</h2><p>MVC是模型(Model)、视图(View)、控制器(Controller)的缩写</p><h2 id="2-根据下图描述MVC模式下的请求响应流程"><a href="#2-根据下图描述MVC模式下的请求响应流程" class="headerlink" title="2.根据下图描述MVC模式下的请求响应流程"></a>2.根据下图描述MVC模式下的请求响应流程</h2><p><img src="https://gengrui01.github.io/picture/springmvc-interview-question/1.png" alt=""></p><p>1）    客户端浏览器请求发送到控制器</p><p>2）    控制器调用模型层方法</p><p>3）    模型层操作数据库</p><p>4）    模型层告诉控制器操作完成 返回数据</p><p>5）    控制器调用视图层渲染页面</p><p>6）    视图层将渲染好的页面返回控制器</p><p>7）    控制器发送响应到浏览器 浏览器展示页面</p><h2 id="3-SpringMVC基础配置内容"><a href="#3-SpringMVC基础配置内容" class="headerlink" title="3.SpringMVC基础配置内容"></a>3.SpringMVC基础配置内容</h2><ul><li><p>加载注解驱动： <code>&lt;mvc:annotation-driven/&gt;</code></p></li><li><p>静态资源过滤： <code>&lt;mvc:default-servlet-handler/&gt;</code></p></li><li><p>视图解析器：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-web-xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？"><a href="#4-web-xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？" class="headerlink" title="4.web.xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？"></a>4.web.xml文件中设置SpringMVC拦截请求时url-pattern中的内容有何含义？</h2><p>url-pattern中的内容是用来标识请求拦截的</p><ul><li>/ 匹配所有的请求；（不包括.jsp）</li><li>/* 匹配所有的请求；（包括.jsp）</li><li>为空时所有请求都会被SpringMVC拦截</li></ul><h2 id="5-SpringMVC请求映射注解有哪些？"><a href="#5-SpringMVC请求映射注解有哪些？" class="headerlink" title="5.SpringMVC请求映射注解有哪些？"></a>5.SpringMVC请求映射注解有哪些？</h2><table><thead><tr><th>请求映射注解</th><th>说明</th><th>类/方法</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>通用的请求处理</td><td>类</td></tr><tr><td>@GetMapping</td><td>处理 HTTP GET 请求</td><td>查询方法</td></tr><tr><td>@PostMapping</td><td>处理 HTTP POST 请求</td><td>新增修改方法</td></tr><tr><td>@PutMapping</td><td>处理 HTTP PUT 请求</td><td>新增修改方法</td></tr><tr><td>@PatchMapping</td><td>处理 HTTP PATCH 请求</td><td>新增修改方法</td></tr><tr><td>@DeleteMapping</td><td>处理 HTTP DELETE 请求</td><td>删除方法</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：SpringMVC面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：MyBatis面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210404.html"/>
    <id>https://www.gengruiblog.cn/article/20210404.html</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.568Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：MyBatis面试题</p><a id="more"></a><h2 id="1-ORM是什么的缩写？"><a href="#1-ORM是什么的缩写？" class="headerlink" title="1.ORM是什么的缩写？"></a>1.ORM是什么的缩写？</h2><p>ORM是对象(Object)、关系(Relational)、映射(Mapping)的缩写</p><h2 id="2-ORM有什么作用？"><a href="#2-ORM有什么作用？" class="headerlink" title="2.ORM有什么作用？"></a>2.ORM有什么作用？</h2><p>ORM会把对SQL的操作转换为对象的操作，从而让程序员使用起来更加方便和易于接受</p><h2 id="3-Hibernate与MyBatis的区别？"><a href="#3-Hibernate与MyBatis的区别？" class="headerlink" title="3.Hibernate与MyBatis的区别？"></a>3.Hibernate与MyBatis的区别？</h2><ul><li>Hibernate<ul><li>全自动化ORM框架，数据库移植性好，基础业务几乎不需要写SQL</li><li>易学难精，上手简单但熟练使用需要阅读大量文档，框架结构复杂</li></ul></li><li>MyBatis<ul><li>半自动化ORM框架，数据库移植性一般，基础业务仍需写SQL，但可以通过基础Mapper来简化</li><li>易学易用，上手简单，结构精简清晰，易深入学习</li></ul></li></ul><h2 id="4-要想使用MyBatis需要导入的包有哪些？"><a href="#4-要想使用MyBatis需要导入的包有哪些？" class="headerlink" title="4.要想使用MyBatis需要导入的包有哪些？"></a>4.要想使用MyBatis需要导入的包有哪些？</h2><ul><li>mysql-connector-java：MySQL驱动包</li><li>mybatis：MyBatis基础包</li></ul><h2 id="5-MyBatis配置用到哪些标签？"><a href="#5-MyBatis配置用到哪些标签？" class="headerlink" title="5.MyBatis配置用到哪些标签？"></a>5.MyBatis配置用到哪些标签？</h2><ul><li>configuration 标签对应 Configuration 类，负责 MyBatis 架构中的配置部分</li><li>environment 标签对应 Environment 类，是环境变量，必须有唯一的 id</li><li>transactionManager 标签对应 JdbcTransactionFactory 类，表示事务工厂，当 MyBatis 需要新建事务的时候，会通过它来新建</li><li>dataSource 标签对应 PooledDataSource 类，表示数据源，通过其构造参数，我们传入了数据库 url，数据库用户和密码等配置</li></ul><h2 id="6-mapper文件中常用标签"><a href="#6-mapper文件中常用标签" class="headerlink" title="6.mapper文件中常用标签"></a>6.mapper文件中常用标签</h2><ul><li>新增数据：<insert></insert></li><li>删除数据：<delete></delete></li><li>修改数据：<update></update></li><li>查询数据：<select></select></li></ul><h2 id="7-mapper文件中的SQL语句使用什么符号引用传入参数？"><a href="#7-mapper文件中的SQL语句使用什么符号引用传入参数？" class="headerlink" title="7.mapper文件中的SQL语句使用什么符号引用传入参数？"></a>7.mapper文件中的SQL语句使用什么符号引用传入参数？</h2><p>mapper文件中的SQL语句使用 <strong><em>#{}</em></strong> 符号引用传入参数</p><h2 id="8-写通过id查询表中单条数据的Dao层代码"><a href="#8-写通过id查询表中单条数据的Dao层代码" class="headerlink" title="8.写通过id查询表中单条数据的Dao层代码"></a>8.写通过id查询表中单条数据的Dao层代码</h2><p>java代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/1.png" alt=""></p><p>xml代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/6.png" alt=""></p><h2 id="9-写查询表中所有数据的Dao层代码"><a href="#9-写查询表中所有数据的Dao层代码" class="headerlink" title="9.写查询表中所有数据的Dao层代码"></a>9.写查询表中所有数据的Dao层代码</h2><p>java代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/2.png" alt=""></p><p>xml代码：</p><p><img src="https://gengrui01.github.io/picture/mybatis-interview-question/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：MyBatis面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>大厂面试：Spring面试题</title>
    <link href="https://www.gengruiblog.cn/article/20210403.html"/>
    <id>https://www.gengruiblog.cn/article/20210403.html</id>
    <published>2021-04-02T16:00:00.000Z</published>
    <updated>2021-04-20T01:06:43.534Z</updated>
    
    <content type="html"><![CDATA[<p>大厂面试：Spring面试题</p><a id="more"></a><h2 id="1-Spring体系结构由哪几部分构成？"><a href="#1-Spring体系结构由哪几部分构成？" class="headerlink" title="1.Spring体系结构由哪几部分构成？"></a>1.Spring体系结构由哪几部分构成？</h2><ul><li>Data Access/Integration：持久层</li><li>Web：表现层</li><li>Test：测试层</li><li>中间的两部分 是Spring框架的核心功能</li></ul><h2 id="2-Spring有哪些核心功能？"><a href="#2-Spring有哪些核心功能？" class="headerlink" title="2.Spring有哪些核心功能？"></a>2.Spring有哪些核心功能？</h2><ul><li>控制反转(IOC)</li><li>依赖注入(DI)</li><li>面向切面编程(AOP)</li></ul><h2 id="3-什么是控制反转-IOC-？"><a href="#3-什么是控制反转-IOC-？" class="headerlink" title="3.什么是控制反转(IOC)？"></a>3.什么是控制反转(IOC)？</h2><p>IOC是一种设计模式，将实例化对象的控制权由手动的new变成了Spring框架通过反射机制实例化，并将对象的实例存入在容器种进行管理</p><ol start="4"><li>什么是依赖注入(DI)？</li></ol><p>DI是指对象中其余对象的引用通过Spring框架直接注入</p><h2 id="5-什么是面向切面编程-AOP-？"><a href="#5-什么是面向切面编程-AOP-？" class="headerlink" title="5.什么是面向切面编程(AOP)？"></a>5.什么是面向切面编程(AOP)？</h2><p>AOP指的就是通过预编译和运行期动态代理的方式实现在程序运行某个方法的时候，不修改原始执行代码逻辑，由程序动态地执行某些额外的功能，对原有的方法做增强</p><h2 id="6-要想使用Spring需要导入的基础包有哪些？"><a href="#6-要想使用Spring需要导入的基础包有哪些？" class="headerlink" title="6.要想使用Spring需要导入的基础包有哪些？"></a>6.要想使用Spring需要导入的基础包有哪些？</h2><ul><li>spring-core：Core模块主要包含Spring框架基本的核心工具类，Spring的其他组件要都要使用到这个包里的类，Core模块是其他组件的基本核心</li><li>spring-beans：包含访问配置文件、创建和管理bean以及进行IOC/DI操作相关的所有类</li><li>spring-context：Spring的上下文即IOC容器，通过上下文可以获得容器中的Bean</li><li>spring-expression：EL表达式语言用于在运行时查询和操纵对象</li></ul><h2 id="7-分析ApplicationContext执行过程"><a href="#7-分析ApplicationContext执行过程" class="headerlink" title="7.分析ApplicationContext执行过程"></a>7.分析ApplicationContext执行过程</h2><p>1）ApplicationContext加载项目中的Spring配置</p><p>2）调用refresh方法刷新容器（bean的实例化就在这个方法中）</p><p>3）context.getBean()方法是通过配置文件中声明的bean标签id属性获取容器内的实例</p><h2 id="8-IOC常用注解"><a href="#8-IOC常用注解" class="headerlink" title="8.IOC常用注解"></a>8.IOC常用注解</h2><ul><li>@Component：一般用于通用组件类上使用的注解</li><li>@Service：一般用于业务逻辑层上使用的注解</li><li>@Controller：一般用于流程控制层上使用的注解</li><li>@Repository：一般用于数据持久层上使用的注解</li></ul><h2 id="9-DI常用注解"><a href="#9-DI常用注解" class="headerlink" title="9.DI常用注解"></a>9.DI常用注解</h2><ul><li>@Autowired：自动按照类型注入</li><li>@Qualifier：在按照类型注入的基础之上再按照Bean的id注入</li><li>@Resource：默认按照id注入找不到再按照类型注入</li></ul><h2 id="10-AOP常用注解"><a href="#10-AOP常用注解" class="headerlink" title="10.AOP常用注解"></a>10.AOP常用注解</h2><ul><li>@Aspect：表明某个类为切面类</li><li>@Pointcut：声明一个切入点，表明哪些类的哪些方法需要被增强</li><li>@Before 前置通知</li><li>@AfterReturning 后置通知</li><li>@After 最终通知</li><li>@AfterThrowing 异常通知</li></ul><h2 id="11-什么是代理模式？"><a href="#11-什么是代理模式？" class="headerlink" title="11.什么是代理模式？"></a>11.什么是代理模式？</h2><p>代理模式是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用</p><p>代理模式可以分为静态代理和动态代理</p><p>动态代理常用的有基于接口和基于子类两种方式</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大厂面试：Spring面试题&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.gengruiblog.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
