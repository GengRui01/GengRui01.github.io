<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>耿锐的博客</title>
  
  <subtitle>欢迎的来到耿锐的技术小栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gengruiblog.cn/"/>
  <updated>2021-09-13T10:35:05.768Z</updated>
  <id>https://www.gengruiblog.cn/</id>
  
  <author>
    <name>耿锐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java泛型</title>
    <link href="https://www.gengruiblog.cn/article/20210825.html"/>
    <id>https://www.gengruiblog.cn/article/20210825.html</id>
    <published>2021-08-24T16:00:00.000Z</published>
    <updated>2021-09-13T10:35:05.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向上转型-amp-向下转型"><a href="#向上转型-amp-向下转型" class="headerlink" title="向上转型 &amp; 向下转型"></a>向上转型 &amp; 向下转型</h2><p>Java语言允许用父类申明变量,用子类实例化,这种将子类对象直接赋值给父类对象的语法称为向上转型,而且这个过程是自动化的</p><p>但反过来用子类申明变量用父类实例化是不允许的,因为子类往往比父类更加复杂,计算机无法将简单的对象自动的转化为复杂的对象</p><p>向下转型需要做强制的转化,在父类对象前使用强制转换的语法才能实现向下转型,而且转型之后也有可能发生数据缺失</p><a id="more"></a><p><img src="https://gengrui01.github.io/picture/java-generics/1.png" alt=""></p><h2 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h2><p>举个例子帮助大家了解泛型是什么</p><p><img src="https://gengrui01.github.io/picture/java-generics/2.png" alt=""></p><p>这里有一条公路，我们可以在这条路上开汽车/骑自行车/骑马</p><p>但如果这条路上放了一个标志机动车道这样的话，我们就不能在这条路上骑自行车和骑马了</p><p>我们只能开汽车，如果这个标志换成了自行车道的话，那么我们就只能骑自行车，但不能开汽车了，也不能骑马</p><p>这个标志限制了这条路上允许行驶的交通工具，它的作用啊就相当于泛型</p><p>Java1.5版本提供了泛型的概念，泛型的实质上就是使程序员可以定义安全的数据类型</p><h2 id="定义泛型类"><a href="#定义泛型类" class="headerlink" title="定义泛型类"></a>定义泛型类</h2><p>泛型可以在定义类的时候定义,它的语法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名&lt;类型参数<span class="number">1</span>,类型参数<span class="number">2</span>,...,类型参数n&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>创建类时在类名与大括号之间写一对尖括号，在括号里面写泛型的类型参数，可以写一个也可以写很多个</p><p>具体例子如下:</p><p><img src="https://gengrui01.github.io/picture/java-generics/3.png" alt=""></p><p>在这个监控号里面呢写了一个泛型类型，我们可以起任意一个名字(一般不用已经存在的类名)</p><p>通常会用一个大写的英文字母来代替，之后直接用这个泛型的来创建成员变量,也可以放在方法的参数中，也可以作为方法的返回值</p><p><strong><em>TIPS:</em></strong></p><blockquote><p>如果我们定义了泛型却不使用,Eclipse会发出警告<br>但这样啊不会影响到我们程序的运行</p></blockquote><h2 id="使用泛型-VS-不使用泛型"><a href="#使用泛型-VS-不使用泛型" class="headerlink" title="使用泛型 VS 不使用泛型"></a>使用泛型 VS 不使用泛型</h2><p>接下来写两个例子对比使用泛型和不使用泛型的效果</p><h3 id="不使用泛型"><a href="#不使用泛型" class="headerlink" title="不使用泛型"></a>不使用泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object b; <span class="comment">// 定义Object类型成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getB</span><span class="params">()</span> </span>&#123; <span class="comment">// 设置相应getXXX()方法</span></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(Object b)</span> </span>&#123; <span class="comment">// 设置相应setXXX()方法</span></span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">t1.setB(<span class="keyword">true</span>); <span class="comment">// 向上转型操作</span></span><br><span class="line">System.out.println(t1.getB());</span><br><span class="line">Test t2 = <span class="keyword">new</span> Test();</span><br><span class="line">t2.setB(<span class="number">12.3</span>);</span><br><span class="line">Float f = (Float) (t2.getB()); <span class="comment">// 向下转型操作</span></span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码是有隐患的,比如我们将Float类型的t2强转为int类型时编译是不会报错的,但是运行必报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)t2.getB();</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>于是JDK提供了泛型</p><h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T b; <span class="comment">// 定义泛型成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getB</span><span class="params">()</span> </span>&#123; <span class="comment">// 设置相应getXXX()方法</span></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(T b)</span> </span>&#123; <span class="comment">// 设置相应setXXX()方法</span></span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test2&lt;Boolean&gt; t1 = <span class="keyword">new</span> Test2&lt;Boolean&gt;();</span><br><span class="line">t1.setB(<span class="keyword">true</span>);</span><br><span class="line">        t1.setB(<span class="string">"abc"</span>); <span class="comment">// 会报参数类型错误</span></span><br><span class="line">        <span class="keyword">float</span> i = t1.getB(); <span class="comment">// 会报参数类型错误</span></span><br><span class="line">System.out.println(t1.getB());</span><br><span class="line"></span><br><span class="line">Test2&lt;Integer&gt; t2 = <span class="keyword">new</span> Test2&lt;&gt;();<span class="comment">// JDK1.7升级,后面泛型可省略</span></span><br><span class="line">t2.setB(<span class="number">123</span>);</span><br><span class="line">System.out.println(t2.getB());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>TIPS:</em></strong></p><blockquote><p>泛型定义时可以不止一个<br>但申明时泛型要么都实现,要么都不实现(不写就是Object)</p></blockquote><h2 id="限制泛型的类型"><a href="#限制泛型的类型" class="headerlink" title="限制泛型的类型"></a>限制泛型的类型</h2><p>我们使用任何的类型来实例化一个泛型对象，这样是存在弊端的</p><p>于是Java提供了一种语法来限制泛型的可实现类,这种语法呢就是泛型的继承</p><p>它的语法如下图所示:</p><p><img src="https://gengrui01.github.io/picture/java-generics/6.png" alt=""></p><p>我们在创建泛型的时候使用extends关键字，这样就给泛型T添加了一个限制</p><p>这个泛型必须是anyClass的子类，虽然这里使用的是extend关键字，但是这个anyClass既可以是类也可以是接口</p><p>我们呢写一个例子给大家看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">List</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test3&lt;ArrayList&gt; t1 = <span class="keyword">new</span> Test3&lt;&gt;();</span><br><span class="line">Test3&lt;LinkedList&gt; t2 = <span class="keyword">new</span> Test3&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Test3&lt;HashSet&gt; t3 = <span class="keyword">new</span> Test3&lt;&gt;(); <span class="comment">// HashSet 不是 List 的子类 所以会报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>泛型机制中提供了泛型通配符，它的作用主要是在创建泛型对象时限制泛型的类型，并且啊限制泛型对象的使用</p><p>它的语法如下图所示:</p><p><img src="https://gengrui01.github.io/picture/java-generics/4.png" alt=""></p><p>这里的问号来代表泛型通配符，他可以代表任意的类型</p><p>如果这个问号继承了一个类那么这个泛型就必须是anyClass的子类,并且此对象不能作增加和改写的操作，限制了这个泛型的对象只能读取，不能增加和改写</p><p>泛型通配符还有另外一种使用方法，可以使用super关键字，这样就限制了泛型必须是anyClass或者是anyClass的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        l1.add(<span class="string">"成员1"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;? extends List&gt; l2 = <span class="keyword">new</span> ArrayList&lt;List&gt;();<span class="comment">// 指定了上界</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> List&gt; l3 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();<span class="comment">// 指定了下界</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后呢，我们对泛型做出一些总结</p><ol><li>泛型只能是类类型</li></ol><p>正确: <code>Demo&lt;Integer&gt;</code></p><p>错误: <code>Demo&lt;int&gt;</code></p><ol start="2"><li>泛型的类型个数呢可以是多个</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意泛型最好呢是要写一个单个的英文字母</span><br><span class="line"></span><br><span class="line">3. 使用extends关键字限制泛型使用的范围</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;Demo&lt;T extends Number&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用通配符来限制泛型的上下界</li></ol><p><code>Demo&lt;?&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;向上转型-amp-向下转型&quot;&gt;&lt;a href=&quot;#向上转型-amp-向下转型&quot; class=&quot;headerlink&quot; title=&quot;向上转型 &amp;amp; 向下转型&quot;&gt;&lt;/a&gt;向上转型 &amp;amp; 向下转型&lt;/h2&gt;&lt;p&gt;Java语言允许用父类申明变量,用子类实例化,这种将子类对象直接赋值给父类对象的语法称为向上转型,而且这个过程是自动化的&lt;/p&gt;
&lt;p&gt;但反过来用子类申明变量用父类实例化是不允许的,因为子类往往比父类更加复杂,计算机无法将简单的对象自动的转化为复杂的对象&lt;/p&gt;
&lt;p&gt;向下转型需要做强制的转化,在父类对象前使用强制转换的语法才能实现向下转型,而且转型之后也有可能发生数据缺失&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.gengruiblog.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java枚举类型</title>
    <link href="https://www.gengruiblog.cn/article/20210824.html"/>
    <id>https://www.gengruiblog.cn/article/20210824.html</id>
    <published>2021-08-23T16:00:00.000Z</published>
    <updated>2021-09-13T04:34:32.092Z</updated>
    
    <content type="html"><![CDATA[<p>常量指的就是计算机中不可改变的量。比如一年中有四个季节，彩虹有七种原色，这些都是固定的值，也就是所谓的常量</p><p>在Java中我们通过使用final关键字来创建常量</p><p>但是这种方式创建出的常量仍然存在一些弊端，所以JDK1.5中就新增了枚举的概念</p><a id="more"></a><p>枚举是一种数据类型，它是一系列具有名称的常量的集合</p><p>枚举和普通的常量有一些不同之处，如果使用枚举的话，只能使用枚举中已经设定好的常量，只要是不在这个集合中的常量我们都无法使用</p><h2 id="创建枚举"><a href="#创建枚举" class="headerlink" title="创建枚举"></a>创建枚举</h2><p>创建枚举的语法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    枚举<span class="number">1</span>,</span><br><span class="line">    枚举<span class="number">2</span>,</span><br><span class="line">    枚举<span class="number">3</span>,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看这里使用了enum关键字，而这个enum关键字它和class、interface这些关键字的作用大致相似，只不过它所声明的这个类型叫做枚举类型</p><p>用户可以将一个枚举类型看作成为一个类，他继承了java.lang.Enum这个类</p><p>当我们定义一个枚举类型的时候,每一个枚举类型的成员都可以看作为这个类型的实例，而这些枚举类型都默认被这个<code>public static final</code>修饰</p><p>也就是说这些对象都是公有的静态常量，所以当我们使用枚举类型成员的时候，直接可以用<code>枚举名.枚举值</code>的方式来调用这些枚举成员</p><p>我们来看一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Constants&#123;</span><br><span class="line">    Constants_A,</span><br><span class="line">    Constants_B,</span><br><span class="line">    Constants_C,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建枚举成员的时候不需要写它是什么类型,只需要直接像这样给他写一个名字就可以了,然后用逗号隔开</p><p>最后一个枚举成员，后面可以写分号，也可以写逗号，也可以什么都不写，这个枚举我们就是创建完了</p><h2 id="普通常量-VS-枚举常量"><a href="#普通常量-VS-枚举常量" class="headerlink" title="普通常量 VS 枚举常量"></a>普通常量 VS 枚举常量</h2><h3 id="普通常量"><a href="#普通常量" class="headerlink" title="普通常量"></a>普通常量</h3><p>首先创建一个接口,接口里面的量都是公有静态常量,默认会有<code>public static final</code>修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Constants</span> </span>&#123; <span class="comment">// 将常量放置在接口中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Constants_A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Constants_B = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在demo中定义doit()方法,将常量作为参数传进方法,根据常量的值打出对应常量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doit</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line"><span class="keyword">case</span> Constants.Constants_A:</span><br><span class="line">System.out.println(<span class="string">"doit() Constants_A"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Constants.Constants_B:</span><br><span class="line">System.out.println(<span class="string">"doit() Constants_B"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">doit(Constants.Constants_A); <span class="comment">// 使用接口中定义的常量</span></span><br><span class="line">        doit(<span class="number">12</span>);</span><br><span class="line">doit(<span class="number">3</span>);<span class="comment">// 使用接口中不存在的常量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/java-enum/3.png" alt=""></p><p>普通变量有两个缺点:</p><ol><li>doit()方法传入的参数如果在常量中不存在,编译运行都没有任何报错信息</li><li>两个常量可以等于同一个值,编译时switch case报错</li></ol><h3 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h3><p>创建一个枚举,枚举里面有常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Constants2 &#123;</span><br><span class="line">    Constants_A, Constants_B, Constants_C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在demo中定义doit2()方法,将枚举作为参数传进方法,根据枚举打出对应枚举名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个方法，这里的参数为枚举类型对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doit2</span><span class="params">(Constants2 constants2)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">switch</span> (constants2) &#123;</span><br><span class="line">        <span class="keyword">case</span> Constants_A:</span><br><span class="line">            System.out.println(<span class="string">"doit2() Constants_A"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Constants_B:</span><br><span class="line">            System.out.println(<span class="string">"doit2() Constants_B"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Constants_C:</span><br><span class="line">            System.out.println(<span class="string">"doit2() Constants_C"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加main方法,测试打印的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doit2(Constants2.Constants_A);</span><br><span class="line">doit2(Constants2.Constants_B);</span><br><span class="line">doit2(Constants2.Constants_C);</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/java-enum/4.png" alt=""></p><p>注意:</p><ol><li>doit()方法传入的参数必须是枚举类型对象</li><li>枚举类型没有值</li></ol><h2 id="枚举类型的常用方法"><a href="#枚举类型的常用方法" class="headerlink" title="枚举类型的常用方法"></a>枚举类型的常用方法</h2><p>枚举类型的继承自java.lang.Enum，所以枚举也可以调用方法，介绍一下比较常用的这4个方法</p><h3 id="values-方法"><a href="#values-方法" class="headerlink" title="values()方法"></a>values()方法</h3><p>可以将枚举类型的所有成员以数组的形式返回出来</p><p>我们在main方法中打印Constants2中的枚举成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constants2[] enumArray = Constants2.values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; enumArray.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">"枚举类型成员变量："</span> + enumArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个value的这个方法之后呢，会枚举类型的所有成员封装成一个数组</p><p><img src="https://gengrui01.github.io/picture/java-enum/5.png" alt=""></p><h3 id="valueOf-方法"><a href="#valueOf-方法" class="headerlink" title="valueOf()方法"></a>valueOf()方法</h3><p>该方法可以将普通字符串转化为枚举实例,类似于包装类提供的valueOf()方法</p><p>我们在main方法中创建两个枚举对象,分别接收枚举对象以及valueOf()方法转化的枚举实例</p><p>打印俩枚举对象是否完全相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constants2 c1 = Constants2.Constants_A;</span><br><span class="line">Constants2 c2 = Constants2.valueOf(<span class="string">"Constants_A"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"c1与c2是否相等："</span> + (c1 == c2));</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/java-enum/6.png" alt=""></p><p>在<code>valueOf()</code>中传入不存在的值,如下代码所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constants2 c2 = Constants2.valueOf(<span class="string">"OK"</span>);</span><br></pre></td></tr></table></figure><p>会报找不到枚举值的错误</p><p><img src="https://gengrui01.github.io/picture/java-enum/7.png" alt=""></p><h3 id="ordinal-方法"><a href="#ordinal-方法" class="headerlink" title="ordinal()方法"></a>ordinal()方法</h3><p>枚举成员的是有索引位置的,第一个索引为0,第二个为1,以此类推</p><p><img src="https://gengrui01.github.io/picture/java-enum/2.png" alt=""></p><p>ordinal()方法就是用来得到枚举成员的位置索引</p><p>我们在main方法中输出Constants2所有枚举成员的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constants2[] enumArray = Constants2.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; enumArray.length; i++) &#123;</span><br><span class="line">    System.out.println(enumArray[i] + <span class="string">"在枚举类型中位置索引值是"</span> + enumArray[i].ordinal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/java-enum/9.png" alt=""></p><h3 id="compareTo-方法"><a href="#compareTo-方法" class="headerlink" title="compareTo()方法"></a>compareTo()方法</h3><p>该方法用来比较两个枚举对象在定义时的顺序</p><p>仍然以Constants2为例</p><p><img src="https://gengrui01.github.io/picture/java-enum/1.png" alt=""></p><p>我们在main方法中创建一个枚举对象存放Constants_B</p><p>再创建一个数组enumArray获取枚举类型的所有成员</p><p>最后for循环遍历enumArray,输出Constants_B和枚举中所有成员的比较结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Constants2 c = Constants2.Constants_B;</span><br><span class="line">Constants2[] enumArray = Constants2.values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; enumArray.length; i++) &#123;</span><br><span class="line">    System.out.println(c + <span class="string">"与枚举类型成员"</span> + enumArray[i] + <span class="string">"的比较结果为"</span> + c.compareTo(enumArray[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/java-enum/8.png" alt=""></p><h2 id="枚举类型的优势"><a href="#枚举类型的优势" class="headerlink" title="枚举类型的优势"></a>枚举类型的优势</h2><p>枚举类型提供了一种非常友好的定义常量的方法</p><p>枚举类型有以下几个特点</p><ol><li>它是类型安全的，因为每一个枚举都是一个枚举对象而不是一个具体的数值，所以它不会被其他数值所替代</li><li>它是紧凑有效的数据定义</li><li>枚举还可以和程序的其他部分完美的交互，比如说switch语句就直接可以用枚举来作为参数</li><li>它的运行效率高</li></ol><p>第1点和第4点是枚举最大的优势类型,所以我们通常定义常量的时候建议大家多使用枚举类型，而不是使用传统的常量数字</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常量指的就是计算机中不可改变的量。比如一年中有四个季节，彩虹有七种原色，这些都是固定的值，也就是所谓的常量&lt;/p&gt;
&lt;p&gt;在Java中我们通过使用final关键字来创建常量&lt;/p&gt;
&lt;p&gt;但是这种方式创建出的常量仍然存在一些弊端，所以JDK1.5中就新增了枚举的概念&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.gengruiblog.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Python类的继承</title>
    <link href="https://www.gengruiblog.cn/article/20210615.html"/>
    <id>https://www.gengruiblog.cn/article/20210615.html</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2021-07-24T04:02:36.455Z</updated>
    
    <content type="html"><![CDATA[<p>未完结</p><a id="more"></a><h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><p>在 <a href="https://gengrui01.github.io/article/20210610.html" target="_blank" rel="noopener">Python面向对象编程</a> 中有提到类会有一些属性，比如Person类有姓名、性别等属性来修饰Person类</p><p><img src="https://gengrui01.github.io/picture/python-class-extends/1.png" alt=""></p><p>但在描述某些特定种类的人(例如：老师、学生)时，这些属性便不能对特定种类的人进行准确地描述</p><p>这时我们将特定种类的人(例如：老师、学生)抽象出一个新的对象，每个对象又会有特定的属性</p><p><img src="https://gengrui01.github.io/picture/python-class-extends/2.png" alt=""></p><p>虽然我们把特定种类的人(例如：老师、学生)抽象为了一个新的对象，但是特定种类的人仍然是人</p><p>我们把这种特定种类的人和人本身的关系称为继承</p><p>人(Person)类称为父类，特定种类的人(例如：老师、学生)称为子类</p><p>子类是继承于父类的</p><p><img src="https://gengrui01.github.io/picture/python-class-extends/3.png" alt=""></p><p>继承的优势：</p><blockquote><p>继承后子类有父类的所有属性和功能，比如特定种类的人(例如：老师、学生)仍然拥有人所拥有的属性和功能<br>这样子类定义的时候只需要定义缺少的属性，实现缺少的功能即可，提高了代码复用率，减轻程序员负担</p></blockquote><h2 id="代码实现类的继承"><a href="#代码实现类的继承" class="headerlink" title="代码实现类的继承"></a>代码实现类的继承</h2><p>首先定义父类 人(Person)类，他的定义方法和普通类的定义没有区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未完结&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python对象的方法</title>
    <link href="https://www.gengruiblog.cn/article/20210613.html"/>
    <id>https://www.gengruiblog.cn/article/20210613.html</id>
    <published>2021-06-12T16:00:00.000Z</published>
    <updated>2021-07-20T05:54:07.611Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://gengrui01.github.io/article/20210612.html" target="_blank" rel="noopener">Python对象的属性</a> 中我们知道了私有属性只能在类的内部操作，没有办法从外部访问</p><p>但是如果外部需要操作私有属性怎么办？这个时候可以通过定义类或者实例的方法来操作私有属性</p><p>本文就来介绍如何定义类或者实例的方法</p><a id="more"></a><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>实例的方法指的就是在类中定义的函数，实例方法的第一个参数永远都是 <code>self</code> ， <code>self</code> 是一个引用，指向调用该方法的实例对象本身，除此以外，其他参数和普通函数是完全一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br></pre></td></tr></table></figure><p>在上面的定义， <code>name</code> 是实例的私有属性，从外部是无法访问的，而 <code>get_name(self)</code> 就是一个实例方法，在实例方法里面是可以操作私有属性的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Person(<span class="string">"Anne"</span>)</span><br><span class="line">print(p.getName())</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-object-method/1.png" alt=""></p><p>当然，实例方法并不仅仅是为私有属性服务的，我们可以把和类的实例有关的操作都抽象成实例方法</p><p>比如：打印实例的详细信息等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, location)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__location = location</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'name = &#123;&#125;, age = &#123;&#125;, location = &#123;&#125;'</span>.format(self.name, self.age, self.__location)</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'wangwang'</span>, <span class="number">1</span>, <span class="string">'BeiJing'</span>)</span><br><span class="line">print(dog.getInfo())</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-object-method/2.png" alt=""></p><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>为了操作实例对象的私有属性我们定义了实例方法，同样的如果需要需要操作类的私有属性则应该定义类方法</p><p>实例方法的第一个参数 <code>self</code> 指向调用该方法的实例对象本身</p><p>类方法的第一个参数永远都是 <code>cls</code> ， <code>cls</code> 也是一个引用，指向类本身</p><p>类方法需要使用 <code>@classmethod</code> 来标记为类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    __location = <span class="string">'China'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLocation</span><span class="params">(cls, location)</span>:</span></span><br><span class="line">        cls.__location = location</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLocation</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__location</span><br><span class="line"></span><br><span class="line">print(Animal.getLocation())</span><br><span class="line">Animal.setLocation(<span class="string">'BeiJing'</span>)</span><br><span class="line">print(Animal.getLocation())</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-object-method/3.png" alt=""></p><p>因为是在类上调用而不是在实例上调用，所以类方法无法获得任何实例变量，只能获得类的引用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://gengrui01.github.io/article/20210612.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python对象的属性&lt;/a&gt; 中我们知道了私有属性只能在类的内部操作，没有办法从外部访问&lt;/p&gt;
&lt;p&gt;但是如果外部需要操作私有属性怎么办？这个时候可以通过定义类或者实例的方法来操作私有属性&lt;/p&gt;
&lt;p&gt;本文就来介绍如何定义类或者实例的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python对象的属性</title>
    <link href="https://www.gengruiblog.cn/article/20210612.html"/>
    <id>https://www.gengruiblog.cn/article/20210612.html</id>
    <published>2021-06-11T16:00:00.000Z</published>
    <updated>2021-07-20T05:59:09.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><h3 id="实例属性的定义"><a href="#实例属性的定义" class="headerlink" title="实例属性的定义"></a>实例属性的定义</h3><p>在 <a href="https://gengrui01.github.io/article/20210611.html" target="_blank" rel="noopener">Python类的定义和实例化</a> 中我们已经通过Person类创建出zhangsan、lisi等实例，但是这些实例看上去并没有任何区别</p><p>在现实世界中，一个人拥有名字、性别、年龄等等的信息</p><p>在Python中，可以通过以下的方式赋予实例这些属性</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangsan.name = <span class="string">'zhangsan'</span></span><br><span class="line">zhangsan.sex = <span class="string">'boy'</span></span><br><span class="line">zhangsan.age = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>除此以外，这些属性也可以和普通变量一样进行运算</p><p>比如zhangsan长大了一岁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangsan.age = zhangsan.age + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="实例属性的初始化"><a href="#实例属性的初始化" class="headerlink" title="实例属性的初始化"></a>实例属性的初始化</h3><p>上述方式定义一个实例的属性非常方便，但如果定义属性的过程中使用了不同的属性名字(比如性别，前者使用了sex，后者使用了gender)，那对于一个类的不同实例存储同一个信息就用了不同的属性，在后面将会难以维护</p><p>在定义 Person 类时，可以为Person类添加一个特殊的 <code>__init__()</code> 方法，当创建实例时， <code>__init__()</code> 方法被自动调用，我们就能在此为每个实例都统一加上以下属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure><p><strong><em>TIPS:</em></strong> </p><blockquote><p><code>__init__()</code> 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法）<br>后续参数则可以自由指定，和定义函数没有任何区别</p></blockquote><p>定义类后，就可以相应的实例化对象了，在实例化的时候需要提供除self以外的所有参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangsan = Person(<span class="string">'zhang san'</span>, <span class="string">'boy'</span>, <span class="number">18</span>)</span><br><span class="line">lisi = Person(<span class="string">'li si'</span>, <span class="string">'girl'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>使用方法还是和上面一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(zhangsan.age)</span><br></pre></td></tr></table></figure><h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><p>类和实例对象是有区别的，类是抽象，是模板，而实例则是根据类创建的对象</p><p>比如类：动物，只是一个抽象，并没有动物的详细信息，而猫、狗等，则是具体的动物，是类的对象(实例)</p><p>实例对象绑定的属性只属于这个实例，绑定在一个实例上的属性不会影响其它实例</p><p>同样的，类也可以绑定属性，但是类的属性不属于任何一个对象，而是属于这个类</p><p>如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个</p><p>也就是说，实例属性每个实例各自拥有，互相独立，而类属性有且只有一份</p><p>定义类属性可以直接在 class 中定义</p><p>比如在动物(Animal)类中，加入地域(location)的类属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    location = <span class="string">'China'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure><p>在上面的代码中，location就是属于Animal这个类的类属性</p><p>定义之后，通过Animal()实例化的所有对象都可以访问到location并且得到唯一的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dog = Animal(<span class="string">'wangwang'</span>, <span class="number">1</span>)</span><br><span class="line">cat = Animal(<span class="string">'mimi'</span>, <span class="number">3</span>)</span><br><span class="line">print(dog.name, dog.location)</span><br><span class="line">print(cat.name, cat.location)</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-object-attributes/1.png" alt=""></p><h2 id="类属性和实例属性的优先级"><a href="#类属性和实例属性的优先级" class="headerlink" title="类属性和实例属性的优先级"></a>类属性和实例属性的优先级</h2><p>属性可以分为类属性和实例属性，那么如果类属性和实例属性名字相同时会怎么样?</p><p>我们在 <code>Animal</code> 类定义的基础上，初始化一个名为 <code>location</code> 的实例属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    location = <span class="string">'China'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, location)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.location = location</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'wangwang'</span>, <span class="number">1</span>, <span class="string">'BeiJing'</span>)</span><br><span class="line">cat = Animal(<span class="string">'mimi'</span>, <span class="number">3</span>, <span class="string">'TianJing'</span>)</span><br><span class="line">print(dog.name, dog.location)</span><br><span class="line">print(cat.name, cat.location)</span><br><span class="line">print(Animal.location)</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-object-attributes/2.png" alt=""></p><p>可见在类属性和实例属性同时存在的情况下实例属性的优先级是要高于类属性的</p><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>并不是所有的属性都可以被外部访问的，不能被外部访问的属性称为私有属性，私有属性是以双下划线 <code>__</code> 开头的属性</p><h3 id="类私有属性"><a href="#类私有属性" class="headerlink" title="类私有属性"></a>类私有属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    __location = <span class="string">'China'</span></span><br></pre></td></tr></table></figure><h3 id="实例私有属性"><a href="#实例私有属性" class="headerlink" title="实例私有属性"></a>实例私有属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, location)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__location = location</span><br><span class="line"></span><br><span class="line">dog = Animal(<span class="string">'wangwang'</span>, <span class="number">1</span>, <span class="string">'BeiJing'</span>)</span><br><span class="line">print(dog.name)</span><br><span class="line">print(dog.age)</span><br><span class="line">print(dog.__location)</span><br></pre></td></tr></table></figure><p>私有属性是为了保护类或实例属性不被外部污染而设计的，在外部访问私有属性将会抛出异常，提示没有这个属性，如下图所示：</p><p><img src="https://gengrui01.github.io/picture/python-object-attributes/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实例属性&quot;&gt;&lt;a href=&quot;#实例属性&quot; class=&quot;headerlink&quot; title=&quot;实例属性&quot;&gt;&lt;/a&gt;实例属性&lt;/h2&gt;&lt;h3 id=&quot;实例属性的定义&quot;&gt;&lt;a href=&quot;#实例属性的定义&quot; class=&quot;headerlink&quot; title=&quot;实例属性的定义&quot;&gt;&lt;/a&gt;实例属性的定义&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://gengrui01.github.io/article/20210611.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python类的定义和实例化&lt;/a&gt; 中我们已经通过Person类创建出zhangsan、lisi等实例，但是这些实例看上去并没有任何区别&lt;/p&gt;
&lt;p&gt;在现实世界中，一个人拥有名字、性别、年龄等等的信息&lt;/p&gt;
&lt;p&gt;在Python中，可以通过以下的方式赋予实例这些属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python类的定义和实例化</title>
    <link href="https://www.gengruiblog.cn/article/20210611.html"/>
    <id>https://www.gengruiblog.cn/article/20210611.html</id>
    <published>2021-06-10T16:00:00.000Z</published>
    <updated>2021-07-19T10:32:19.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>在Python中，通过 <code>class</code> 关键字后跟类名定义一个类，类名以大写字母开头，整个类的内容以 <code>pass</code> 关键字结束</p><a id="more"></a><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们需要定义一个人(Person)类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>除此之外还有如下两种定义方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span>  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h2><p>定义了类之后，就可以对类进行实例化了，实例化是指把抽象的类赋予实物的过程</p><p>比如，定义好Person这个类后，就可以实例化多个Person出来了</p><p>创建实例使用类名()，类似函数调用的形式创建</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> <span class="keyword">pass</span></span><br><span class="line">zhangsan = Person()</span><br><span class="line">lisi = Person()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的定义&quot;&gt;&lt;a href=&quot;#类的定义&quot; class=&quot;headerlink&quot; title=&quot;类的定义&quot;&gt;&lt;/a&gt;类的定义&lt;/h2&gt;&lt;p&gt;在Python中，通过 &lt;code&gt;class&lt;/code&gt; 关键字后跟类名定义一个类，类名以大写字母开头，整个类的内容以 &lt;code&gt;pass&lt;/code&gt; 关键字结束&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python面向对象编程</title>
    <link href="https://www.gengruiblog.cn/article/20210610.html"/>
    <id>https://www.gengruiblog.cn/article/20210610.html</id>
    <published>2021-06-09T16:00:00.000Z</published>
    <updated>2021-07-19T07:50:50.573Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://gengrui01.github.io/article/20210605.html" target="_blank" rel="noopener">面向过程编程 VS 面向对象编程</a> 中有提到什么是面向对象编程</p><p>面向对象编程是一种程序设计的范式，通过面向对象编程使得我们的代码维护性更高</p><p>面向对象编程指的是将现实世界抽象并且建立起对象模型</p><a id="more"></a><h2 id="对象之间的关系"><a href="#对象之间的关系" class="headerlink" title="对象之间的关系"></a>对象之间的关系</h2><p>程序指的是不同对象之间相互调用的逻辑</p><p>比如人和车都是独立的对象</p><p><img src="https://gengrui01.github.io/picture/python-object-oriented/1.png" alt=""></p><p>但他们之间又存在某种关系，比如人驾驶车辆</p><p><img src="https://gengrui01.github.io/picture/python-object-oriented/2.png" alt=""></p><h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p>将现实世界抽象并且建立起每个对象模型称为类，比如人和车</p><h2 id="什么是类的属性"><a href="#什么是类的属性" class="headerlink" title="什么是类的属性"></a>什么是类的属性</h2><p>对于每个对象都会有一些可以用来描述对象的性质</p><p>比如 人的姓名、性别、年龄等，车的厂商、型号、颜色等</p><p><img src="https://gengrui01.github.io/picture/python-object-oriented/3.png" alt=""></p><h2 id="什么是类的实例化"><a href="#什么是类的实例化" class="headerlink" title="什么是类的实例化"></a>什么是类的实例化</h2><p>将现实世界抽象并且建立起每个对象模型称为类，比如人和车</p><p>抽象出来的对象也可以实例化为现实世界中的具体事物，每个事物的属性值可以不同</p><p>比如姓名张三、性别男、年龄18的人，姓名李四、性别女、年龄18的人…</p><p>对象实例化后得到的具体事物称为实例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://gengrui01.github.io/article/20210605.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向过程编程 VS 面向对象编程&lt;/a&gt; 中有提到什么是面向对象编程&lt;/p&gt;
&lt;p&gt;面向对象编程是一种程序设计的范式，通过面向对象编程使得我们的代码维护性更高&lt;/p&gt;
&lt;p&gt;面向对象编程指的是将现实世界抽象并且建立起对象模型&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Java语言程序设计架构</title>
    <link href="https://www.gengruiblog.cn/article/20210607.html"/>
    <id>https://www.gengruiblog.cn/article/20210607.html</id>
    <published>2021-06-06T16:00:00.000Z</published>
    <updated>2021-06-17T12:17:31.552Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章用来记录Java语言从 <strong>面向对象编程</strong>、<strong>基于组件开发</strong>、<strong>面向切面编程</strong> 到 <strong>面向服务架构</strong> 的全过程</p><a id="more"></a><h2 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程(OOP)"></a>面向对象编程(OOP)</h2><p>面向对象编程(Object-Oriented Programming)是一种编程范式，指在设计程序时大量运用类实例对象的方式</p><p>在面向对象中，算法与数据结构被看做是一个整体，称作对象</p><p>现实世界中任何类的对象都具有一定的属性和操作，也总能用数据结构与算法两者合一地来描述</p><p>所以可以用下面的等式来定义对象和程序：</p><blockquote><p>对象 = （算法 + 数据结构）<br>程序 = （对象 + 对象 + ……）</p></blockquote><p>从上面的等式可以看出，程序就是许多对象在计算机中相继表现自己，而对象则是一个个程序实体</p><p>过去的面向过程编程常常会导致所有的代码都包含在几个模块中，在做一些修改时常常牵一动百，使程序难以阅读和维护</p><p>使用OOP技术常常要使用许多代码模块，每个模块都只提供特定的功能，它们是彼此独立的</p><p>这样就增大了代码重用的几率，更加有利于软件的开发、维护和升级</p><p>当企业的系统很小的时候，用简单的面向对象编程，数据库+服务端+浏览器就可以满足系统需求</p><h2 id="基于组件开发-CBD"><a href="#基于组件开发-CBD" class="headerlink" title="基于组件开发(CBD)"></a>基于组件开发(CBD)</h2><p>随着系统变得越来越复杂和庞大，有很多重复功能的代码，当这些重复的功能模块有变化时代码中就有很多地方要修改</p><p>这时会想到基于组件开发(Component-Based Development)，他是一种软件工程实践，设计时通常要求组件之间高内聚，松耦合</p><p>把系统中那些重复的代码统一起来，约定好接口开发成组件，基于组件再做开发</p><p>基于组件开发时更关注系统层次、子系统边界和子系统间通讯的设计</p><p>组件比起对象的进步在于他定义了一种通用的处理方式，通用规范的引入导致组件是可以替代的</p><h2 id="面向切面编程-AOP"><a href="#面向切面编程-AOP" class="headerlink" title="面向切面编程(AOP)"></a>面向切面编程(AOP)</h2><p>再随着企业变大，基于组件开发时某些方法都会用到同一个组件，每次要用到的时候都需要写一遍调用该组件的语句或者实现接口等</p><p>这时会想到面向切面编程(Aspect-Oriented Programming)，他是指通过预编译和运行期动态代理的方式实现给程序统一添加功能的目的</p><p>把重复的代码或者通用组件调用统一写入与业务代码匹配的切面中，这样业务代码中不需要重复编写或调用组件</p><p>以后再有需要调用的功能模块，直接把这个模块配置为对应切面，该切面的所有功能都会添加到此模块</p><h2 id="面向服务架构-SOA"><a href="#面向服务架构-SOA" class="headerlink" title="面向服务架构(SOA)"></a>面向服务架构(SOA)</h2><p>后来企业变成了集团公司，上线了很多套各种各样的系统</p><p>虽然大部分系统都实现了组件化，但做为一个集团公司仍然有很多共同的业务，不同系统中有很多功能重复的模块</p><p>此时又面临一个业务需求变更可能涉及多套系统升级的问题</p><p>这时会想到面向服务架构(Service-Oriented Architecture)，他是一套软件设计的原则或方法论</p><p>架构师把各个系统功能类似的模块抽象成服务，重复的模块再也没有了，不同系统间互相调用服务接口</p><p>以前要自己写一大堆代码，现在甚至不必关心所需调用服务的实现，只要知道服务接口如何调用，直接调用另一套服务的接口就OK了</p><p><strong>参考链接：</strong></p><p><a href="https://www.zhihu.com/question/20478119/answer/25292423" target="_blank" rel="noopener">面向对象、面向服务、面向组件三种编程模式有什么区别？分别适用于哪些领域的开发？ - 李黄河的回答 - 知乎</a></p><p><a href="https://blog.csdn.net/ocean181/article/details/6720371" target="_blank" rel="noopener">面向对象编程（OOP）、面向组件编程（COP）、面向方面编程（AOP）和面向服务编程（SOP）_始则转俗成真，终乃回真向俗！-CSDN博客_面向组件编程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章用来记录Java语言从 &lt;strong&gt;面向对象编程&lt;/strong&gt;、&lt;strong&gt;基于组件开发&lt;/strong&gt;、&lt;strong&gt;面向切面编程&lt;/strong&gt; 到 &lt;strong&gt;面向服务架构&lt;/strong&gt; 的全过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.gengruiblog.cn/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>面向过程编程 VS 面向对象编程</title>
    <link href="https://www.gengruiblog.cn/article/20210605.html"/>
    <id>https://www.gengruiblog.cn/article/20210605.html</id>
    <published>2021-06-04T16:00:00.000Z</published>
    <updated>2021-06-17T12:07:30.881Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章用来区别面向过程编程(Process-Oriented Programming)和面向对象编程(Object-Oriented Programming)</p><a id="more"></a><h2 id="面向过程编程-POP"><a href="#面向过程编程-POP" class="headerlink" title="面向过程编程(POP)"></a>面向过程编程(POP)</h2><p>在使用JAVA语言之前我们常用C语言，C语言是典型的面向过程的编程语言</p><p>在C语言（或者说面向过程编程语言）中，你就是上帝（主函数就是上帝意志的体现……）</p><p>你把想做的事写到一个一个函数模块，之后在主函数中通过调用不同的函数完成不同的功能，最后达到你想到的效果（得到你想要的输出）</p><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步步实现，使用的时候依次调用就可以了</p><h2 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程(OOP)"></a>面向对象编程(OOP)</h2><p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题步骤中的行为</p><p>JAVA是典型的面向对象编程语言之一</p><p>在JAVA（或者说面向对象编程语言）中，你还是上帝，但是你是一个“简政放权”了的上帝</p><p>你创建了一个个对象，然后这些对象干这干那的，最后达到你想到的效果（得到你想要的输出）</p><h3 id="面向过程-VS-面向对象"><a href="#面向过程-VS-面向对象" class="headerlink" title="面向过程 VS 面向对象"></a>面向过程 VS 面向对象</h3><p>用面向过程的方法写出来的程序是一份蛋炒饭，而用面向对象写出来的程序是一份盖浇饭</p><p>所谓蛋炒饭最后是要把鸡蛋放饭里翻炒均匀，盖浇饭就是在白米饭上面浇上一份盖菜</p><p>蛋炒饭的好处就是入味均匀，吃起来香</p><p>但如果恰巧你不爱吃鸡蛋，只爱吃青菜的话，那么唯一的办法就是全部倒掉，重新做一份青菜炒饭了</p><p>盖浇饭就没这么多麻烦，你只需要把上面的盖菜拨掉，更换一份盖菜就可以了</p><p>盖浇饭的缺点是入味不均，可能没有蛋炒饭那么香</p><p>到底是蛋炒饭好还是盖浇饭好呢？其实这类问题都很难回答，非要比个上下高低的话，就必须设定一个场景，否则只能说是各有所长</p><p>如果大家都不是美食家，没那么多讲究，那么从饭馆角度来讲的话，做盖浇饭显然比蛋炒饭更有优势，他可以组合出来任意多的组合，而且不会浪费</p><p>盖浇饭的好处就是”菜”“饭”分离，从而提高了制作盖浇饭的灵活性，饭不满意就换饭，菜不满意换菜</p><p>用软件工程的专业术语就是”可维护性”比较好，“饭” 和”菜”的耦合度比较低</p><p>蛋炒饭将”蛋”、“饭”炒在一起，想换”蛋”、”饭”中任何一种都很困难，耦合度很高，以至于”可维护性”比较差</p><p>软件工程追求的目标之一就是可维护性，可维护性主要表现在3个方面：可理解性、可测试性和可修改性</p><p>面向对象的好处之一就是显著的改善了软件系统的可维护性</p><p><strong>参考链接：</strong></p><p><a href="https://www.cnblogs.com/Libinkai/p/10505133.html" target="_blank" rel="noopener">从C到JAVA，从面向过程到面向对象 - 神的彬彬 - 博客园</a></p><p><a href="https://blog.csdn.net/jerry11112/article/details/79027834" target="_blank" rel="noopener">面向对象与面向过程的本质的区别_李光 未来科技-CSDN博客_面向对象和面向过程的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章用来区别面向过程编程(Process-Oriented Programming)和面向对象编程(Object-Oriented Programming)&lt;/p&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://www.gengruiblog.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>开发模型（瀑布、敏捷开发、DevOps）</title>
    <link href="https://www.gengruiblog.cn/article/20210603.html"/>
    <id>https://www.gengruiblog.cn/article/20210603.html</id>
    <published>2021-06-02T16:00:00.000Z</published>
    <updated>2021-06-10T13:43:01.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单打独斗的程序员"><a href="#单打独斗的程序员" class="headerlink" title="单打独斗的程序员"></a>单打独斗的程序员</h2><p>上个世纪40年代，世界上第一台计算机诞生</p><p>从诞生之日起，它就离不开程序（Program）的驱动，而负责编写程序的人，就被称为“程序员”（Programmer）</p><p>程序员是计算机的驾驭者，那个时候是极其稀缺的人才，只有高学历、名校出身的人，才有资格成为程序员</p><p>随着人类科技的不断发展，PC和Internet陆续问世，我们进入了全民拥抱信息化的时代</p><ul><li>企业用户：将计算机作为办公工具，用以提升生产力</li><li>个人用户：将计算机作为娱乐工具，用以改善生活品质</li></ul><a id="more"></a><p>于是程序逐步演进为“软件（software）”，变成了最赚钱的产品之一</p><p>而程序员有了更专业的称谓，叫做“软件开发工程师（Software Development Engineer）”</p><p>软件开发工程师的工作职责就是完成一个软件从零开始到最终交付，大概包括如下几个阶段：</p><p><img src="https://gengrui01.github.io/picture/develop-model/1.png" alt=""></p><p>起初程序比较简单工作量也不大，程序员一个人可以完成所有阶段的工作</p><h2 id="瀑布（Waterfall）模型"><a href="#瀑布（Waterfall）模型" class="headerlink" title="瀑布（Waterfall）模型"></a>瀑布（Waterfall）模型</h2><p>随着软件产业的日益发展壮大，软件的规模日益庞大，一个人已经很难集中精力完成全部交付过程</p><p>码农的队伍逐渐扩大，工种增加，除了软件开发工程师之外，又有了软件测试工程师，软件运维工程师</p><p>软件测试工程师和软件运维工程师分担了项目构建之后的工作，软件交付过程分工如下：</p><p><img src="https://gengrui01.github.io/picture/develop-model/2.png" alt=""></p><p>分工后软件交付流程如下：</p><p>开发人员编写代码 -&gt; QA质保团队测试 -&gt; 运维团队部署</p><p>在这种流程下，我们必须要等前一个阶段的所有工作都完成了才能进入下一个阶段</p><p>我们把这种软件交付模型称为“瀑布模型”</p><p>这种模型适合用户需求非常明确、开发时间非常充足的项目，大家按部就班轮流执行自己的职责即可</p><h2 id="敏捷开发（Agile-Development）模型"><a href="#敏捷开发（Agile-Development）模型" class="headerlink" title="敏捷开发（Agile Development）模型"></a>敏捷开发（Agile Development）模型</h2><p>随着时间推移，用户对系统的需求不断增加，产品在使用过程中也是会有问题需要改进的</p><p>这个情况下，大家发现，笨重迟缓的瀑布模型已经不合时宜了，于是软件开发团队引入了“敏捷开发”的概念</p><p>敏捷开发在2000年左右开始被世人所关注，是一种以人为核心、迭代、循序渐进的开发方法，能够应对快速变化的需求</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>在说敏捷开发的本质之前我们先来解释下这里提到的一个名词——迭代（Sprint）</p><blockquote><p>迭代是指把一个开发周期很长的开发任务分解为很多个小周期任务<br>每个周期就是一次迭代的过程<br>每一次迭代都可以生产或开发出一个可以交付的软件产品</p></blockquote><p>敏捷开发的本质就是将软件项目的构建切分成多个子项目迭代进行</p><p>保证各个子项目的成果都经过测试，具备集成和可运行的特征</p><p>简单来说就是 把大项目变成小项目，把大时间点变成小时间点</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>并不追求前期完美的设计、完美编码</li><li>力求在很短的周期内开发出产品的核心功能，尽早发布出可用的版本</li><li>在后续的生产周期内，按照新需求不断迭代升级，完善产品</li></ul><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><p>敏捷开发最常用的一种实现方式就是Scrum方式，接下来我们会讲解Scrum方式敏捷开发的软件交付流程</p><p>在讲解交付流程之前，我们需要对该流程中所涉及的角色、工件以及会议有个大概的了解</p><ul><li>角色<ul><li>PO(Product Owner 产品负责人)<ul><li>负责确定产品的功能和达到要求的标准</li><li>指定软件的发布日期和交付的内容</li><li>有权力接受或拒绝开发团队的工作成果</li></ul></li><li>SM(Scrum Manager 流程管理员)<ul><li>负责整个Scrum流程在项目中的顺利实施和进行</li><li>清除挡在客户和开发工作之间的沟通障碍，使得客户可以直接驱动开发</li><li>有些公司SM会由ST中的一员兼任</li></ul></li><li>ST(Scrum Team 开发团队)：<ul><li>软件产品在Scrum规定流程下进行开发工作，人数控制在5~10人左右</li><li>每个成员可能负责不同的技术方面（前端开发、后端开发、测试等）</li><li>要求每成员必须有很强的自我管理能力和一定的表达能力</li></ul></li></ul></li><li>工件<ul><li>PB(Product Backlog 项目需求列表)：PO负责按优先级顺序排列的完整产品需求列表</li><li>SB(Sprint Backlog 迭代需求列表)：SM负责在SPM会议中产出的本次迭代需求列表大体框架，会后细化为更小的任务，控制任务周期在2天内</li><li>SBD(Sprint Burn Down 迭代燃尽图)：ST成员负责在DSM会议中更新自己的任务状态，整体就是整个迭代的完成状态图，又称燃尽图</li></ul></li><li>会议<ul><li>SPM(Sprint Plan Meeting 迭代计划会议)：根据PB讨论本次迭代需要完成的目标，控制迭代周期在1-4周，生成SB大体框架</li><li>DSM(Daily Scrum Meeting 每日站立会议)：ST成员汇报昨日工作、承诺今日工作、阐述所遇问题、更新SBD，每次会议控制在15分钟左右</li><li>Sprint Review Meeting(评审会议)：也称演示会议，ST成员向产品负责人和客户演示自己完成的软件产品</li><li>Sprint Retrospective Meeting(复盘会议)：也称为总结会议，PO、SM、ST轮流发言，总结并讨论改进的地方，放入下一轮迭代中</li></ul></li></ul><h3 id="交付流程"><a href="#交付流程" class="headerlink" title="交付流程"></a>交付流程</h3><p>理清了上面这些流程中所涉及的角色、工件以及会议，我们的交付流程自然就出来了，如下图所示：</p><p><img src="https://gengrui01.github.io/picture/develop-model/3.png" alt=""></p><ul><li>在项目启动之前，团队PO(Product Owner 产品负责人)会整理出所有的项目需求并按优先级顺序排列，为项目做出整体排期，发出PB(Product Backlog 项目需求列表)</li><li>在每一个迭代周期开始，团队PO会组织SPM(Sprint Plan Meeting 迭代计划会议)根据PB讨论本次迭代需要完成的目标，一般会将迭代周期控制在1-4周</li><li>SM(Scrum Manager 流程管理员)在SPM会后负责整理SB(Sprint Backlog 迭代需求列表)，并将需求细化成一个个小任务分配给ST(Scrum Team 开发团队)成员，一般会将任务周期控制在2天内</li><li>之后ST成员按照SB进行具体编码及测试工作<ul><li>ST成员每天早晨都会进行DSM(Daily Scrum Meeting 每日站立会议)，汇报昨日工作、承诺今日工作、阐述所遇问题</li><li>根据任务完成情况更新SBD(Sprint Burn Down 迭代燃尽图)</li></ul></li><li>SB中所有任务完成后组织Sprint Review Meeting(评审会议)，由ST成员向PO及客户演示自己的成果</li><li>评审会议结束项目发版</li><li>发版完成后组织Sprint Retrospective Meeting(复盘会议)，PO、SM、ST轮流发言，总结并讨论改进的地方，放入下一轮迭代的产品需求中</li></ul><h3 id="瀑布模型和敏捷开发模型对比"><a href="#瀑布模型和敏捷开发模型对比" class="headerlink" title="瀑布模型和敏捷开发模型对比"></a>瀑布模型和敏捷开发模型对比</h3><p>随着敏捷开发的推广，开发团队的工作效率逐渐变高，下面这个图看起来两者对比会更加清晰</p><p><img src="https://gengrui01.github.io/picture/develop-model/4.png" alt=""></p><h2 id="DevOps开发模型"><a href="#DevOps开发模型" class="headerlink" title="DevOps开发模型"></a>DevOps开发模型</h2><p>经常发版前发现有问题需要修正，简单问题还好，加班修正后继续发版就好</p><p>如果会有复杂问题出现，发版时间又已经发出去了，只好通宵想办法解决问题</p><p>随着时间推移，软件的复杂度不断攀升，每次发版之前开发、测试、运维都捏着把汗</p><p>为了按时交付软件产品和服务，为了不在饱受通宵加班苦恼，开发和运营工作必须紧密合作，随即提出了DevOps开发模型</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>DevOps这个词，其实是Development和Operations两个词的组合。它的英文发音是 /de’vɒps/，类似于“迪沃普斯”</p><p><img src="https://gengrui01.github.io/picture/develop-model/6.jpg" alt=""></p><p>维基百科定义DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合</p><p>DevOps就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得构建、测试、发布软件的整体过程能够更加地快捷、频繁和可靠</p><p><img src="https://gengrui01.github.io/picture/develop-model/7.jpg" alt=""></p><h3 id="交付流程-1"><a href="#交付流程-1" class="headerlink" title="交付流程"></a>交付流程</h3><p>在DevOps下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案</p><p>而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议</p><p><img src="https://gengrui01.github.io/picture/develop-model/9.png" alt=""></p><h3 id="DevOps开发模型和瀑布模型、敏捷开发模型对比"><a href="#DevOps开发模型和瀑布模型、敏捷开发模型对比" class="headerlink" title="DevOps开发模型和瀑布模型、敏捷开发模型对比"></a>DevOps开发模型和瀑布模型、敏捷开发模型对比</h3><p>对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps贯穿了软件全生命周期，而不仅限于开发阶段</p><p>有两个词经常会伴随着DevOps出现，那就是CI(Continuous Integration 持续集成)和CD(Continuous Delivery 持续交付)</p><p>至于什么是持续集成、持续交付，看下面这个DevOps开发模型和瀑布模型、敏捷开发模型的对比图会更加一目了然</p><p><img src="https://gengrui01.github.io/picture/develop-model/5.png" alt=""></p><p>很多人可能会觉得，“更新版本的速度快了，风险不是更大了吗？”</p><p>敲黑板，勿忘初心啊，我们使用DevOps开发模型就是为了规避发版时的风险啊</p><p>其实，更新版本的速度变快可以帮助我们更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应</p><p>而且，DevOps更新版本的变化是比较小的，相对应发版的风险也就会更小，即使出现问题修复起来也会相对容易一些（不至于通宵加班了 真香）</p><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p>想要充分落地DevOps，当然离不开软件和平台的支持，目前支持DevOps的软件实在是太多了</p><p>（现在DevOps被吹得天花乱坠肯定也有这些软件和平台的功劳，毕竟可以趁机卖钱啊）</p><p><img src="https://gengrui01.github.io/picture/develop-model/8.jpg" alt=""></p><p>现将工具类型及对应的不完全列举整理如下：</p><ul><li>代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion</li><li>构建工具：Ant、Gradle、maven</li><li>自动部署：Capistrano、CodeDeploy</li><li>持续集成（CI）：Bamboo、Hudson、Jenkins</li><li>配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail</li><li>容器：Docker、LXC、第三方厂商如AWS</li><li>编排：Kubernetes、Core、Apache Mesos、DC/OS</li><li>服务注册与发现：Zookeeper、etcd、Consul</li><li>脚本语言：python、ruby、shell</li><li>日志管理：ELK、Logentries</li><li>系统监控：Datadog、Graphite、Icinga、Nagios</li><li>性能监控：AppDynamics、New Relic、Splunk</li><li>压力测试：JMeter、Blaze Meter、loader.io</li><li>预警：PagerDuty、pingdom、厂商自带如AWS SNS</li><li>HTTP加速器：Varnish</li><li>消息总线：ActiveMQ、SQS</li><li>应用服务器：Tomcat、JBoss</li><li>Web服务器：Apache、Nginx、IIS</li><li>数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库</li><li>项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker</li></ul><p>在工具的选择上，需要结合公司业务需求和技术团队情况而定</p><p>（注：更多关于工具的详细介绍可以参见此文：51 Best DevOps Tools for #DevOps Engineers）</p><h3 id="DevOps-Dev-Ops-？"><a href="#DevOps-Dev-Ops-？" class="headerlink" title="DevOps = Dev + Ops ？"></a>DevOps = Dev + Ops ？</h3><p>很多人可能觉得，所谓DevOps，不就是Dev+Ops嘛，直接把团队合并，或者将所有人员划归开发</p><p>这种理解完全曲解了DevOps开发模式的思想，甚至有点回到类似最初程序员单打独斗的模式了</p><p>DevOps并不仅仅是组织架构变革，更是企业文化和思想观念的变革</p><p>所以他的实现考验的也不仅是一家企业的技术（毕竟有上面那些软件和平台提供技术支持），更是管理水平和企业文化</p><p><strong>参考链接：</strong></p><p><a href="https://www.zhihu.com/question/58702398/answer/1691681949" target="_blank" rel="noopener">什么是DevOps？ - UCloud云计算回答 - 知乎</a></p><p><a href="https://blog.csdn.net/csdn15556927540/article/details/90712308" target="_blank" rel="noopener">什么是敏捷开发？_好记性不如烂笔头-CSDN博客_敏捷开发</a></p><p><a href="https://blog.csdn.net/sinat_35566306/article/details/90404606" target="_blank" rel="noopener">开发模式（敏捷开发，瀑布式开发，螺旋型开发，迭代开发，devOps开发）_sinat_35566306的博客-CSDN博客_瀑布式开发</a></p><p><a href="https://zhuanlan.zhihu.com/p/133219596" target="_blank" rel="noopener">敏捷开发和DevOps - 知乎</a></p><p><a href="https://www.jianshu.com/p/c5d002cf25b9" target="_blank" rel="noopener">Devops - 简书</a></p><p><a href="https://www.processon.com/view/5f07d97d7d9c087fac021e5d" target="_blank" rel="noopener">DevOps敏捷开发架构图 | ProcessOn免费在线作图 |</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单打独斗的程序员&quot;&gt;&lt;a href=&quot;#单打独斗的程序员&quot; class=&quot;headerlink&quot; title=&quot;单打独斗的程序员&quot;&gt;&lt;/a&gt;单打独斗的程序员&lt;/h2&gt;&lt;p&gt;上个世纪40年代，世界上第一台计算机诞生&lt;/p&gt;
&lt;p&gt;从诞生之日起，它就离不开程序（Program）的驱动，而负责编写程序的人，就被称为“程序员”（Programmer）&lt;/p&gt;
&lt;p&gt;程序员是计算机的驾驭者，那个时候是极其稀缺的人才，只有高学历、名校出身的人，才有资格成为程序员&lt;/p&gt;
&lt;p&gt;随着人类科技的不断发展，PC和Internet陆续问世，我们进入了全民拥抱信息化的时代&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业用户：将计算机作为办公工具，用以提升生产力&lt;/li&gt;
&lt;li&gt;个人用户：将计算机作为娱乐工具，用以改善生活品质&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构" scheme="https://www.gengruiblog.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>企业微信群机器人发送消息</title>
    <link href="https://www.gengruiblog.cn/article/20210601.html"/>
    <id>https://www.gengruiblog.cn/article/20210601.html</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-06-09T11:22:07.597Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章用来记录企业微信群机器人创建到发送消息的全过程，最后附有本文源码git地址，科学食用</p><a id="more"></a><h2 id="创建群机器人并获取Webhook地址"><a href="#创建群机器人并获取Webhook地址" class="headerlink" title="创建群机器人并获取Webhook地址"></a>创建群机器人并获取Webhook地址</h2><p>创建机器人的方式很简单，操作步骤及手机界面截图如下：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/1.jpg" alt=""></p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/2.jpg" alt=""></p><ol><li>（图1）点击进入需要创建群机器人的群聊</li><li>（图2）点击右上角查看群聊信息的按钮</li><li>（图3）点击 <code>群机器人</code> 选项群机器人管理页面</li><li>（图4）点击 <code>添加机器人</code> 按钮添加新机器人</li><li>（图5）设置机器人头像、昵称，点击 <code>添加</code> 按钮</li><li>（图6）点击 <code>复制</code> 按钮复制Webhook地址， <strong>这个地址在之后发送请求中会用到，一定要记得复制下来哦</strong></li><li>（图6）点击 <code>配置说明</code> 查看官方配置文档</li><li>（图7）点击右上角三个点打开分享框，点击 <code>复制链接</code> 选项， <strong>这个地址是微信官方的群机器人配置文档，在开发过程中经常会用到，一定要记得复制下来哦</strong></li><li>（图8）返回群聊界面可以看到提示，说明群聊机器人已经添加成功</li></ol><p>步骤6和步骤8中我们复制了两个连接，如下：</p><p>Webhook地址： <code>https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa</code></p><p>群机器人配置文档： <a href="https://work.weixin.qq.com/api/doc/90000/90136/91770" target="_blank" rel="noopener">https://work.weixin.qq.com/api/doc/90000/90136/91770</a></p><p><strong><em>TIPS:</em></strong></p><blockquote><p>Webhook地址的作用是开发者可以通过向这个地址发起POST请求来实现给该群组发送消息<br>每个机器人的webhook地址是不一样的，一定要保护好webhook地址避免泄漏，否则坏人就可以用你的机器人来发垃圾消息了</p></blockquote><p>如果刚才没有复制到Webhook地址，或者说再次开发时忘记Webhook地址，可以通过如下步骤查看群机器人的Webhook地址：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/3.jpg" alt=""></p><ol><li>（图1）点击 <code>群机器人</code> 选项群机器人管理页面</li><li>（图2）选择需要查看Webhook地址的机器人</li><li>（图3）找到 <code>Webhook地址</code> 长按-&gt;全选-&gt;复制</li></ol><h2 id="创建项目并引入依赖"><a href="#创建项目并引入依赖" class="headerlink" title="创建项目并引入依赖"></a>创建项目并引入依赖</h2><p>我们 <a href="https://gengrui01.github.io/article/20210228.html" target="_blank" rel="noopener">使用IDEA创建Maven工程</a> ，项目名为“wechat-robot-demo“</p><p>需要用到的依赖包及其所起作用如下：</p><ul><li>fastjson：处理JSON</li><li>httpclient：HTTP请求调用</li><li>junit：测试</li></ul><p>可以复制下面代码一次性引入这些依赖：</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理JSON --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HTTP请求调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><h3 id="消息类型枚举类"><a href="#消息类型枚举类" class="headerlink" title="消息类型枚举类"></a>消息类型枚举类</h3><p>通过配置文档可以看出我们能够使用微信机器人去发送的消息类型主要有如下五种</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/4.png" alt=""></p><p>我们在common包下定义一个消息类型枚举类（MsgtypeEnum.java）枚举出所有的消息类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MsgtypeEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    text(<span class="string">"text"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * markdown类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    markdown(<span class="string">"markdown"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    image(<span class="string">"image"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    news(<span class="string">"news"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    file(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    MsgtypeEnum(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息发送结果类"><a href="#消息发送结果类" class="headerlink" title="消息发送结果类"></a>消息发送结果类</h3><p>在请求webhook时会返回请求结果，里面有错误编码、错误信息等信息</p><p>我们在common包下定义一个消息发送结果类（SendResult.java）来存储我们需要的请求结果信息</p><p>重写toString()方法为JSON格式，方便我们在测试时打印请求结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否请求成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSuccess;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorCode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"errorCode"</span>, errorCode);</span><br><span class="line">        items.put(<span class="string">"errorMsg"</span>, errorMsg);</span><br><span class="line">        items.put(<span class="string">"isSuccess"</span>, isSuccess);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendResult</span><span class="params">(<span class="keyword">boolean</span> isSuccess, String errorCode, String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isSuccess = isSuccess;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息通用接口"><a href="#消息通用接口" class="headerlink" title="消息通用接口"></a>消息通用接口</h3><p>不同消息类型请求时数据格式是不同的，但相同点是它们都需要以JSON的格式发送Webhook请求</p><p>我们在message包下定义一个消息通用接口（Message.java）</p><p>并在消息通用接口里定义toJson()方法，保证所有实现消息通用接口的类都提供toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送请求类"><a href="#发送请求类" class="headerlink" title="发送请求类"></a>发送请求类</h3><p>在创建群机器人时说过我们是要通过调用群组机器人的Webhook地址发起POST请求来实现给该群组发送消息</p><p>我们在api包下定义一个消息发送结果类（WechatRobotApi.java）来完成Webhook地址的POST请求调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatRobotApi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendResult <span class="title">send</span><span class="params">(String sendUrl, Message message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断sendUrl是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(sendUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10000"</span>, <span class="string">"webhook地址不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 发送post请求</span></span><br><span class="line">            HttpResponse response = post(sendUrl, message.toJson());</span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) &#123;</span><br><span class="line">                String errorCode = <span class="string">"10"</span> + response.getStatusLine().getStatusCode();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, errorCode, <span class="string">"Http请求错误 错误编码为后三位"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String result = <span class="keyword">null</span>;</span><br><span class="line">                result = EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">                JSONObject obj = JSONObject.parseObject(result);</span><br><span class="line">                String errorCode = obj.getString(<span class="string">"errcode"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SendResult(errorCode.equals(<span class="number">0</span>), errorCode, obj.getString(<span class="string">"errmsg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10001"</span>, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SendResult(<span class="keyword">false</span>, <span class="string">"10002"</span>, <span class="string">"Http请求IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpResponse <span class="title">post</span><span class="params">(String sendUrl, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpPost httppost = <span class="keyword">new</span> HttpPost(sendUrl);</span><br><span class="line">        httppost.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        StringEntity se = <span class="keyword">new</span> StringEntity(json, <span class="string">"utf-8"</span>);</span><br><span class="line">        httppost.setEntity(se);</span><br><span class="line">        HttpResponse response = HttpClients.createDefault().execute(httppost);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试Webhook配置类"><a href="#测试Webhook配置类" class="headerlink" title="测试Webhook配置类"></a>测试Webhook配置类</h3><p>因为每个机器人的webhook地址是不一样的</p><p>我们在config包下定义测试Webhook配置类（WebhookConfig.java）来配置用于测试的群机器人webhook地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebhookConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/webhook/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String send = <span class="string">"send?key="</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String upload_media = <span class="string">"upload_media?key="</span>;</span><br><span class="line">    <span class="comment">//TODO 改成自己用于测试的群机器人webhook地址中key的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String key = <span class="string">"693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息发送URL</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String send_url = url + send + key;</span><br><span class="line">    <span class="comment">// 文件上传URL（文件类型消息上传文件时需要用到的URL）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String upload_media_url = url + upload_media + key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>以上已经完成了基础代码，接下来争对不同消息类型进行定制开发即可</p><p>观察不同消息类型的参数数据格式可以发现第二个参数名根据消息类型均不相同，所以最外部两个参数直接用JSON封装就好</p><p>但相同信息类型第二个参数内部的数据格式是相同的，我们可以根据第二个参数内部的数据格式进行开发</p><h2 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h2><p>文本类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/5.png" alt=""></p><h3 id="文本类型消息类"><a href="#文本类型消息类" class="headerlink" title="文本类型消息类"></a>文本类型消息类</h3><p>我们在message包下定义一个文本类型消息类（TextMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否@所有人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isAtAll;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要@的群成员手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mentionedMobileList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"msgtype"</span>, MsgtypeEnum.text.getValue());</span><br><span class="line">    </span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文本内容不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"content"</span>, text);</span><br><span class="line">        <span class="keyword">if</span> (isAtAll) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mentionedMobileList == <span class="keyword">null</span>)</span><br><span class="line">                mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            mentionedMobileList.add(<span class="string">"@all"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mentionedMobileList != <span class="keyword">null</span> &amp;&amp; !mentionedMobileList.isEmpty()) &#123;</span><br><span class="line">            textContent.put(<span class="string">"mentioned_mobile_list"</span>, mentionedMobileList);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">"text"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextMessage</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本类型消息测试类"><a href="#文本类型消息测试类" class="headerlink" title="文本类型消息测试类"></a>文本类型消息测试类</h3><p>我们在test包下定义文本类型消息测试类（TextMessageTest.java）来测试文本类型消息发送</p><ol><li>普通文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"Hello World!"</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/6.jpg" alt=""></p><ol start="2"><li>@群内成员的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特群内成员的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"你好，我是耿锐的助手"</span>);</span><br><span class="line">        List&lt;String&gt; mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        mentionedMobileList.add(<span class="string">"13026212376"</span>);</span><br><span class="line">        message.setMentionedMobileList(mentionedMobileList);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/7.jpg" alt=""></p><p><strong><em>插播一个吐槽：</em></strong></p><blockquote><p>什么鬼人啊啊啊啊啊，艾特了一下就把我机器人移除了2333333<br>师父让我打他，这人高马大的，我一女孩子哪打得过啊，默默重新添加了一个机器人<br>要注意重新添加机器人后webhook地址会变，需要修改测试Webhook配置类（WebhookConfig.java）中webhook地址</p></blockquote><ol start="3"><li>@所有人的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特所有人的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAtAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"大家好，我是耿锐的助手"</span>);</span><br><span class="line">        message.setIsAtAll(<span class="keyword">true</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/8.jpg" alt=""></p><ol start="4"><li>@群内成员并且@所有人的文本消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 艾特群内成员并且艾特所有人的文本消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithAtAndAtAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(<span class="string">"大家好，通报批评就是他刚才移除了我"</span>);</span><br><span class="line">        List&lt;String&gt; mentionedMobileList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        mentionedMobileList.add(<span class="string">"13026212376"</span>);</span><br><span class="line">        message.setMentionedMobileList(mentionedMobileList);</span><br><span class="line">        message.setIsAtAll(<span class="keyword">true</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/9.jpg" alt=""></p><h2 id="markdown类型"><a href="#markdown类型" class="headerlink" title="markdown类型"></a>markdown类型</h2><p>markdown类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/10.png" alt=""></p><h3 id="markdown类型消息类"><a href="#markdown类型消息类" class="headerlink" title="markdown类型消息类"></a>markdown类型消息类</h3><p>我们在message包下定义一个markdown类型消息类（MarkdownMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * markdown元素列表 每一行内容为一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        items.add(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"msgtype"</span>, MsgtypeEnum.markdown.getValue());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (items.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"markdown内容不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer markdownText = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (String item : items) &#123;</span><br><span class="line">            markdownText.append(item + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; markdown = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        markdown.put(<span class="string">"content"</span>, markdownText.toString());</span><br><span class="line">        result.put(<span class="string">"markdown"</span>, markdown);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown字体颜色枚举类"><a href="#markdown字体颜色枚举类" class="headerlink" title="markdown字体颜色枚举类"></a>markdown字体颜色枚举类</h3><p>我们在utils包下定义markdown字体颜色枚举类（MarkdownColorEnum.java）枚举出markdown所支持的所有字体颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MarkdownColorEnum &#123;</span><br><span class="line">    orange(<span class="string">"warning"</span>),</span><br><span class="line">    gray(<span class="string">"comment"</span>),</span><br><span class="line">    green(<span class="string">"info"</span>);</span><br><span class="line"></span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    MarkdownColorEnum(String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown工具类"><a href="#markdown工具类" class="headerlink" title="markdown工具类"></a>markdown工具类</h3><p>我们在utils包下定义markdown工具类（MarkdownUtils.java）提供方法将内容转化为不同格式的markdown语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headerType 标题等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text       标题内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHeaderText</span><span class="params">(<span class="keyword">int</span> headerType, String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headerType &lt; <span class="number">1</span> || headerType &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"标题等级必须在1-6之间"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer numbers = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headerType; i++) &#123;</span><br><span class="line">            numbers.append(<span class="string">"#"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers + <span class="string">" "</span> + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加粗</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBoldText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"**"</span> + text + <span class="string">"**"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 连接标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> href 具体链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLinkText</span><span class="params">(String text, String href)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span> + text + <span class="string">"]("</span> + href + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行内代码段（暂不支持跨行）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCodeText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"`"</span> + text + <span class="string">"`"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getQuoteText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&gt;"</span> + text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字体颜色（只支持3种内置颜色）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> markdownColorEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getColorText</span><span class="params">(MarkdownColorEnum markdownColorEnum, String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;font color=\""</span> + markdownColorEnum.value + <span class="string">"\"&gt;"</span> + text + <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 斜体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getItalicText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*"</span> + text + <span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOrderListText</span><span class="params">(List&lt;String&gt; orderList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orderList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= orderList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sb.append(String.valueOf(i) + <span class="string">". "</span> + orderList.get(i - <span class="number">1</span>) + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(String.valueOf(orderList.size()) + <span class="string">". "</span> + orderList.get(orderList.size() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无序列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unOrderList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUnOrderListText</span><span class="params">(List&lt;String&gt; unOrderList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (unOrderList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unOrderList.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"- "</span> + unOrderList.get(i) + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"- "</span> + unOrderList.get(unOrderList.size() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown类型消息测试类"><a href="#markdown类型消息测试类" class="headerlink" title="markdown类型消息测试类"></a>markdown类型消息测试类</h3><p>我们在test包下定义markdown类型消息测试类（MarkdownMessageTest.java）来测试markdown类型消息发送</p><ol><li>普通markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line">        message.add(<span class="string">"正常内容"</span>);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/11.jpg" alt=""></p><ol start="2"><li>带有标题的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有标题的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(<span class="string">"普通MD消息"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">1</span>, <span class="string">"一级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">2</span>, <span class="string">"二级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">3</span>, <span class="string">"三级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">4</span>, <span class="string">"四级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">5</span>, <span class="string">"五级标题"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getHeaderText(<span class="number">6</span>, <span class="string">"六级标题"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/12.jpg" alt=""></p><ol start="2"><li>带有字体颜色（只支持3种内置颜色）的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有字体颜色（只支持3种内置颜色）的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testColour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.orange, <span class="string">"橙色内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.gray, <span class="string">"灰色内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getColorText(MarkdownColorEnum.green, <span class="string">"绿色内容"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/13.jpg" alt=""></p><ol start="3"><li>带有有序、无序列表的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有有序、无序列表的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; orderList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        orderList.add(<span class="string">"有序列表1"</span>);</span><br><span class="line">        orderList.add(<span class="string">"有序列表2"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getOrderListText(orderList));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; unOrderList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        unOrderList.add(<span class="string">"无序列表1"</span>);</span><br><span class="line">        unOrderList.add(<span class="string">"无序列表2"</span>);</span><br><span class="line">        message.add(MarkdownUtils.getUnOrderListText(unOrderList));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/14.jpg" alt=""></p><ol start="4"><li>带有其他格式的markdown消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有其他格式的markdown消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MarkdownMessage message = <span class="keyword">new</span> MarkdownMessage();</span><br><span class="line"></span><br><span class="line">        message.add(MarkdownUtils.getBoldText(<span class="string">"加粗内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getLinkText(<span class="string">"链接内容"</span>, <span class="string">"https://www.gengruiblog.cn/"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getCodeText(<span class="string">"代码内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getQuoteText(<span class="string">"引用内容"</span>));</span><br><span class="line">        message.add(MarkdownUtils.getItalicText(<span class="string">"斜体内容"</span>));</span><br><span class="line"></span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/15.jpg" alt=""></p><h2 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h2><p>图片类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/16.png" alt=""></p><h3 id="图片类型消息类"><a href="#图片类型消息类" class="headerlink" title="图片类型消息类"></a>图片类型消息类</h3><p>我们在message包下定义一个图片类型消息类（ImageMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片内容的base64编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String base64;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片内容（base64编码前）的md5值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageMessage</span><span class="params">(String base64, String md5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base64 = base64;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.image.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(base64)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"base64编码不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"base64"</span>, base64);</span><br><span class="line">        textContent.put(<span class="string">"md5"</span>, md5);</span><br><span class="line">        items.put(<span class="string">"image"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片工具类"><a href="#图片工具类" class="headerlink" title="图片工具类"></a>图片工具类</h3><p>我们在utils包下定义图片工具类（ImageUtils.java）提供方法将本地图片和线上图片转化为图片类型消息类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地图片转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgFile 图片本地路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> yanceyzhang</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageMessage <span class="title">toMessageByLocal</span><span class="params">(String imgFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = <span class="keyword">new</span> FileInputStream(imgFile);</span><br><span class="line">            data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">            in.read(data);</span><br><span class="line">            in.close();</span><br><span class="line">            String base64 = Base64.getEncoder().encodeToString(data);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageMessage(base64, DigestUtils.md5Hex(data));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"本地图片读取IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线上图片转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgURL 图片线上路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> yanceyzhang</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageMessage <span class="title">toMessageByOnline</span><span class="params">(String imgURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream data = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="comment">// 创建URL</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(imgURL);</span><br><span class="line">            <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 创建链接</span></span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">20000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line">            InputStream is = conn.getInputStream();</span><br><span class="line">            <span class="comment">// 将内容读取内存中</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(by)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                data.write(by, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] b = data.toByteArray();</span><br><span class="line">            String base64 = Base64.getEncoder().encodeToString(b);</span><br><span class="line">            String md5 = DigestUtils.md5Hex(b);</span><br><span class="line">            is.close();</span><br><span class="line">            conn.disconnect();</span><br><span class="line">            data.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageMessage(base64, md5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"线上图片读取IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片类型消息测试类"><a href="#图片类型消息测试类" class="headerlink" title="图片类型消息测试类"></a>图片类型消息测试类</h3><p>我们在test包下定义图片类型消息测试类（ImageMessageTest.java）来测试图片类型消息发送</p><ol><li>本地图片消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地图片消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String urlLocal = <span class="string">"D:/Blog/avatar.png"</span>;</span><br><span class="line">        ImageMessage message = ImageUtils.toMessageByLocal(urlLocal);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/17.jpg" alt=""></p><ol start="2"><li>线上图片消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线上图片消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOnline</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String urlOnLine = <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>;</span><br><span class="line">        ImageMessage message = ImageUtils.toMessageByOnline(urlOnLine);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/18.jpg" alt=""></p><h2 id="图文类型"><a href="#图文类型" class="headerlink" title="图文类型"></a>图文类型</h2><p>图文类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/19.png" alt=""></p><h3 id="文章类"><a href="#文章类" class="headerlink" title="文章类"></a>文章类</h3><p>由于一个图文消息支持1-8篇文章</p><p>我们先在message包下定义一个文章类（Article.java）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     * 可省略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击后跳转的链接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图文消息的图片链接，支持JPG、PNG格式，较好的效果为大图 1068*455，小图150*150</span></span><br><span class="line"><span class="comment">     * 可省略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String picurl;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Article</span><span class="params">(String title, String description, String url, String picurl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.picurl = picurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter&amp;setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图文类型消息类"><a href="#图文类型消息类" class="headerlink" title="图文类型消息类"></a>图文类型消息类</h3><p>之后在message包下定义一个图文类型消息类（NewsMessage.java）里面存放文章类的List</p><p>并且实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表 一个图文消息支持1-8篇文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articles = <span class="keyword">new</span> ArrayList&lt;Article&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (articles.size() &gt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"每条图文消息所包含的文章数不可超过八个"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        articles.add(article);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.news.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; news = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (articles.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"图文消息中不可以没有文章"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        news.put(<span class="string">"articles"</span>, articles);</span><br><span class="line">        items.put(<span class="string">"news"</span>, news);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图文类型消息测试类"><a href="#图文类型消息测试类" class="headerlink" title="图文类型消息测试类"></a>图文类型消息测试类</h3><p>我们在test包下定义图片类型消息测试类（NewsMessageTest.java）来测试图片类型消息发送</p><ol><li>一条图文消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一条图文消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NewsMessage message = <span class="keyword">new</span> NewsMessage();</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"耿锐的博客"</span>, <span class="string">"欢迎的来到耿锐的技术小栈"</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/"</span>, <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>));</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/20.jpg" alt=""></p><ol start="2"><li>多条图文消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条图文消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMoreArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NewsMessage message = <span class="keyword">new</span> NewsMessage();</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述有长方形图"</span>, <span class="string">"耿锐的博客 - MVC设计模式"</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/article/20210224.html"</span>, <span class="string">"https://www.gengruiblog.cn/picture/mvc/2.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述有方形图"</span>, <span class="string">"昆大圣博客 - 迷失的人迷失了，相逢的人会再相逢"</span>,</span><br><span class="line">                <span class="string">"https://blog.ecutdl.cn/"</span>, <span class="string">"https://blog.ecutdl.cn/usr/uploads/2021/05/3275615662.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"有描述无图"</span>, <span class="string">"昆大圣博客 - 留言板"</span>,</span><br><span class="line">                <span class="string">"https://blog.ecutdl.cn/3.html"</span>, <span class="keyword">null</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述有长方形图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.baidu.com/"</span>, <span class="string">"https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white-d0c9fe2af5.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述有方形图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.gengruiblog.cn/"</span>, <span class="string">"https://www.gengruiblog.cn/favicon.png"</span>));</span><br><span class="line">        message.addArticle(<span class="keyword">new</span> Article(<span class="string">"无描述无图"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"https://www.baidu.com/"</span>, <span class="keyword">null</span>));</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/21.jpg" alt=""></p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>文件类型数据格式如下图所示：</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/22.png" alt=""></p><p>在发送文件类型消息时需要用到下图所示文件上传接口拿到media_id（三天内有效）</p><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/23.png" alt=""></p><h3 id="文件工具类"><a href="#文件工具类" class="headerlink" title="文件工具类"></a>文件工具类</h3><p>我们在utils包下定义文件工具类（FileUtils.java）提供方法完成文件上传拿到media_id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传得到media_id，该media_id仅三天内有效</span></span><br><span class="line"><span class="comment">     * media_id在同一企业内应用之间可以共享</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadMediaUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload</span><span class="params">(String uploadMediaUrl, String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || !file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        String result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置边界</span></span><br><span class="line">            String boundary = <span class="string">"----------"</span> + System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 获取连接并设置请求头</span></span><br><span class="line">            HttpsURLConnection conn = getConnection(uploadMediaUrl, boundary);</span><br><span class="line">            <span class="comment">// 设置请求正文信息</span></span><br><span class="line">            setFileContent(conn.getOutputStream(), file, boundary);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HttpsURLConnection.HTTP_OK != conn.getResponseCode()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Http请求错误 错误编码为"</span> + conn.getResponseCode());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取请求结果</span></span><br><span class="line">                result = getResult(conn.getInputStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"HTTP请求IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (!jsonObject.getInteger(<span class="string">"errcode"</span>).equals(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(jsonObject.getString(<span class="string">"errmsg"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject.getString(<span class="string">"media_id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接并设置请求头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * POST https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa&amp;type=file HTTP/1.1</span></span><br><span class="line"><span class="comment">     * Content-Type: multipart/form-data; boundary=-------------------------acebdf13572468</span></span><br><span class="line"><span class="comment">     * Content-Length: 220</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadMediaUrl 地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundary       边界值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpsURLConnection <span class="title">getConnection</span><span class="params">(String uploadMediaUrl, String boundary)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(uploadMediaUrl);</span><br><span class="line">        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line">        conn.setRequestMethod(<span class="string">"POST"</span>);<span class="comment">// 以POST方式提交表单</span></span><br><span class="line">        conn.setUseCaches(<span class="keyword">false</span>);<span class="comment">// POST方式不能使用缓存</span></span><br><span class="line">        conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">        conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置请求头信息</span></span><br><span class="line">        conn.setRequestProperty(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"multipart/form-data; boundary="</span> + boundary);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"Content-Length"</span>, <span class="string">"220"</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求正文信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ---------------------------acebdf13572468</span></span><br><span class="line"><span class="comment">     * Content-Disposition: form-data; name="media";filename="wework.txt"; filelength=6</span></span><br><span class="line"><span class="comment">     * Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * mytext</span></span><br><span class="line"><span class="comment">     * ---------------------------acebdf13572468--</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundary</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFileContent</span><span class="params">(OutputStream outputStream, File file, String boundary)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 头部内容</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"--"</span>);<span class="comment">// 必须多两条道</span></span><br><span class="line">        sb.append(boundary);</span><br><span class="line">        sb.append(<span class="string">"\r\n"</span>);</span><br><span class="line">        sb.append(<span class="string">"Content-Disposition: form-data;name=\"media\"; filename=\""</span> + file.getName() + <span class="string">"\"\r\n"</span>);</span><br><span class="line">        sb.append(<span class="string">"Content-Type:application/octet-stream\r\n\r\n"</span>);</span><br><span class="line">        outputStream.write(sb.toString().getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">// 正文部分 把文件以流的方式读取后推送道URL中</span></span><br><span class="line">        DataInputStream din = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        <span class="keyword">int</span> bytes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((bytes = din.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        din.close();</span><br><span class="line">        <span class="comment">// 尾部内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] foot = (<span class="string">"\r\n--"</span> + boundary + <span class="string">"--\r\n"</span>).getBytes(<span class="string">"UTF-8"</span>);<span class="comment">// 定义数据最后分割线</span></span><br><span class="line">        outputStream.write(foot);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getResult</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuffer strbuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String lineString;</span><br><span class="line">        <span class="keyword">while</span> ((lineString = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            strbuffer.append(lineString);</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> strbuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件类型消息类"><a href="#文件类型消息类" class="headerlink" title="文件类型消息类"></a>文件类型消息类</h3><p>我们在message包下定义一个图片类型消息类（FileMessage.java）</p><p>实现消息通用接口（Message.java）并完善toJson()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessage</span> <span class="keyword">implements</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件上传接口获取的文件id 三天内有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String media_id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileMessage</span><span class="params">(String media_id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.media_id = media_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息的Json格式字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; items = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        items.put(<span class="string">"msgtype"</span>, MsgtypeEnum.file.getValue());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; textContent = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(media_id)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"通过文件上传接口获取的文件id不可为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        textContent.put(<span class="string">"media_id"</span>, media_id);</span><br><span class="line">        items.put(<span class="string">"file"</span>, textContent);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件类型消息测试类"><a href="#文件类型消息测试类" class="headerlink" title="文件类型消息测试类"></a>文件类型消息测试类</h3><p>我们在test包下定义文件类型消息测试类（FileMessageTest.java）来测试文件类型消息发送</p><ol><li>普通文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 普通文件消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Work/需求调研汇总.xlsx"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/24.jpg" alt=""></p><ol start="2"><li>音频文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 音频文件消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/KuGou/汪苏泷 - 有点甜.mp3"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/25.jpg" alt=""></p><ol start="3"><li>视频文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频文件消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Video/明月千古情.mp4"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/26.jpg" alt=""></p><ol start="4"><li>图片文件消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileMessageTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 图片文件消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPicture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String mediaId = FileUtils.upload(WebhookConfig.upload_media_url, <span class="string">"D:/Blog/avatar.png"</span>);</span><br><span class="line">        FileMessage message = <span class="keyword">new</span> FileMessage(mediaId);</span><br><span class="line">        SendResult result = WechatRobotApi.send(WebhookConfig.send_url, message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/work-wechat-group-robot/27.jpg" alt=""></p><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a>本文源码</h2><p>如上已经完成了企业微信群机器人所提供的所有类型消息发送</p><p><a href="https://github.com/GengRui01/wechat-robot-demo" target="_blank" rel="noopener">GengRui01/wechat-robot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章用来记录企业微信群机器人创建到发送消息的全过程，最后附有本文源码git地址，科学食用&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://www.gengruiblog.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数参数</title>
    <link href="https://www.gengruiblog.cn/article/20210527.html"/>
    <id>https://www.gengruiblog.cn/article/20210527.html</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-06-09T11:17:44.401Z</updated>
    
    <content type="html"><![CDATA[<p>函数参数是需要传递给函数内部的数据，在 <a href="https://gengrui01.github.io/article/20210526.html" target="_blank" rel="noopener">Python函数的定义及调用</a> 中我们已经简单接触了函数的参数</p><p>函数参数可以是任意的数据类型，只要函数内部逻辑可以处理即可</p><a id="more"></a><h2 id="参数类型校验"><a href="#参数类型校验" class="headerlink" title="参数类型校验"></a>参数类型校验</h2><p>但有时候由于函数的实现关系，需要特定数据类型的参数</p><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><p>就比如前面实现的求绝对值的函数 <code>myAbs()</code> ，我们在调用时传递一个字符串，就会引起错误</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line">absB = myAbs(<span class="string">"err"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/1.png" alt=""></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了保证函数的正常运行，我们需要对函数入参的数据类型进行校验</p><p>Python提供了 <code>isinstance()</code> 函数，可以判断参数数据类型</p><p>它接收两个参数，第一个是需要判断的参数，第二个是数据类型</p><p>如果参数是指定数据类型的就返回True，如果不是就返回False</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>xxxxxxxxxx格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(参数, 数据格式)</span><br></pre></td></tr></table></figure><h3 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num, int) <span class="keyword">or</span> <span class="keyword">not</span> isinstance(num, float):</span><br><span class="line">        print(<span class="string">'&#123;&#125;并非整数/小数数据类型'</span>.format(num))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br><span class="line"></span><br><span class="line">absB = myAbs(<span class="string">"err"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/2.png" alt=""></p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>定义函数的时候，还可以有默认参数，默认参数的意思是</p><ul><li>当这个参数有值传递的时候，就使用传递进来的值</li><li>当这个参数没有传递的时候，就使用定义的默认值</li></ul><p>函数的默认参数的作用是简化调用，调用时只需要把必须的参数传进去</p><p>但是在需要的时候，又可以传入额外的参数来覆盖默认参数的值</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>, 默认参数 = 默认值)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来求num的n次方的 <code>power</code> 函数，n默认为2</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(num, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    value = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        value = value * num</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">print(power(<span class="number">4</span>))</span><br><span class="line">print(power(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/3.png" alt=""></p><p>调用 <code>power</code> 函数求平方值时，我们只需要传入底数，不用传幂</p><p>但是在需要调用 <code>power</code> 函数求其他次方值时，又可以传入幂值</p><p>这就是函数使用默认参数的优势</p><p><strong><em>TIPS:</em></strong> 由于函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面，否则将会出现错误</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>定义函数的时候，除了默认参数，Python函数还接收一种参数叫做可变参数</p><p>可变参数的意思是参数的数量是可变的，可变参数通常使用 <code>*args</code> 来表示</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(*args)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来计算任意个数的平均值的 <code>average</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        sum += item</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    avg = sum / count</span><br><span class="line">    <span class="keyword">return</span> avg</span><br><span class="line"></span><br><span class="line">print(average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(average(<span class="number">6</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/4.png" alt=""></p><p>调用 <code>average</code> 函数求平均值时，我们只需要传入所有值，没有数量限制</p><p>这就是函数使用可变参数的优势</p><p><strong><em>TIPS:</em></strong> </p><blockquote><p>在使用上，Python会把可变参数定义为一个Tuple<br>所以在函数内部，把可变参数当作Tuple来使用就可以了<br>比如可以通过位置下标取出对应的元素等</p></blockquote><h2 id="可变关键字参数"><a href="#可变关键字参数" class="headerlink" title="可变关键字参数"></a>可变关键字参数</h2><p>可变参数在底层会把可变参数当作Tuple去处理，但Tuple在使用上有一定的局限性</p><ul><li>比如有时候想找到特定位置的参数，只能通过下标的方式去寻找</li><li>如果顺序发生变化得时候，下标就会失效，函数逻辑就得重新修改实现</li></ul><p>Python函数提供可变关键字参数，对于可变关键字参数，可以通过关键字的名字key找到对应的参数值</p><p>这和我们之前学习过的Dict类似，Python会把可变关键字参数定义为一个Dict</p><p>可变关键字参数通常使用 <code>**kwargs</code> 来表示</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数时使用默认参数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(**kwargs)</span></span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来打印同学信息的 <code>info</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名: &#123;&#125;, 性别: &#123;&#125;, 年龄: &#123;&#125;'</span>.format(kwargs.get(<span class="string">'name'</span>), kwargs.get(<span class="string">'gender'</span>), kwargs.get(<span class="string">'age'</span>)))</span><br><span class="line"></span><br><span class="line">info(name = <span class="string">'Alice'</span>, gender = <span class="string">'girl'</span>, age = <span class="number">16</span>)</span><br><span class="line">info(name = <span class="string">'Alice'</span>, age = <span class="number">16</span>, gender = <span class="string">'girl'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/5.png" alt=""></p><p>调用 <code>info</code> 打印同学信息时，传参顺序的不同对我们的打印结果没有影响</p><p>这就是函数使用可变参数的优势，他是通过 key 来拿 value</p><h2 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h2><p>对于一个拥有必需参数，默认参数，可变参数，可变关键字参数的函数</p><p>定义顺序是先必需参数，接着默认参数，之后可变参数，最后可变关键字参数</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1, param2, param3 = None, *args, **kwargs)</span>:</span></span><br><span class="line">    print(param1)</span><br><span class="line">    print(param2)</span><br><span class="line">    print(param3)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, name = <span class="string">'Alice'</span>, score = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-parameters/6.png" alt=""></p><p><strong><em>TIPS:</em></strong> </p><blockquote><p>在实际使用上，不建议定义这么多的参数<br>因为这么多类型的参数，很容易导致出错</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数参数是需要传递给函数内部的数据，在 &lt;a href=&quot;https://gengrui01.github.io/article/20210526.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python函数的定义及调用&lt;/a&gt; 中我们已经简单接触了函数的参数&lt;/p&gt;
&lt;p&gt;函数参数可以是任意的数据类型，只要函数内部逻辑可以处理即可&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python函数的定义及调用</title>
    <link href="https://www.gengruiblog.cn/article/20210526.html"/>
    <id>https://www.gengruiblog.cn/article/20210526.html</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2021-06-09T02:46:19.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>对于什么是函数，其实在前面的学习过程中我们所使用的方法就是函数</p><p>比如在set里面，使用remove()函数进行元素的删除，使用add()函数添加元素等</p><p>但是到现在我们一直都是在调用Python内置的函数，没有学习如何自己定义一个函数</p><p>在编程过程中我们经常需要用到自己定义的函数，这篇文章主要学习如何自己定义并且调用函数</p><a id="more"></a><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中，定义一个函数要使用 <code>def</code> 关键字， <code>def</code> 后写出函数名、圆括号 <code>()</code> 和冒号 <code>:</code> </p><p>传入参数或者自变量需要放在圆括号中，括号里可以用来定义参数</p><p>在缩进块中编写函数体，函数体的第一行语句可以使用文档字符串（用来存放函数说明）</p><p>用 <code>return</code> 语句结束函数，<code>return</code> 后面可以跟返回值，不带值表示返回 <code>None</code></p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义函数格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>, 参数<span class="number">2</span>, ... , 参数N)</span></span></span><br><span class="line"><span class="function">    "函数说明"</span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    函数体</span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line">    return 返回值1, 返回值2, ... , 返回值N</span><br></pre></td></tr></table></figure><h3 id="定义函数示例-求绝对值"><a href="#定义函数示例-求绝对值" class="headerlink" title="定义函数示例 - 求绝对值"></a>定义函数示例 - 求绝对值</h3><p>我们定义一个用来求绝对值的 <code>myAbs</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAbs</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -num</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/1.png" alt=""></p><p>可以看到运行结果并没有打出任何内容，是因为我们仅仅定义了这个函数并没有对他进行调用</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>在讲调用之前我们先来讲解什么是函数的返回值</p><p><code>return</code> 表示返回的意思，函数体内部的语句在执行时一旦执行到 <code>return</code> ，函数就执行完毕并将结果返回</p><p>因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑</p><blockquote><p>分析上面函数 在参数&gt;=0时返回参数本身，在参数&lt;0时返回参数相反数</p></blockquote><h3 id="定义函数示例-求正方形周长面积"><a href="#定义函数示例-求正方形周长面积" class="headerlink" title="定义函数示例 - 求正方形周长面积"></a>定义函数示例 - 求正方形周长面积</h3><p>除了返回一个值以外，函数也可以返回多个值</p><p>在函数中如果需要返回多个值，值与值之间使用逗号分隔即可，但是需要注意顺序</p><p>比如我们定义一个用来求正方形周长面积的 <code>squareDate</code> 函数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareDate</span><span class="params">(side)</span>:</span></span><br><span class="line">    c = <span class="number">4</span> * side</span><br><span class="line">    s = side * side</span><br><span class="line">    <span class="keyword">return</span> c, s</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/2.png" alt=""></p><p>可以看到运行结果并没有打出任何内容，还是因为我们没有调用函数</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>在本节之前的内容里我们调用了很多Python内置的函数</p><p>通过函数名后面跟圆括号，括号里传入函数需要的参数就可以完成函数的调用</p><p>需要用到函数返回值的可以直接接收返回值或者直接打印</p><p>不需要返回值或者返回值为None的可以省略函数名前的 <code>返回值 =</code></p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>调用函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值<span class="number">1</span>, 返回值<span class="number">2</span>, ... , 返回值N = 函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ... , 参数N)</span><br></pre></td></tr></table></figure><p>上面我们定义了求绝对值以及求正方形周长面积两个函数，现在我们写代码来调用这两个函数</p><h3 id="调用函数示例-求绝对值"><a href="#调用函数示例-求绝对值" class="headerlink" title="调用函数示例 - 求绝对值"></a>调用函数示例 - 求绝对值</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">absA = myAbs(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"7的绝对值是&#123;&#125;"</span>.format(absA))</span><br><span class="line">absB = myAbs(<span class="number">-9</span>)</span><br><span class="line">print(<span class="string">"-9的绝对值是&#123;&#125;"</span>.format(absB))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/3.png" alt=""></p><h3 id="调用函数示例-求正方形周长面积"><a href="#调用函数示例-求正方形周长面积" class="headerlink" title="调用函数示例 - 求正方形周长面积"></a>调用函数示例 - 求正方形周长面积</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cA, sA = squareDate(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"边长为7的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(cA, sA))</span><br><span class="line">cB, sB = squareDate(<span class="number">9</span>)</span><br><span class="line">print(<span class="string">"边长为9的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(cB, sB))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/4.png" alt=""></p><h2 id="函数内部调用其他函数"><a href="#函数内部调用其他函数" class="headerlink" title="函数内部调用其他函数"></a>函数内部调用其他函数</h2><p>在函数内部，还可以调用其他函数</p><p>比如求正方形周长面积函数中同时返回正方形的周长和面积</p><p>而求周长和求面积是完全独立的逻辑，可以定义成两个新的函数</p><p>然后在求正方形周长面积函数中调用这两个新函数，得到结果并返回</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareS</span><span class="params">(side)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> side * side</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareC</span><span class="params">(side)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * side</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squareDate</span><span class="params">(side)</span>:</span></span><br><span class="line">    c = squareC(side)</span><br><span class="line">    s = squareS(side)</span><br><span class="line">    <span class="keyword">return</span> c, s</span><br><span class="line"></span><br><span class="line">c, s = squareDate(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"边长为7的正方形周长是&#123;&#125;面积是&#123;&#125;"</span>.format(c, s))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/5.png" alt=""></p><p>在函数内部调用其他函数，是非常常见的</p><p>通过合理逻辑拆分可以起到降低程序复杂度的作用</p><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>在一个函数内部调用其自身，这个函数就是递归函数</p><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>定义递归函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span></span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    函数名<span class="params">()</span></span></span><br><span class="line"><span class="function">    ......</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>比如我们定义一个用来计算阶乘的 <code>factorial</code> 函数</p><p>我们先用数学方法计算 num 的阶乘</p><blockquote><p> num!<br>= 1 * 2 * 3 * … * (num-1) * num<br>= (num-1)! * num</p></blockquote><p>我们要定义的函数 <code>factorial(num)</code> 只有当 <code>num=1</code> 时需要特殊处理（返回1）</p><p>其他情况下 <code>factorial(num)</code> 也就等于 <code>factorial(num-1) * num</code></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> factorial(num - <span class="number">1</span>) * num</span><br><span class="line"></span><br><span class="line">print(factorial(<span class="number">1</span>))</span><br><span class="line">print(factorial(<span class="number">5</span>)) </span><br><span class="line">print(factorial(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-function-define-call/6.png" alt=""></p><p>递归函数的优点是定义简单，逻辑清晰</p><p>理论上所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是函数&quot;&gt;&lt;a href=&quot;#什么是函数&quot; class=&quot;headerlink&quot; title=&quot;什么是函数&quot;&gt;&lt;/a&gt;什么是函数&lt;/h2&gt;&lt;p&gt;对于什么是函数，其实在前面的学习过程中我们所使用的方法就是函数&lt;/p&gt;
&lt;p&gt;比如在set里面，使用remove()函数进行元素的删除，使用add()函数添加元素等&lt;/p&gt;
&lt;p&gt;但是到现在我们一直都是在调用Python内置的函数，没有学习如何自己定义一个函数&lt;/p&gt;
&lt;p&gt;在编程过程中我们经常需要用到自己定义的函数，这篇文章主要学习如何自己定义并且调用函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取、新增、删除Set容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210523.html"/>
    <id>https://www.gengruiblog.cn/article/20210523.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.497Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>由于Set里面的元素是没有顺序的，因此我们不能像访问List那样通过索引来访问Set</p><p>访问Set中的某个元素实际上就是判断一个元素是否在Set中</p><p>我们可以使用in来判断某个元素是否在Set中</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>判断某个元素是否在Set中格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item <span class="keyword">in</span> set</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且判断Candy和Frank是否在班级中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line"><span class="string">'Candy'</span> <span class="keyword">in</span> students</span><br><span class="line"><span class="string">'Frank'</span> <span class="keyword">in</span> students</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/1.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><h3 id="新增单个元素"><a href="#新增单个元素" class="headerlink" title="新增单个元素"></a>新增单个元素</h3><p>Set本身提供了add方法，传入元素就可以新增到set中</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.add(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并且新增名为Frank的学生</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.add(<span class="string">'Frank'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/2.png" alt=""></p><h3 id="批量新增元素"><a href="#批量新增元素" class="headerlink" title="批量新增元素"></a>批量新增元素</h3><p>有些时候需要往Set里添加多个元素，如果一个一个add是比较麻烦的</p><p>Set提供了update()方法，可以一次性给set添加多个元素</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.update([item1, item2, ... , itemN])</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并新增一批同学名字分别是 ‘Hally’,  ‘Isen’,  ‘Jenny’,  ‘Karl’</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.update([<span class="string">'Hally'</span>,  <span class="string">'Isen'</span>,  <span class="string">'Jenny'</span>,  <span class="string">'Karl'</span>])</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/3.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Set本身提供了discard方法允许我们删除Set中的元素</p><h4 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.discard(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>把他们存入Set中并删除Candy</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.discard(<span class="string">'Candy'</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/4.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>和Dict一样，Set也提供了clear()方法，可以快速清除Set中所有的元素</p><h4 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><p>班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>定义一个Set存储学生姓名，之后清除Set中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">print(students)</span><br><span class="line">students.clear()</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/5.png" alt=""></p><h2 id="判断集合是否重合"><a href="#判断集合是否重合" class="headerlink" title="判断集合是否重合"></a>判断集合是否重合</h2><p>需要判断两个集合是否有重合的地方，需要使用for循环一个一个的去判断，非常麻烦</p><p>Set本身提供了isdisjoint方法快速判断两个集合是否有重合，如果有重合，返回False，否则返回True</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1.isdisjoint(item2)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>1班里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五位学生</p><p>2班里有 ‘David’, ‘Ellena’, ‘Frank’, ‘Green’, ‘Hally’ 五位学生</p><p>把1、2班学生分别存入两个Set中，判断是否有学生在两个班中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students1 = set([<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>])</span><br><span class="line">students2 = set([<span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>, <span class="string">'Green'</span>, <span class="string">'Hally'</span>])</span><br><span class="line">students.isdisjoint(<span class="string">'Candy'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-set-operate/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Set容器中的数据进行读取、新增、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字典(Dict)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210521.html"/>
    <id>https://www.gengruiblog.cn/article/20210521.html</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找速度快"><a href="#查找速度快" class="headerlink" title="查找速度快"></a>查找速度快</h2><p>字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样</p><p>而List的查找速度随着元素增加而逐渐下降</p><a id="more"></a><p>不过Dict的查找速度快不是没有代价的，Dict的缺点是占用内存大，还会浪费很多内容</p><p>List正好相反，占用内存小，但是查找速度慢</p><h2 id="Python遍历Dict"><a href="#Python遍历Dict" class="headerlink" title="Python遍历Dict"></a>Python遍历Dict</h2><p>通过直接print(dict)打印出来的是完整的一个Dict</p><p>有时候，我们需要把Dict中满足一定条件的元素打印出来</p><p>这种时候需要使用for循环遍历Dict，并通过条件判断把满足条件的打印出来</p><p>Dict提供了items()方法，会返回Dict中所有的元素，每个元素包含key和value</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>遍历Dict格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">for</span>循环子分支</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>判断Dict中是否还有新的key-value对</p><p>有新key-value对时取新key-value对执行子逻辑分支操作</p><p>没有新key-value对结束循环</p><p><img src="https://gengrui01.github.io/picture/python-loop/3.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出大于70分的学生成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    <span class="keyword">if</span> value &gt; <span class="number">70</span>:</span><br><span class="line">        print(key, value)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-characteristic/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查找速度快&quot;&gt;&lt;a href=&quot;#查找速度快&quot; class=&quot;headerlink&quot; title=&quot;查找速度快&quot;&gt;&lt;/a&gt;查找速度快&lt;/h2&gt;&lt;p&gt;字典(Dict)的第一个特点是查找速度快，无论Dict有10个元素还是10万个元素，查找速度都一样&lt;/p&gt;
&lt;p&gt;而List的查找速度随着元素增加而逐渐下降&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取、新增、修改、删除Dict容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210520.html"/>
    <id>https://www.gengruiblog.cn/article/20210520.html</id>
    <published>2021-05-19T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.523Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作</p><a id="more"></a><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="根据key读取value"><a href="#根据key读取value" class="headerlink" title="根据key读取value"></a>根据key读取value</h3><p>Dict本身提供了get方法，把key当作参数传递给get方法就可以获取对应的value，当key不存在时会返回None</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出Bob和David的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.get(<span class="string">'Bob'</span>)</span><br><span class="line">dict.get(<span class="string">'David'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/1.png" alt=""></p><h3 id="读取Dict的所有key"><a href="#读取Dict的所有key" class="headerlink" title="读取Dict的所有key"></a>读取Dict的所有key</h3><p>Dict本身提供了keys方法，可以返回dict中所有的key</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生姓名</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.keys()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/6.png" alt=""></p><h3 id="读取Dict的所有value"><a href="#读取Dict的所有value" class="headerlink" title="读取Dict的所有value"></a>读取Dict的所有value</h3><p>Dict本身提供了values方法，可以返回dict中所有的value</p><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩并且打印出所有学生成绩值</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/7.png" alt=""></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>可以使用赋值语句往Dict里面新增key-value对</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，添加Frank的成绩59，Green成绩100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Frank'</span>] = <span class="number">59</span></span><br><span class="line">dict[<span class="string">'Green'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/2.png" alt=""></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>上面我们用赋值语句往Dict里面新增了新的元素</p><p>如果说使用赋值语句时传入Dict中已存在的key，就会变成修改该key对应的value值</p><h3 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h3><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict[key] = value</span><br></pre></td></tr></table></figure><h3 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h3><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，修改Alice的成绩为73，Candy的成绩为100</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict[<span class="string">'Alice'</span>] = <span class="number">73</span></span><br><span class="line">dict[<span class="string">'Candy'</span>] = <span class="number">100</span></span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/4.png" alt=""></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><p>Dict本身提供了pop方法，把key当作参数传递给pop方法就可以删除该元素并返回对应的value</p><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.pop(key)</span><br></pre></td></tr></table></figure><h4 id="使用示例-5"><a href="#使用示例-5" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，删除Candy的成绩</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.pop(<span class="string">'Candy'</span>)</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/3.png" alt=""></p><h3 id="清除所有元素"><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><p>Dict本身提供了clear方法，可以清除Dict中所有的元素</p><h4 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h4><p>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.clear()</span><br></pre></td></tr></table></figure><h4 id="使用示例-6"><a href="#使用示例-6" class="headerlink" title="使用示例"></a>使用示例</h4><p>学生成绩如下：</p><ul><li>‘Alice’: 45,</li><li>‘Bob’: 60,</li><li>‘Candy’: 75,</li><li>‘David’: 86,</li><li>‘Ellena’: 94</li></ul><p>定义一个Dict存储学生成绩，之后清除Dict中的所有元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'Alice'</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">'Bob'</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">'Candy'</span>: <span class="number">75</span>,</span><br><span class="line">    <span class="string">'David'</span>: <span class="number">86</span>,</span><br><span class="line">    <span class="string">'Ellena'</span>: <span class="number">94</span></span><br><span class="line">&#125;</span><br><span class="line">print(dict)</span><br><span class="line">dict.clear()</span><br><span class="line">print(dict)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-dict-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来写一下如何对Dict容器中的数据进行读取、新增、修改、删除操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python访问Tuple容器的其他方法</title>
    <link href="https://www.gengruiblog.cn/article/20210518.html"/>
    <id>https://www.gengruiblog.cn/article/20210518.html</id>
    <published>2021-05-17T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.387Z</updated>
    
    <content type="html"><![CDATA[<p>由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据</p><p>在使用上Tuple提供了便捷的方法可以访问Tuple中的数据</p><a id="more"></a><h2 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h2><p>count()方法用来统计tuple中某个元素出现的次数</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p>count()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(item)</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>计数 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9出现的次数</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.count(<span class="number">1</span>)</span><br><span class="line">tuple.count(<span class="number">5</span>)</span><br><span class="line">tuple.count(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/1.png" alt=""></p><h2 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h2><p>index()方法用来返回指定元素的下标，当一个元素多次重复出现时，则返回第一次出现的下标位置</p><h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><p>index()方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index(index)</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>返回 1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9 中1、5、9的下标</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">tuple.index(<span class="number">1</span>)</span><br><span class="line">tuple.index(<span class="number">5</span>)</span><br><span class="line">tuple.index(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-select-other/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Tuple一旦定义之后便不可修改，所以在实际编程中，Tuple经常用于存放固定不变的数据&lt;/p&gt;
&lt;p&gt;在使用上Tuple提供了便捷的方法可以访问Tuple中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python元组(Tuple)的特性</title>
    <link href="https://www.gengruiblog.cn/article/20210517.html"/>
    <id>https://www.gengruiblog.cn/article/20210517.html</id>
    <published>2021-05-16T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元组的不可变性"><a href="#元组的不可变性" class="headerlink" title="元组的不可变性"></a>元组的不可变性</h2><p>元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据</p><p>也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍</p><a id="more"></a><h2 id="可变Tuple"><a href="#可变Tuple" class="headerlink" title="可变Tuple"></a>可变Tuple</h2><p>上面说到Tuple和List一个最大的不同点就是Tuple是不可变的</p><p>但这针对的仅仅是基础数据类型（数字类型、布尔类型、字符串类型）的数据，对于组合数据类型则不受这个约束</p><p>比如Tuple中的某个元素是List，那么该List内部的元素是可以被改变的</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="number">1</span>, <span class="string">'CH'</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(tuple)</span><br><span class="line">list = tuple[<span class="number">2</span>]</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">print(tuple)</span><br></pre></td></tr></table></figure><p>执行流程：</p><ul><li>先定义一个tuple存放一个数字，一个字符串，一个列表</li><li>打印tuple</li><li>取tuple的第三个元素list</li><li>把列表list的第二个元素改为2</li><li>再次打印tuple</li></ul><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/1.png" alt=""></p><p>tuple中的第三个元素已经成功被改变了，这就有悖元组的不可变性，我们来画图分析一下原因</p><p><img src="https://gengrui01.github.io/picture/python-tuple-characteristic/2.png" alt=""></p><p>这是因为虽然元组中的列表元素改变了，但是Tuple本身指向的List仍然是同一个List</p><p>List本身并没有改变，改变的只是List里面的一个元素，这是Tuple不可变性所约束不到的范围</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;元组的不可变性&quot;&gt;&lt;a href=&quot;#元组的不可变性&quot; class=&quot;headerlink&quot; title=&quot;元组的不可变性&quot;&gt;&lt;/a&gt;元组的不可变性&lt;/h2&gt;&lt;p&gt;元组(Tuple)有一个很重要的特性就是他是固定不变的，Tuple中的每一个元素都不可被改变，同时也不能再往Tuple中添加数据&lt;/p&gt;
&lt;p&gt;也正是因为Tuple的不可变性，使得Tuple的运行性能是List的数倍&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python二维列表</title>
    <link href="https://www.gengruiblog.cn/article/20210515.html"/>
    <id>https://www.gengruiblog.cn/article/20210515.html</id>
    <published>2021-05-14T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是二维列表"><a href="#什么是二维列表" class="headerlink" title="什么是二维列表"></a>什么是二维列表</h2><p>首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素</p><p>并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）</p><p>在List里面存放List，就会得到二维列表</p><a id="more"></a><h2 id="创建二维列表"><a href="#创建二维列表" class="headerlink" title="创建二维列表"></a>创建二维列表</h2><p>如下图所示是Alice、Bob、David三人的成绩单，请把他们存入List中并顺序打印</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/1.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aliceScore = [<span class="number">100</span>, <span class="number">89</span>, <span class="number">92</span>]</span><br><span class="line">bobScore = [<span class="number">70</span>, <span class="number">65</span>, <span class="number">81</span>]</span><br><span class="line">davidScore = [<span class="number">88</span>, <span class="number">72</span>, <span class="number">77</span>]</span><br><span class="line">scoreList = [aliceScore, bobScore, davidScore]</span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scoreList:</span><br><span class="line">    print(score)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/2.png" alt=""></p><h2 id="访问指定位置"><a href="#访问指定位置" class="headerlink" title="访问指定位置"></a>访问指定位置</h2><p>比如说要打印出Bob的英语成绩可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(scoreList[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://gengrui01.github.io/picture/python-list-two-dimensional/3.png" alt=""></p><p>其中scoreList[1]得到Bob的成绩列表，再通过下标[2]得到Bob的英语成绩</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是二维列表&quot;&gt;&lt;a href=&quot;#什么是二维列表&quot; class=&quot;headerlink&quot; title=&quot;什么是二维列表&quot;&gt;&lt;/a&gt;什么是二维列表&lt;/h2&gt;&lt;p&gt;首先来回顾一下什么时列表(List)，List本质上就是一个容器，可以存放不同类型的元素&lt;/p&gt;
&lt;p&gt;并没有规定里面必须要放什么东西，所以可以在大容器里放小容器（小容器就是大容器的元素）&lt;/p&gt;
&lt;p&gt;在List里面存放List，就会得到二维列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python新增、修改、删除List容器中的数据</title>
    <link href="https://www.gengruiblog.cn/article/20210514.html"/>
    <id>https://www.gengruiblog.cn/article/20210514.html</id>
    <published>2021-05-13T16:00:00.000Z</published>
    <updated>2021-06-09T11:16:53.300Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据</p><a id="more"></a><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><p>新增元素的方式有 <code>append</code> 和 <code>insert</code> 两种：</p><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>新增元素append方法会把新的元素添加到现有元素之后</p><ul><li><code>insert(index, item)</code> 方法：把新的元素添加到指定位置，该位置及之后的所有元素均往后移一位</li></ul><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素append方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append(item)</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在转来一位名为 ‘Frank’ 的新同学，请把新同学添加进学生列表中</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.append(<span class="string">'Frank'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/1.png" alt=""></p><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><p>新增元素insert方法会把新的元素添加到指定索引位置，该位置及之后的所有元素均往后移一位</p><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><p>新增元素insert方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert(index, item)</span><br></pre></td></tr></table></figure><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’, ‘Frank’ 五名同学</p><p>现在转来一位名为 ‘Candy’ 的新同学，请把新同学添加进学生列表中的第3位</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.insert(<span class="number">2</span>, <span class="string">'Candy'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/2.png" alt=""></p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h3><p>删除元素pop方法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop(index)</span><br></pre></td></tr></table></figure><p>该方法可以传入索引值作为参数，也可以不传参</p><ul><li>不传参：默认删除最后一个元素</li><li>传参：删除指定索引位置的元素，该位置之后的所有元素均往前移一位</li></ul><h3 id="使用示例-不传参"><a href="#使用示例-不传参" class="headerlink" title="使用示例(不传参)"></a>使用示例(不传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’, ‘Frank’ 六名同学</p><p>现在 ‘Frank’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>, <span class="string">'Frank'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop()</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/3.png" alt=""></p><h3 id="使用示例-传参"><a href="#使用示例-传参" class="headerlink" title="使用示例(传参)"></a>使用示例(传参)</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘Candy’, ‘David’, ‘Ellena’ 五名同学</p><p>现在 ‘Candy’ 同学因为家庭原因需要转学，请把他从学生列表中删除</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Candy'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.pop(<span class="number">2</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/4.png" alt=""></p><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><p>除了可以向列表添加、删除列表元素以外，列表已有的元素也是可以修改的</p><p>我们通过索引指定位置，给该位置赋值新的元素，即可替换列表中原有的元素，已达到修改元素的目的</p><h3 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[index] = newItem</span><br></pre></td></tr></table></figure><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>原来班级里有 ‘Alice’, ‘Bob’, ‘David’, ‘Ellena’ 四名同学</p><p>现在 ‘Ellena’ 同学的名字打错了，正确的应该是 ‘Ellen’，请修改学生列表中的元素</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'David'</span>, <span class="string">'Ellena'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list[<span class="number">3</span>] = <span class="string">'Ellen'</span></span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://gengrui01.github.io/picture/python-list-operate/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章记录了如何访问List容器中的数据，这篇文章来写一下如何新增、修改、删除List容器中的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://www.gengruiblog.cn/categories/Python/"/>
    
    
  </entry>
  
</feed>
